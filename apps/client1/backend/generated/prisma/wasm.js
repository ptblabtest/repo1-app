
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.14.0
 * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
 */
Prisma.prismaVersion = {
  client: "6.14.0",
  engine: "717184b7b35ea05dfa71a3236b7af656013e1e49"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.CostTypeScalarFieldEnum = {
  id: 'id',
  order: 'order',
  name: 'name',
  parentId: 'parentId',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.BudgetScalarFieldEnum = {
  id: 'id',
  regNumber: 'regNumber',
  description: 'description',
  amount: 'amount',
  approvedDate: 'approvedDate',
  revision: 'revision',
  assigneeId: 'assigneeId',
  createdById: 'createdById',
  updatedById: 'updatedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  taskId: 'taskId'
};

exports.Prisma.BudgetItemScalarFieldEnum = {
  id: 'id',
  budgetId: 'budgetId',
  categoryId: 'categoryId',
  description: 'description',
  quantity: 'quantity',
  timeUnit: 'timeUnit',
  unitPrice: 'unitPrice',
  amount: 'amount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.FundScalarFieldEnum = {
  id: 'id',
  regNumber: 'regNumber',
  description: 'description',
  amount: 'amount',
  requestDate: 'requestDate',
  approvedDate: 'approvedDate',
  closedDate: 'closedDate',
  expiredDate: 'expiredDate',
  voidDate: 'voidDate',
  plannedPaymentDate: 'plannedPaymentDate',
  type: 'type',
  revision: 'revision',
  assigneeId: 'assigneeId',
  createdById: 'createdById',
  updatedById: 'updatedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  taskId: 'taskId'
};

exports.Prisma.FundItemScalarFieldEnum = {
  id: 'id',
  fundId: 'fundId',
  categoryId: 'categoryId',
  description: 'description',
  quantity: 'quantity',
  timeUnit: 'timeUnit',
  unitPrice: 'unitPrice',
  amount: 'amount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ExpenseScalarFieldEnum = {
  id: 'id',
  regNumber: 'regNumber',
  categoryId: 'categoryId',
  description: 'description',
  amount: 'amount',
  date: 'date',
  reviewDate: 'reviewDate',
  reviewedById: 'reviewedById',
  fundId: 'fundId',
  createdById: 'createdById',
  updatedById: 'updatedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  taskId: 'taskId'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  regNumber: 'regNumber',
  clientId: 'clientId',
  vendorId: 'vendorId',
  description: 'description',
  amount: 'amount',
  date: 'date',
  type: 'type',
  createdById: 'createdById',
  updatedById: 'updatedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  purchaseId: 'purchaseId',
  fundId: 'fundId'
};

exports.Prisma.PurchaseScalarFieldEnum = {
  id: 'id',
  regNumber: 'regNumber',
  date: 'date',
  dueDate: 'dueDate',
  description: 'description',
  amount: 'amount',
  vatAmount: 'vatAmount',
  totalAmount: 'totalAmount',
  createdById: 'createdById',
  updatedById: 'updatedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  taskId: 'taskId'
};

exports.Prisma.PurchaseItemScalarFieldEnum = {
  id: 'id',
  purchaseId: 'purchaseId',
  categoryId: 'categoryId',
  description: 'description',
  quantity: 'quantity',
  unitPrice: 'unitPrice',
  vatRate: 'vatRate',
  amount: 'amount',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LeadScalarFieldEnum = {
  id: 'id',
  regNumber: 'regNumber',
  name: 'name',
  role: 'role',
  email: 'email',
  phone: 'phone',
  companyName: 'companyName',
  companyAddress: 'companyAddress',
  leadSource: 'leadSource',
  leadDate: 'leadDate',
  leadAddress: 'leadAddress',
  description: 'description',
  approvedDate: 'approvedDate',
  prospectLocation: 'prospectLocation',
  assigneeId: 'assigneeId',
  createdById: 'createdById',
  updatedById: 'updatedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.OpportunityScalarFieldEnum = {
  id: 'id',
  regNumber: 'regNumber',
  title: 'title',
  company: 'company',
  currency: 'currency',
  baseAmount: 'baseAmount',
  exchangeRate: 'exchangeRate',
  amount: 'amount',
  expectedCloseDate: 'expectedCloseDate',
  description: 'description',
  approvedDate: 'approvedDate',
  productId: 'productId',
  leadId: 'leadId',
  assigneeId: 'assigneeId',
  createdById: 'createdById',
  updatedById: 'updatedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.QuoteScalarFieldEnum = {
  id: 'id',
  regNumber: 'regNumber',
  title: 'title',
  company: 'company',
  currency: 'currency',
  baseAmount: 'baseAmount',
  exchangeRate: 'exchangeRate',
  amount: 'amount',
  releasedDate: 'releasedDate',
  approvedDate: 'approvedDate',
  expiredDate: 'expiredDate',
  description: 'description',
  productId: 'productId',
  opportunityId: 'opportunityId',
  assigneeId: 'assigneeId',
  createdById: 'createdById',
  updatedById: 'updatedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ContractScalarFieldEnum = {
  id: 'id',
  regNumber: 'regNumber',
  title: 'title',
  signedDate: 'signedDate',
  startDate: 'startDate',
  endDate: 'endDate',
  description: 'description',
  penalty: 'penalty',
  paymentTerm: 'paymentTerm',
  currency: 'currency',
  baseAmount: 'baseAmount',
  exchangeRate: 'exchangeRate',
  amount: 'amount',
  clientPicName: 'clientPicName',
  revision: 'revision',
  clientId: 'clientId',
  productId: 'productId',
  quoteId: 'quoteId',
  assigneeId: 'assigneeId',
  createdById: 'createdById',
  updatedById: 'updatedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.MilestoneScalarFieldEnum = {
  id: 'id',
  order: 'order',
  title: 'title',
  description: 'description',
  startDate: 'startDate',
  endDate: 'endDate',
  approvedDate: 'approvedDate',
  finishedDate: 'finishedDate',
  share: 'share',
  amount: 'amount',
  deliverables: 'deliverables',
  progress: 'progress',
  revision: 'revision',
  contractId: 'contractId',
  assigneeId: 'assigneeId',
  createdById: 'createdById',
  updatedById: 'updatedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProjectScalarFieldEnum = {
  id: 'id',
  regNumber: 'regNumber',
  progress: 'progress',
  finishedDate: 'finishedDate',
  contractId: 'contractId',
  assigneeId: 'assigneeId',
  createdById: 'createdById',
  updatedById: 'updatedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.TaskScalarFieldEnum = {
  id: 'id',
  order: 'order',
  title: 'title',
  plannedStartDate: 'plannedStartDate',
  plannedEndDate: 'plannedEndDate',
  actualStartDate: 'actualStartDate',
  actualEndDate: 'actualEndDate',
  metrics: 'metrics',
  progress: 'progress',
  remarks: 'remarks',
  projectId: 'projectId',
  milestoneId: 'milestoneId',
  assigneeId: 'assigneeId',
  createdById: 'createdById',
  updatedById: 'updatedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ActivityScalarFieldEnum = {
  id: 'id',
  description: 'description',
  startDateTime: 'startDateTime',
  endDateTime: 'endDateTime',
  createdById: 'createdById',
  updatedById: 'updatedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  taskId: 'taskId'
};

exports.Prisma.ClientScalarFieldEnum = {
  id: 'id',
  regNumber: 'regNumber',
  name: 'name',
  address: 'address',
  phone: 'phone',
  email: 'email',
  legal: 'legal',
  category: 'category',
  country: 'country',
  contactName: 'contactName',
  contactRole: 'contactRole',
  contactPhone: 'contactPhone',
  contactEmail: 'contactEmail',
  taxNumber: 'taxNumber',
  taxAddress: 'taxAddress',
  taxStatus: 'taxStatus',
  procurementName: 'procurementName',
  procurementRole: 'procurementRole',
  procurementPhone: 'procurementPhone',
  procurementEmail: 'procurementEmail',
  billingAddress: 'billingAddress',
  paymentName: 'paymentName',
  paymentRole: 'paymentRole',
  paymentPhone: 'paymentPhone',
  paymentEmail: 'paymentEmail',
  bankName: 'bankName',
  accountReferenceNumber: 'accountReferenceNumber',
  accountOwnerName: 'accountOwnerName',
  createdById: 'createdById',
  updatedById: 'updatedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.VendorScalarFieldEnum = {
  id: 'id',
  regNumber: 'regNumber',
  name: 'name',
  address: 'address',
  phone: 'phone',
  email: 'email',
  city: 'city',
  postalCode: 'postalCode',
  legal: 'legal',
  vendorCategory: 'vendorCategory',
  contactName: 'contactName',
  contactRole: 'contactRole',
  contactPhone: 'contactPhone',
  contactEmail: 'contactEmail',
  taxNumber: 'taxNumber',
  taxStatus: 'taxStatus',
  siupNumber: 'siupNumber',
  nibNumber: 'nibNumber',
  pkpNumber: 'pkpNumber',
  productType: 'productType',
  description: 'description',
  bankName: 'bankName',
  accountReferenceNumber: 'accountReferenceNumber',
  accountOwnerName: 'accountOwnerName',
  createdById: 'createdById',
  updatedById: 'updatedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  regNumber: 'regNumber',
  name: 'name',
  description: 'description',
  createdById: 'createdById',
  updatedById: 'updatedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.CategoryScalarFieldEnum = {
  id: 'id',
  key: 'key',
  value: 'value',
  label: 'label'
};

exports.Prisma.CountryScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code'
};

exports.Prisma.NoteScalarFieldEnum = {
  id: 'id',
  description: 'description',
  createdById: 'createdById',
  updatedById: 'updatedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  budgetId: 'budgetId',
  clientId: 'clientId',
  contractId: 'contractId',
  expenseId: 'expenseId',
  fundId: 'fundId',
  leadId: 'leadId',
  milestoneId: 'milestoneId',
  opportunityId: 'opportunityId',
  paymentId: 'paymentId',
  projectId: 'projectId',
  quoteId: 'quoteId',
  taskId: 'taskId',
  vendorId: 'vendorId'
};

exports.Prisma.StageScalarFieldEnum = {
  id: 'id',
  stageTypeId: 'stageTypeId',
  comment: 'comment',
  createdById: 'createdById',
  updatedById: 'updatedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  budgetId: 'budgetId',
  contractId: 'contractId',
  fundId: 'fundId',
  leadId: 'leadId',
  milestoneId: 'milestoneId',
  opportunityId: 'opportunityId',
  projectId: 'projectId',
  quoteId: 'quoteId',
  taskId: 'taskId',
  paymentId: 'paymentId'
};

exports.Prisma.StageTypeScalarFieldEnum = {
  id: 'id',
  model: 'model',
  order: 'order',
  value: 'value',
  label: 'label'
};

exports.Prisma.EventScalarFieldEnum = {
  id: 'id',
  title: 'title',
  category: 'category',
  description: 'description',
  startDate: 'startDate',
  endDate: 'endDate',
  url: 'url',
  createdById: 'createdById',
  updatedById: 'updatedById',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  contractId: 'contractId',
  leadId: 'leadId',
  milestoneId: 'milestoneId',
  opportunityId: 'opportunityId',
  projectId: 'projectId',
  quoteId: 'quoteId'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  emailVerifiedAt: 'emailVerifiedAt',
  password: 'password',
  rememberToken: 'rememberToken',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  status: 'status',
  departmentId: 'departmentId',
  roleId: 'roleId',
  organizationId: 'organizationId'
};

exports.Prisma.OrganizationScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code'
};

exports.Prisma.RoleScalarFieldEnum = {
  id: 'id',
  name: 'name',
  level: 'level'
};

exports.Prisma.DepartmentScalarFieldEnum = {
  id: 'id',
  name: 'name',
  code: 'code',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.PermissionScalarFieldEnum = {
  id: 'id',
  name: 'name',
  resource: 'resource',
  action: 'action',
  description: 'description',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.DepartmentPermissionScalarFieldEnum = {
  id: 'id',
  departmentId: 'departmentId',
  permissionId: 'permissionId',
  createdAt: 'createdAt',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.UserPermissionScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  permissionId: 'permissionId',
  createdAt: 'createdAt',
  createdById: 'createdById',
  updatedById: 'updatedById'
};

exports.Prisma.ProfileScalarFieldEnum = {
  id: 'id',
  name: 'name',
  department: 'department',
  position: 'position',
  joinDate: 'joinDate',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  createdById: 'createdById',
  updatedById: 'updatedById',
  userId: 'userId'
};

exports.Prisma.SessionScalarFieldEnum = {
  sid: 'sid',
  sess: 'sess',
  expire: 'expire'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.JsonNullValueInput = {
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.UserStatus = exports.$Enums.UserStatus = {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED'
};

exports.Prisma.ModelName = {
  CostType: 'CostType',
  Budget: 'Budget',
  BudgetItem: 'BudgetItem',
  Fund: 'Fund',
  FundItem: 'FundItem',
  Expense: 'Expense',
  Payment: 'Payment',
  Purchase: 'Purchase',
  PurchaseItem: 'PurchaseItem',
  Lead: 'Lead',
  Opportunity: 'Opportunity',
  Quote: 'Quote',
  Contract: 'Contract',
  Milestone: 'Milestone',
  Project: 'Project',
  Task: 'Task',
  Activity: 'Activity',
  Client: 'Client',
  Vendor: 'Vendor',
  Product: 'Product',
  Category: 'Category',
  Country: 'Country',
  Note: 'Note',
  Stage: 'Stage',
  StageType: 'StageType',
  Event: 'Event',
  User: 'User',
  Organization: 'Organization',
  Role: 'Role',
  Department: 'Department',
  Permission: 'Permission',
  DepartmentPermission: 'DepartmentPermission',
  UserPermission: 'UserPermission',
  Profile: 'Profile',
  Session: 'Session'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
