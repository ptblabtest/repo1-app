
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model ReportCategory
 * 
 */
export type ReportCategory = $Result.DefaultSelection<Prisma.$ReportCategoryPayload>
/**
 * Model Report
 * 
 */
export type Report = $Result.DefaultSelection<Prisma.$ReportPayload>
/**
 * Model File
 * 
 */
export type File = $Result.DefaultSelection<Prisma.$FilePayload>
/**
 * Model Note
 * 
 */
export type Note = $Result.DefaultSelection<Prisma.$NotePayload>
/**
 * Model Stage
 * 
 */
export type Stage = $Result.DefaultSelection<Prisma.$StagePayload>
/**
 * Model StageType
 * 
 */
export type StageType = $Result.DefaultSelection<Prisma.$StageTypePayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Organization
 * 
 */
export type Organization = $Result.DefaultSelection<Prisma.$OrganizationPayload>
/**
 * Model Role
 * 
 */
export type Role = $Result.DefaultSelection<Prisma.$RolePayload>
/**
 * Model Department
 * 
 */
export type Department = $Result.DefaultSelection<Prisma.$DepartmentPayload>
/**
 * Model Permission
 * 
 */
export type Permission = $Result.DefaultSelection<Prisma.$PermissionPayload>
/**
 * Model DepartmentPermission
 * 
 */
export type DepartmentPermission = $Result.DefaultSelection<Prisma.$DepartmentPermissionPayload>
/**
 * Model UserPermission
 * 
 */
export type UserPermission = $Result.DefaultSelection<Prisma.$UserPermissionPayload>
/**
 * Model Profile
 * 
 */
export type Profile = $Result.DefaultSelection<Prisma.$ProfilePayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const UserStatus: {
  ACTIVE: 'ACTIVE',
  INACTIVE: 'INACTIVE',
  SUSPENDED: 'SUSPENDED'
};

export type UserStatus = (typeof UserStatus)[keyof typeof UserStatus]

}

export type UserStatus = $Enums.UserStatus

export const UserStatus: typeof $Enums.UserStatus

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more ReportCategories
 * const reportCategories = await prisma.reportCategory.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  const U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more ReportCategories
   * const reportCategories = await prisma.reportCategory.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.reportCategory`: Exposes CRUD operations for the **ReportCategory** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ReportCategories
    * const reportCategories = await prisma.reportCategory.findMany()
    * ```
    */
  get reportCategory(): Prisma.ReportCategoryDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.report`: Exposes CRUD operations for the **Report** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Reports
    * const reports = await prisma.report.findMany()
    * ```
    */
  get report(): Prisma.ReportDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.file`: Exposes CRUD operations for the **File** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Files
    * const files = await prisma.file.findMany()
    * ```
    */
  get file(): Prisma.FileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.note`: Exposes CRUD operations for the **Note** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notes
    * const notes = await prisma.note.findMany()
    * ```
    */
  get note(): Prisma.NoteDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.stage`: Exposes CRUD operations for the **Stage** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Stages
    * const stages = await prisma.stage.findMany()
    * ```
    */
  get stage(): Prisma.StageDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.stageType`: Exposes CRUD operations for the **StageType** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more StageTypes
    * const stageTypes = await prisma.stageType.findMany()
    * ```
    */
  get stageType(): Prisma.StageTypeDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.organization`: Exposes CRUD operations for the **Organization** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Organizations
    * const organizations = await prisma.organization.findMany()
    * ```
    */
  get organization(): Prisma.OrganizationDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.role`: Exposes CRUD operations for the **Role** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Roles
    * const roles = await prisma.role.findMany()
    * ```
    */
  get role(): Prisma.RoleDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.department`: Exposes CRUD operations for the **Department** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Departments
    * const departments = await prisma.department.findMany()
    * ```
    */
  get department(): Prisma.DepartmentDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.permission`: Exposes CRUD operations for the **Permission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Permissions
    * const permissions = await prisma.permission.findMany()
    * ```
    */
  get permission(): Prisma.PermissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.departmentPermission`: Exposes CRUD operations for the **DepartmentPermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more DepartmentPermissions
    * const departmentPermissions = await prisma.departmentPermission.findMany()
    * ```
    */
  get departmentPermission(): Prisma.DepartmentPermissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.userPermission`: Exposes CRUD operations for the **UserPermission** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserPermissions
    * const userPermissions = await prisma.userPermission.findMany()
    * ```
    */
  get userPermission(): Prisma.UserPermissionDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.profile`: Exposes CRUD operations for the **Profile** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Profiles
    * const profiles = await prisma.profile.findMany()
    * ```
    */
  get profile(): Prisma.ProfileDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.14.0
   * Query Engine version: 717184b7b35ea05dfa71a3236b7af656013e1e49
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    ReportCategory: 'ReportCategory',
    Report: 'Report',
    File: 'File',
    Note: 'Note',
    Stage: 'Stage',
    StageType: 'StageType',
    User: 'User',
    Organization: 'Organization',
    Role: 'Role',
    Department: 'Department',
    Permission: 'Permission',
    DepartmentPermission: 'DepartmentPermission',
    UserPermission: 'UserPermission',
    Profile: 'Profile',
    Session: 'Session'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "reportCategory" | "report" | "file" | "note" | "stage" | "stageType" | "user" | "organization" | "role" | "department" | "permission" | "departmentPermission" | "userPermission" | "profile" | "session"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      ReportCategory: {
        payload: Prisma.$ReportCategoryPayload<ExtArgs>
        fields: Prisma.ReportCategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportCategoryFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportCategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportCategoryFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportCategoryPayload>
          }
          findFirst: {
            args: Prisma.ReportCategoryFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportCategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportCategoryFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportCategoryPayload>
          }
          findMany: {
            args: Prisma.ReportCategoryFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportCategoryPayload>[]
          }
          create: {
            args: Prisma.ReportCategoryCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportCategoryPayload>
          }
          createMany: {
            args: Prisma.ReportCategoryCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReportCategoryCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportCategoryPayload>[]
          }
          delete: {
            args: Prisma.ReportCategoryDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportCategoryPayload>
          }
          update: {
            args: Prisma.ReportCategoryUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportCategoryPayload>
          }
          deleteMany: {
            args: Prisma.ReportCategoryDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReportCategoryUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReportCategoryUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportCategoryPayload>[]
          }
          upsert: {
            args: Prisma.ReportCategoryUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportCategoryPayload>
          }
          aggregate: {
            args: Prisma.ReportCategoryAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReportCategory>
          }
          groupBy: {
            args: Prisma.ReportCategoryGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportCategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReportCategoryCountArgs<ExtArgs>
            result: $Utils.Optional<ReportCategoryCountAggregateOutputType> | number
          }
        }
      }
      Report: {
        payload: Prisma.$ReportPayload<ExtArgs>
        fields: Prisma.ReportFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ReportFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ReportFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          findFirst: {
            args: Prisma.ReportFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ReportFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          findMany: {
            args: Prisma.ReportFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>[]
          }
          create: {
            args: Prisma.ReportCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          createMany: {
            args: Prisma.ReportCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ReportCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>[]
          }
          delete: {
            args: Prisma.ReportDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          update: {
            args: Prisma.ReportUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          deleteMany: {
            args: Prisma.ReportDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ReportUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ReportUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>[]
          }
          upsert: {
            args: Prisma.ReportUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ReportPayload>
          }
          aggregate: {
            args: Prisma.ReportAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateReport>
          }
          groupBy: {
            args: Prisma.ReportGroupByArgs<ExtArgs>
            result: $Utils.Optional<ReportGroupByOutputType>[]
          }
          count: {
            args: Prisma.ReportCountArgs<ExtArgs>
            result: $Utils.Optional<ReportCountAggregateOutputType> | number
          }
        }
      }
      File: {
        payload: Prisma.$FilePayload<ExtArgs>
        fields: Prisma.FileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          findFirst: {
            args: Prisma.FileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          findMany: {
            args: Prisma.FileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          create: {
            args: Prisma.FileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          createMany: {
            args: Prisma.FileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.FileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          delete: {
            args: Prisma.FileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          update: {
            args: Prisma.FileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          deleteMany: {
            args: Prisma.FileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.FileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.FileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>[]
          }
          upsert: {
            args: Prisma.FileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$FilePayload>
          }
          aggregate: {
            args: Prisma.FileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateFile>
          }
          groupBy: {
            args: Prisma.FileGroupByArgs<ExtArgs>
            result: $Utils.Optional<FileGroupByOutputType>[]
          }
          count: {
            args: Prisma.FileCountArgs<ExtArgs>
            result: $Utils.Optional<FileCountAggregateOutputType> | number
          }
        }
      }
      Note: {
        payload: Prisma.$NotePayload<ExtArgs>
        fields: Prisma.NoteFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NoteFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NoteFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          findFirst: {
            args: Prisma.NoteFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NoteFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          findMany: {
            args: Prisma.NoteFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>[]
          }
          create: {
            args: Prisma.NoteCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          createMany: {
            args: Prisma.NoteCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.NoteCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>[]
          }
          delete: {
            args: Prisma.NoteDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          update: {
            args: Prisma.NoteUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          deleteMany: {
            args: Prisma.NoteDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.NoteUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.NoteUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>[]
          }
          upsert: {
            args: Prisma.NoteUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$NotePayload>
          }
          aggregate: {
            args: Prisma.NoteAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateNote>
          }
          groupBy: {
            args: Prisma.NoteGroupByArgs<ExtArgs>
            result: $Utils.Optional<NoteGroupByOutputType>[]
          }
          count: {
            args: Prisma.NoteCountArgs<ExtArgs>
            result: $Utils.Optional<NoteCountAggregateOutputType> | number
          }
        }
      }
      Stage: {
        payload: Prisma.$StagePayload<ExtArgs>
        fields: Prisma.StageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StageFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StageFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload>
          }
          findFirst: {
            args: Prisma.StageFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StageFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload>
          }
          findMany: {
            args: Prisma.StageFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload>[]
          }
          create: {
            args: Prisma.StageCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload>
          }
          createMany: {
            args: Prisma.StageCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StageCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload>[]
          }
          delete: {
            args: Prisma.StageDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload>
          }
          update: {
            args: Prisma.StageUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload>
          }
          deleteMany: {
            args: Prisma.StageDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StageUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StageUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload>[]
          }
          upsert: {
            args: Prisma.StageUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StagePayload>
          }
          aggregate: {
            args: Prisma.StageAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStage>
          }
          groupBy: {
            args: Prisma.StageGroupByArgs<ExtArgs>
            result: $Utils.Optional<StageGroupByOutputType>[]
          }
          count: {
            args: Prisma.StageCountArgs<ExtArgs>
            result: $Utils.Optional<StageCountAggregateOutputType> | number
          }
        }
      }
      StageType: {
        payload: Prisma.$StageTypePayload<ExtArgs>
        fields: Prisma.StageTypeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.StageTypeFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StageTypePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.StageTypeFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StageTypePayload>
          }
          findFirst: {
            args: Prisma.StageTypeFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StageTypePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.StageTypeFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StageTypePayload>
          }
          findMany: {
            args: Prisma.StageTypeFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StageTypePayload>[]
          }
          create: {
            args: Prisma.StageTypeCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StageTypePayload>
          }
          createMany: {
            args: Prisma.StageTypeCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.StageTypeCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StageTypePayload>[]
          }
          delete: {
            args: Prisma.StageTypeDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StageTypePayload>
          }
          update: {
            args: Prisma.StageTypeUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StageTypePayload>
          }
          deleteMany: {
            args: Prisma.StageTypeDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.StageTypeUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.StageTypeUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StageTypePayload>[]
          }
          upsert: {
            args: Prisma.StageTypeUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$StageTypePayload>
          }
          aggregate: {
            args: Prisma.StageTypeAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateStageType>
          }
          groupBy: {
            args: Prisma.StageTypeGroupByArgs<ExtArgs>
            result: $Utils.Optional<StageTypeGroupByOutputType>[]
          }
          count: {
            args: Prisma.StageTypeCountArgs<ExtArgs>
            result: $Utils.Optional<StageTypeCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Organization: {
        payload: Prisma.$OrganizationPayload<ExtArgs>
        fields: Prisma.OrganizationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OrganizationFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OrganizationFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          findFirst: {
            args: Prisma.OrganizationFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OrganizationFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          findMany: {
            args: Prisma.OrganizationFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          create: {
            args: Prisma.OrganizationCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          createMany: {
            args: Prisma.OrganizationCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.OrganizationCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          delete: {
            args: Prisma.OrganizationDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          update: {
            args: Prisma.OrganizationUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          deleteMany: {
            args: Prisma.OrganizationDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OrganizationUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.OrganizationUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>[]
          }
          upsert: {
            args: Prisma.OrganizationUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OrganizationPayload>
          }
          aggregate: {
            args: Prisma.OrganizationAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOrganization>
          }
          groupBy: {
            args: Prisma.OrganizationGroupByArgs<ExtArgs>
            result: $Utils.Optional<OrganizationGroupByOutputType>[]
          }
          count: {
            args: Prisma.OrganizationCountArgs<ExtArgs>
            result: $Utils.Optional<OrganizationCountAggregateOutputType> | number
          }
        }
      }
      Role: {
        payload: Prisma.$RolePayload<ExtArgs>
        fields: Prisma.RoleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.RoleFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.RoleFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findFirst: {
            args: Prisma.RoleFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.RoleFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          findMany: {
            args: Prisma.RoleFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          create: {
            args: Prisma.RoleCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          createMany: {
            args: Prisma.RoleCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.RoleCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          delete: {
            args: Prisma.RoleDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          update: {
            args: Prisma.RoleUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          deleteMany: {
            args: Prisma.RoleDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.RoleUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.RoleUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>[]
          }
          upsert: {
            args: Prisma.RoleUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$RolePayload>
          }
          aggregate: {
            args: Prisma.RoleAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateRole>
          }
          groupBy: {
            args: Prisma.RoleGroupByArgs<ExtArgs>
            result: $Utils.Optional<RoleGroupByOutputType>[]
          }
          count: {
            args: Prisma.RoleCountArgs<ExtArgs>
            result: $Utils.Optional<RoleCountAggregateOutputType> | number
          }
        }
      }
      Department: {
        payload: Prisma.$DepartmentPayload<ExtArgs>
        fields: Prisma.DepartmentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartmentFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartmentFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findFirst: {
            args: Prisma.DepartmentFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartmentFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          findMany: {
            args: Prisma.DepartmentFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          create: {
            args: Prisma.DepartmentCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          createMany: {
            args: Prisma.DepartmentCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DepartmentCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          delete: {
            args: Prisma.DepartmentDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          update: {
            args: Prisma.DepartmentUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          deleteMany: {
            args: Prisma.DepartmentDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepartmentUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DepartmentUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>[]
          }
          upsert: {
            args: Prisma.DepartmentUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPayload>
          }
          aggregate: {
            args: Prisma.DepartmentAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepartment>
          }
          groupBy: {
            args: Prisma.DepartmentGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepartmentGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartmentCountArgs<ExtArgs>
            result: $Utils.Optional<DepartmentCountAggregateOutputType> | number
          }
        }
      }
      Permission: {
        payload: Prisma.$PermissionPayload<ExtArgs>
        fields: Prisma.PermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          findFirst: {
            args: Prisma.PermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          findMany: {
            args: Prisma.PermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>[]
          }
          create: {
            args: Prisma.PermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          createMany: {
            args: Prisma.PermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.PermissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>[]
          }
          delete: {
            args: Prisma.PermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          update: {
            args: Prisma.PermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          deleteMany: {
            args: Prisma.PermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.PermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.PermissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>[]
          }
          upsert: {
            args: Prisma.PermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$PermissionPayload>
          }
          aggregate: {
            args: Prisma.PermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregatePermission>
          }
          groupBy: {
            args: Prisma.PermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<PermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.PermissionCountArgs<ExtArgs>
            result: $Utils.Optional<PermissionCountAggregateOutputType> | number
          }
        }
      }
      DepartmentPermission: {
        payload: Prisma.$DepartmentPermissionPayload<ExtArgs>
        fields: Prisma.DepartmentPermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.DepartmentPermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.DepartmentPermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPermissionPayload>
          }
          findFirst: {
            args: Prisma.DepartmentPermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.DepartmentPermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPermissionPayload>
          }
          findMany: {
            args: Prisma.DepartmentPermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPermissionPayload>[]
          }
          create: {
            args: Prisma.DepartmentPermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPermissionPayload>
          }
          createMany: {
            args: Prisma.DepartmentPermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.DepartmentPermissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPermissionPayload>[]
          }
          delete: {
            args: Prisma.DepartmentPermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPermissionPayload>
          }
          update: {
            args: Prisma.DepartmentPermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPermissionPayload>
          }
          deleteMany: {
            args: Prisma.DepartmentPermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.DepartmentPermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.DepartmentPermissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPermissionPayload>[]
          }
          upsert: {
            args: Prisma.DepartmentPermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$DepartmentPermissionPayload>
          }
          aggregate: {
            args: Prisma.DepartmentPermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateDepartmentPermission>
          }
          groupBy: {
            args: Prisma.DepartmentPermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<DepartmentPermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.DepartmentPermissionCountArgs<ExtArgs>
            result: $Utils.Optional<DepartmentPermissionCountAggregateOutputType> | number
          }
        }
      }
      UserPermission: {
        payload: Prisma.$UserPermissionPayload<ExtArgs>
        fields: Prisma.UserPermissionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserPermissionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserPermissionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          findFirst: {
            args: Prisma.UserPermissionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserPermissionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          findMany: {
            args: Prisma.UserPermissionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>[]
          }
          create: {
            args: Prisma.UserPermissionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          createMany: {
            args: Prisma.UserPermissionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.UserPermissionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>[]
          }
          delete: {
            args: Prisma.UserPermissionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          update: {
            args: Prisma.UserPermissionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          deleteMany: {
            args: Prisma.UserPermissionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserPermissionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.UserPermissionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>[]
          }
          upsert: {
            args: Prisma.UserPermissionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPermissionPayload>
          }
          aggregate: {
            args: Prisma.UserPermissionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUserPermission>
          }
          groupBy: {
            args: Prisma.UserPermissionGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserPermissionGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserPermissionCountArgs<ExtArgs>
            result: $Utils.Optional<UserPermissionCountAggregateOutputType> | number
          }
        }
      }
      Profile: {
        payload: Prisma.$ProfilePayload<ExtArgs>
        fields: Prisma.ProfileFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProfileFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProfileFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findFirst: {
            args: Prisma.ProfileFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProfileFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          findMany: {
            args: Prisma.ProfileFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          create: {
            args: Prisma.ProfileCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          createMany: {
            args: Prisma.ProfileCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.ProfileCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          delete: {
            args: Prisma.ProfileDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          update: {
            args: Prisma.ProfileUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          deleteMany: {
            args: Prisma.ProfileDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProfileUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.ProfileUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>[]
          }
          upsert: {
            args: Prisma.ProfileUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProfilePayload>
          }
          aggregate: {
            args: Prisma.ProfileAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProfile>
          }
          groupBy: {
            args: Prisma.ProfileGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProfileGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProfileCountArgs<ExtArgs>
            result: $Utils.Optional<ProfileCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.SessionCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.SessionUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Shorthand for `emit: 'stdout'`
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events only
     * log: [
     *   { emit: 'event', level: 'query' },
     *   { emit: 'event', level: 'info' },
     *   { emit: 'event', level: 'warn' }
     *   { emit: 'event', level: 'error' }
     * ]
     * 
     * / Emit as events and log to stdout
     * og: [
     *  { emit: 'stdout', level: 'query' },
     *  { emit: 'stdout', level: 'info' },
     *  { emit: 'stdout', level: 'warn' }
     *  { emit: 'stdout', level: 'error' }
     * 
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    reportCategory?: ReportCategoryOmit
    report?: ReportOmit
    file?: FileOmit
    note?: NoteOmit
    stage?: StageOmit
    stageType?: StageTypeOmit
    user?: UserOmit
    organization?: OrganizationOmit
    role?: RoleOmit
    department?: DepartmentOmit
    permission?: PermissionOmit
    departmentPermission?: DepartmentPermissionOmit
    userPermission?: UserPermissionOmit
    profile?: ProfileOmit
    session?: SessionOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type CheckIsLogLevel<T> = T extends LogLevel ? T : never;

  export type GetLogType<T> = CheckIsLogLevel<
    T extends LogDefinition ? T['level'] : T
  >;

  export type GetEvents<T extends any[]> = T extends Array<LogLevel | LogDefinition>
    ? GetLogType<T[number]>
    : never;

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type ReportCategoryCountOutputType
   */

  export type ReportCategoryCountOutputType = {
    children: number
    reports: number
  }

  export type ReportCategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    children?: boolean | ReportCategoryCountOutputTypeCountChildrenArgs
    reports?: boolean | ReportCategoryCountOutputTypeCountReportsArgs
  }

  // Custom InputTypes
  /**
   * ReportCategoryCountOutputType without action
   */
  export type ReportCategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCategoryCountOutputType
     */
    select?: ReportCategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReportCategoryCountOutputType without action
   */
  export type ReportCategoryCountOutputTypeCountChildrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportCategoryWhereInput
  }

  /**
   * ReportCategoryCountOutputType without action
   */
  export type ReportCategoryCountOutputTypeCountReportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
  }


  /**
   * Count Type ReportCountOutputType
   */

  export type ReportCountOutputType = {
    notes: number
    stages: number
    files: number
  }

  export type ReportCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notes?: boolean | ReportCountOutputTypeCountNotesArgs
    stages?: boolean | ReportCountOutputTypeCountStagesArgs
    files?: boolean | ReportCountOutputTypeCountFilesArgs
  }

  // Custom InputTypes
  /**
   * ReportCountOutputType without action
   */
  export type ReportCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCountOutputType
     */
    select?: ReportCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * ReportCountOutputType without action
   */
  export type ReportCountOutputTypeCountNotesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoteWhereInput
  }

  /**
   * ReportCountOutputType without action
   */
  export type ReportCountOutputTypeCountStagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StageWhereInput
  }

  /**
   * ReportCountOutputType without action
   */
  export type ReportCountOutputTypeCountFilesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
  }


  /**
   * Count Type StageTypeCountOutputType
   */

  export type StageTypeCountOutputType = {
    stages: number
  }

  export type StageTypeCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stages?: boolean | StageTypeCountOutputTypeCountStagesArgs
  }

  // Custom InputTypes
  /**
   * StageTypeCountOutputType without action
   */
  export type StageTypeCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StageTypeCountOutputType
     */
    select?: StageTypeCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * StageTypeCountOutputType without action
   */
  export type StageTypeCountOutputTypeCountStagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StageWhereInput
  }


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    permissions: number
    CreatorNote: number
    UpdaterNote: number
    CreatorStage: number
    UpdaterStage: number
    CreatorReport: number
    UpdaterReport: number
    CreatorReportCategory: number
    UpdaterReportCategory: number
    CreatorDepartment: number
    UpdaterDepartment: number
    CreatorPermission: number
    UpdaterPermission: number
    CreatorDepartmentPermission: number
    UpdaterDepartmentPermission: number
    CreatorUserPermission: number
    UpdaterUserPermission: number
    CreatorProfile: number
    UpdaterProfile: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    permissions?: boolean | UserCountOutputTypeCountPermissionsArgs
    CreatorNote?: boolean | UserCountOutputTypeCountCreatorNoteArgs
    UpdaterNote?: boolean | UserCountOutputTypeCountUpdaterNoteArgs
    CreatorStage?: boolean | UserCountOutputTypeCountCreatorStageArgs
    UpdaterStage?: boolean | UserCountOutputTypeCountUpdaterStageArgs
    CreatorReport?: boolean | UserCountOutputTypeCountCreatorReportArgs
    UpdaterReport?: boolean | UserCountOutputTypeCountUpdaterReportArgs
    CreatorReportCategory?: boolean | UserCountOutputTypeCountCreatorReportCategoryArgs
    UpdaterReportCategory?: boolean | UserCountOutputTypeCountUpdaterReportCategoryArgs
    CreatorDepartment?: boolean | UserCountOutputTypeCountCreatorDepartmentArgs
    UpdaterDepartment?: boolean | UserCountOutputTypeCountUpdaterDepartmentArgs
    CreatorPermission?: boolean | UserCountOutputTypeCountCreatorPermissionArgs
    UpdaterPermission?: boolean | UserCountOutputTypeCountUpdaterPermissionArgs
    CreatorDepartmentPermission?: boolean | UserCountOutputTypeCountCreatorDepartmentPermissionArgs
    UpdaterDepartmentPermission?: boolean | UserCountOutputTypeCountUpdaterDepartmentPermissionArgs
    CreatorUserPermission?: boolean | UserCountOutputTypeCountCreatorUserPermissionArgs
    UpdaterUserPermission?: boolean | UserCountOutputTypeCountUpdaterUserPermissionArgs
    CreatorProfile?: boolean | UserCountOutputTypeCountCreatorProfileArgs
    UpdaterProfile?: boolean | UserCountOutputTypeCountUpdaterProfileArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPermissionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatorNoteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoteWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdaterNoteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoteWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatorStageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdaterStageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StageWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatorReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdaterReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatorReportCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportCategoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdaterReportCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportCategoryWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatorDepartmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdaterDepartmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatorPermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PermissionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdaterPermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PermissionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatorDepartmentPermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentPermissionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdaterDepartmentPermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentPermissionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatorUserPermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPermissionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdaterUserPermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPermissionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCreatorProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountUpdaterProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
  }


  /**
   * Count Type OrganizationCountOutputType
   */

  export type OrganizationCountOutputType = {
    users: number
    Report: number
  }

  export type OrganizationCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | OrganizationCountOutputTypeCountUsersArgs
    Report?: boolean | OrganizationCountOutputTypeCountReportArgs
  }

  // Custom InputTypes
  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OrganizationCountOutputType
     */
    select?: OrganizationCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * OrganizationCountOutputType without action
   */
  export type OrganizationCountOutputTypeCountReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
  }


  /**
   * Count Type RoleCountOutputType
   */

  export type RoleCountOutputType = {
    users: number
  }

  export type RoleCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | RoleCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the RoleCountOutputType
     */
    select?: RoleCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * RoleCountOutputType without action
   */
  export type RoleCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }


  /**
   * Count Type DepartmentCountOutputType
   */

  export type DepartmentCountOutputType = {
    users: number
    permissions: number
  }

  export type DepartmentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | DepartmentCountOutputTypeCountUsersArgs
    permissions?: boolean | DepartmentCountOutputTypeCountPermissionsArgs
  }

  // Custom InputTypes
  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentCountOutputType
     */
    select?: DepartmentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * DepartmentCountOutputType without action
   */
  export type DepartmentCountOutputTypeCountPermissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentPermissionWhereInput
  }


  /**
   * Count Type PermissionCountOutputType
   */

  export type PermissionCountOutputType = {
    dept: number
    users: number
  }

  export type PermissionCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    dept?: boolean | PermissionCountOutputTypeCountDeptArgs
    users?: boolean | PermissionCountOutputTypeCountUsersArgs
  }

  // Custom InputTypes
  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PermissionCountOutputType
     */
    select?: PermissionCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeCountDeptArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentPermissionWhereInput
  }

  /**
   * PermissionCountOutputType without action
   */
  export type PermissionCountOutputTypeCountUsersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPermissionWhereInput
  }


  /**
   * Models
   */

  /**
   * Model ReportCategory
   */

  export type AggregateReportCategory = {
    _count: ReportCategoryCountAggregateOutputType | null
    _min: ReportCategoryMinAggregateOutputType | null
    _max: ReportCategoryMaxAggregateOutputType | null
  }

  export type ReportCategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    parentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
  }

  export type ReportCategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    parentId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
  }

  export type ReportCategoryCountAggregateOutputType = {
    id: number
    name: number
    code: number
    parentId: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type ReportCategoryMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    parentId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type ReportCategoryMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    parentId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type ReportCategoryCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    parentId?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type ReportCategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportCategory to aggregate.
     */
    where?: ReportCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportCategories to fetch.
     */
    orderBy?: ReportCategoryOrderByWithRelationInput | ReportCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ReportCategories
    **/
    _count?: true | ReportCategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportCategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportCategoryMaxAggregateInputType
  }

  export type GetReportCategoryAggregateType<T extends ReportCategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateReportCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReportCategory[P]>
      : GetScalarType<T[P], AggregateReportCategory[P]>
  }




  export type ReportCategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportCategoryWhereInput
    orderBy?: ReportCategoryOrderByWithAggregationInput | ReportCategoryOrderByWithAggregationInput[]
    by: ReportCategoryScalarFieldEnum[] | ReportCategoryScalarFieldEnum
    having?: ReportCategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportCategoryCountAggregateInputType | true
    _min?: ReportCategoryMinAggregateInputType
    _max?: ReportCategoryMaxAggregateInputType
  }

  export type ReportCategoryGroupByOutputType = {
    id: string
    name: string
    code: string
    parentId: string | null
    createdAt: Date
    updatedAt: Date
    createdById: string | null
    updatedById: string | null
    _count: ReportCategoryCountAggregateOutputType | null
    _min: ReportCategoryMinAggregateOutputType | null
    _max: ReportCategoryMaxAggregateOutputType | null
  }

  type GetReportCategoryGroupByPayload<T extends ReportCategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportCategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportCategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportCategoryGroupByOutputType[P]>
            : GetScalarType<T[P], ReportCategoryGroupByOutputType[P]>
        }
      >
    >


  export type ReportCategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    parent?: boolean | ReportCategory$parentArgs<ExtArgs>
    children?: boolean | ReportCategory$childrenArgs<ExtArgs>
    createdBy?: boolean | ReportCategory$createdByArgs<ExtArgs>
    updatedBy?: boolean | ReportCategory$updatedByArgs<ExtArgs>
    reports?: boolean | ReportCategory$reportsArgs<ExtArgs>
    _count?: boolean | ReportCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["reportCategory"]>

  export type ReportCategorySelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    parent?: boolean | ReportCategory$parentArgs<ExtArgs>
    createdBy?: boolean | ReportCategory$createdByArgs<ExtArgs>
    updatedBy?: boolean | ReportCategory$updatedByArgs<ExtArgs>
  }, ExtArgs["result"]["reportCategory"]>

  export type ReportCategorySelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    parent?: boolean | ReportCategory$parentArgs<ExtArgs>
    createdBy?: boolean | ReportCategory$createdByArgs<ExtArgs>
    updatedBy?: boolean | ReportCategory$updatedByArgs<ExtArgs>
  }, ExtArgs["result"]["reportCategory"]>

  export type ReportCategorySelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    parentId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }

  export type ReportCategoryOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "code" | "parentId" | "createdAt" | "updatedAt" | "createdById" | "updatedById", ExtArgs["result"]["reportCategory"]>
  export type ReportCategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | ReportCategory$parentArgs<ExtArgs>
    children?: boolean | ReportCategory$childrenArgs<ExtArgs>
    createdBy?: boolean | ReportCategory$createdByArgs<ExtArgs>
    updatedBy?: boolean | ReportCategory$updatedByArgs<ExtArgs>
    reports?: boolean | ReportCategory$reportsArgs<ExtArgs>
    _count?: boolean | ReportCategoryCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ReportCategoryIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | ReportCategory$parentArgs<ExtArgs>
    createdBy?: boolean | ReportCategory$createdByArgs<ExtArgs>
    updatedBy?: boolean | ReportCategory$updatedByArgs<ExtArgs>
  }
  export type ReportCategoryIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    parent?: boolean | ReportCategory$parentArgs<ExtArgs>
    createdBy?: boolean | ReportCategory$createdByArgs<ExtArgs>
    updatedBy?: boolean | ReportCategory$updatedByArgs<ExtArgs>
  }

  export type $ReportCategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ReportCategory"
    objects: {
      parent: Prisma.$ReportCategoryPayload<ExtArgs> | null
      children: Prisma.$ReportCategoryPayload<ExtArgs>[]
      createdBy: Prisma.$UserPayload<ExtArgs> | null
      updatedBy: Prisma.$UserPayload<ExtArgs> | null
      reports: Prisma.$ReportPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      code: string
      parentId: string | null
      createdAt: Date
      updatedAt: Date
      createdById: string | null
      updatedById: string | null
    }, ExtArgs["result"]["reportCategory"]>
    composites: {}
  }

  type ReportCategoryGetPayload<S extends boolean | null | undefined | ReportCategoryDefaultArgs> = $Result.GetResult<Prisma.$ReportCategoryPayload, S>

  type ReportCategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReportCategoryFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReportCategoryCountAggregateInputType | true
    }

  export interface ReportCategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ReportCategory'], meta: { name: 'ReportCategory' } }
    /**
     * Find zero or one ReportCategory that matches the filter.
     * @param {ReportCategoryFindUniqueArgs} args - Arguments to find a ReportCategory
     * @example
     * // Get one ReportCategory
     * const reportCategory = await prisma.reportCategory.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReportCategoryFindUniqueArgs>(args: SelectSubset<T, ReportCategoryFindUniqueArgs<ExtArgs>>): Prisma__ReportCategoryClient<$Result.GetResult<Prisma.$ReportCategoryPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one ReportCategory that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReportCategoryFindUniqueOrThrowArgs} args - Arguments to find a ReportCategory
     * @example
     * // Get one ReportCategory
     * const reportCategory = await prisma.reportCategory.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReportCategoryFindUniqueOrThrowArgs>(args: SelectSubset<T, ReportCategoryFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReportCategoryClient<$Result.GetResult<Prisma.$ReportCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReportCategory that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCategoryFindFirstArgs} args - Arguments to find a ReportCategory
     * @example
     * // Get one ReportCategory
     * const reportCategory = await prisma.reportCategory.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReportCategoryFindFirstArgs>(args?: SelectSubset<T, ReportCategoryFindFirstArgs<ExtArgs>>): Prisma__ReportCategoryClient<$Result.GetResult<Prisma.$ReportCategoryPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first ReportCategory that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCategoryFindFirstOrThrowArgs} args - Arguments to find a ReportCategory
     * @example
     * // Get one ReportCategory
     * const reportCategory = await prisma.reportCategory.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReportCategoryFindFirstOrThrowArgs>(args?: SelectSubset<T, ReportCategoryFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReportCategoryClient<$Result.GetResult<Prisma.$ReportCategoryPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more ReportCategories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCategoryFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ReportCategories
     * const reportCategories = await prisma.reportCategory.findMany()
     * 
     * // Get first 10 ReportCategories
     * const reportCategories = await prisma.reportCategory.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportCategoryWithIdOnly = await prisma.reportCategory.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReportCategoryFindManyArgs>(args?: SelectSubset<T, ReportCategoryFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a ReportCategory.
     * @param {ReportCategoryCreateArgs} args - Arguments to create a ReportCategory.
     * @example
     * // Create one ReportCategory
     * const ReportCategory = await prisma.reportCategory.create({
     *   data: {
     *     // ... data to create a ReportCategory
     *   }
     * })
     * 
     */
    create<T extends ReportCategoryCreateArgs>(args: SelectSubset<T, ReportCategoryCreateArgs<ExtArgs>>): Prisma__ReportCategoryClient<$Result.GetResult<Prisma.$ReportCategoryPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many ReportCategories.
     * @param {ReportCategoryCreateManyArgs} args - Arguments to create many ReportCategories.
     * @example
     * // Create many ReportCategories
     * const reportCategory = await prisma.reportCategory.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReportCategoryCreateManyArgs>(args?: SelectSubset<T, ReportCategoryCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many ReportCategories and returns the data saved in the database.
     * @param {ReportCategoryCreateManyAndReturnArgs} args - Arguments to create many ReportCategories.
     * @example
     * // Create many ReportCategories
     * const reportCategory = await prisma.reportCategory.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many ReportCategories and only return the `id`
     * const reportCategoryWithIdOnly = await prisma.reportCategory.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReportCategoryCreateManyAndReturnArgs>(args?: SelectSubset<T, ReportCategoryCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportCategoryPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a ReportCategory.
     * @param {ReportCategoryDeleteArgs} args - Arguments to delete one ReportCategory.
     * @example
     * // Delete one ReportCategory
     * const ReportCategory = await prisma.reportCategory.delete({
     *   where: {
     *     // ... filter to delete one ReportCategory
     *   }
     * })
     * 
     */
    delete<T extends ReportCategoryDeleteArgs>(args: SelectSubset<T, ReportCategoryDeleteArgs<ExtArgs>>): Prisma__ReportCategoryClient<$Result.GetResult<Prisma.$ReportCategoryPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one ReportCategory.
     * @param {ReportCategoryUpdateArgs} args - Arguments to update one ReportCategory.
     * @example
     * // Update one ReportCategory
     * const reportCategory = await prisma.reportCategory.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReportCategoryUpdateArgs>(args: SelectSubset<T, ReportCategoryUpdateArgs<ExtArgs>>): Prisma__ReportCategoryClient<$Result.GetResult<Prisma.$ReportCategoryPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more ReportCategories.
     * @param {ReportCategoryDeleteManyArgs} args - Arguments to filter ReportCategories to delete.
     * @example
     * // Delete a few ReportCategories
     * const { count } = await prisma.reportCategory.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReportCategoryDeleteManyArgs>(args?: SelectSubset<T, ReportCategoryDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReportCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ReportCategories
     * const reportCategory = await prisma.reportCategory.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReportCategoryUpdateManyArgs>(args: SelectSubset<T, ReportCategoryUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ReportCategories and returns the data updated in the database.
     * @param {ReportCategoryUpdateManyAndReturnArgs} args - Arguments to update many ReportCategories.
     * @example
     * // Update many ReportCategories
     * const reportCategory = await prisma.reportCategory.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more ReportCategories and only return the `id`
     * const reportCategoryWithIdOnly = await prisma.reportCategory.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReportCategoryUpdateManyAndReturnArgs>(args: SelectSubset<T, ReportCategoryUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportCategoryPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one ReportCategory.
     * @param {ReportCategoryUpsertArgs} args - Arguments to update or create a ReportCategory.
     * @example
     * // Update or create a ReportCategory
     * const reportCategory = await prisma.reportCategory.upsert({
     *   create: {
     *     // ... data to create a ReportCategory
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ReportCategory we want to update
     *   }
     * })
     */
    upsert<T extends ReportCategoryUpsertArgs>(args: SelectSubset<T, ReportCategoryUpsertArgs<ExtArgs>>): Prisma__ReportCategoryClient<$Result.GetResult<Prisma.$ReportCategoryPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of ReportCategories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCategoryCountArgs} args - Arguments to filter ReportCategories to count.
     * @example
     * // Count the number of ReportCategories
     * const count = await prisma.reportCategory.count({
     *   where: {
     *     // ... the filter for the ReportCategories we want to count
     *   }
     * })
    **/
    count<T extends ReportCategoryCountArgs>(
      args?: Subset<T, ReportCategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportCategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ReportCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportCategoryAggregateArgs>(args: Subset<T, ReportCategoryAggregateArgs>): Prisma.PrismaPromise<GetReportCategoryAggregateType<T>>

    /**
     * Group by ReportCategory.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportCategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportCategoryGroupByArgs['orderBy'] }
        : { orderBy?: ReportCategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportCategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ReportCategory model
   */
  readonly fields: ReportCategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ReportCategory.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportCategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    parent<T extends ReportCategory$parentArgs<ExtArgs> = {}>(args?: Subset<T, ReportCategory$parentArgs<ExtArgs>>): Prisma__ReportCategoryClient<$Result.GetResult<Prisma.$ReportCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    children<T extends ReportCategory$childrenArgs<ExtArgs> = {}>(args?: Subset<T, ReportCategory$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    createdBy<T extends ReportCategory$createdByArgs<ExtArgs> = {}>(args?: Subset<T, ReportCategory$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    updatedBy<T extends ReportCategory$updatedByArgs<ExtArgs> = {}>(args?: Subset<T, ReportCategory$updatedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    reports<T extends ReportCategory$reportsArgs<ExtArgs> = {}>(args?: Subset<T, ReportCategory$reportsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ReportCategory model
   */
  interface ReportCategoryFieldRefs {
    readonly id: FieldRef<"ReportCategory", 'String'>
    readonly name: FieldRef<"ReportCategory", 'String'>
    readonly code: FieldRef<"ReportCategory", 'String'>
    readonly parentId: FieldRef<"ReportCategory", 'String'>
    readonly createdAt: FieldRef<"ReportCategory", 'DateTime'>
    readonly updatedAt: FieldRef<"ReportCategory", 'DateTime'>
    readonly createdById: FieldRef<"ReportCategory", 'String'>
    readonly updatedById: FieldRef<"ReportCategory", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ReportCategory findUnique
   */
  export type ReportCategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCategory
     */
    select?: ReportCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportCategory
     */
    omit?: ReportCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ReportCategory to fetch.
     */
    where: ReportCategoryWhereUniqueInput
  }

  /**
   * ReportCategory findUniqueOrThrow
   */
  export type ReportCategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCategory
     */
    select?: ReportCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportCategory
     */
    omit?: ReportCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ReportCategory to fetch.
     */
    where: ReportCategoryWhereUniqueInput
  }

  /**
   * ReportCategory findFirst
   */
  export type ReportCategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCategory
     */
    select?: ReportCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportCategory
     */
    omit?: ReportCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ReportCategory to fetch.
     */
    where?: ReportCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportCategories to fetch.
     */
    orderBy?: ReportCategoryOrderByWithRelationInput | ReportCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportCategories.
     */
    cursor?: ReportCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportCategories.
     */
    distinct?: ReportCategoryScalarFieldEnum | ReportCategoryScalarFieldEnum[]
  }

  /**
   * ReportCategory findFirstOrThrow
   */
  export type ReportCategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCategory
     */
    select?: ReportCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportCategory
     */
    omit?: ReportCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ReportCategory to fetch.
     */
    where?: ReportCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportCategories to fetch.
     */
    orderBy?: ReportCategoryOrderByWithRelationInput | ReportCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ReportCategories.
     */
    cursor?: ReportCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportCategories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ReportCategories.
     */
    distinct?: ReportCategoryScalarFieldEnum | ReportCategoryScalarFieldEnum[]
  }

  /**
   * ReportCategory findMany
   */
  export type ReportCategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCategory
     */
    select?: ReportCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportCategory
     */
    omit?: ReportCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportCategoryInclude<ExtArgs> | null
    /**
     * Filter, which ReportCategories to fetch.
     */
    where?: ReportCategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ReportCategories to fetch.
     */
    orderBy?: ReportCategoryOrderByWithRelationInput | ReportCategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ReportCategories.
     */
    cursor?: ReportCategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ReportCategories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ReportCategories.
     */
    skip?: number
    distinct?: ReportCategoryScalarFieldEnum | ReportCategoryScalarFieldEnum[]
  }

  /**
   * ReportCategory create
   */
  export type ReportCategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCategory
     */
    select?: ReportCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportCategory
     */
    omit?: ReportCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportCategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a ReportCategory.
     */
    data: XOR<ReportCategoryCreateInput, ReportCategoryUncheckedCreateInput>
  }

  /**
   * ReportCategory createMany
   */
  export type ReportCategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ReportCategories.
     */
    data: ReportCategoryCreateManyInput | ReportCategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ReportCategory createManyAndReturn
   */
  export type ReportCategoryCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCategory
     */
    select?: ReportCategorySelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReportCategory
     */
    omit?: ReportCategoryOmit<ExtArgs> | null
    /**
     * The data used to create many ReportCategories.
     */
    data: ReportCategoryCreateManyInput | ReportCategoryCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportCategoryIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReportCategory update
   */
  export type ReportCategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCategory
     */
    select?: ReportCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportCategory
     */
    omit?: ReportCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportCategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a ReportCategory.
     */
    data: XOR<ReportCategoryUpdateInput, ReportCategoryUncheckedUpdateInput>
    /**
     * Choose, which ReportCategory to update.
     */
    where: ReportCategoryWhereUniqueInput
  }

  /**
   * ReportCategory updateMany
   */
  export type ReportCategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ReportCategories.
     */
    data: XOR<ReportCategoryUpdateManyMutationInput, ReportCategoryUncheckedUpdateManyInput>
    /**
     * Filter which ReportCategories to update
     */
    where?: ReportCategoryWhereInput
    /**
     * Limit how many ReportCategories to update.
     */
    limit?: number
  }

  /**
   * ReportCategory updateManyAndReturn
   */
  export type ReportCategoryUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCategory
     */
    select?: ReportCategorySelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the ReportCategory
     */
    omit?: ReportCategoryOmit<ExtArgs> | null
    /**
     * The data used to update ReportCategories.
     */
    data: XOR<ReportCategoryUpdateManyMutationInput, ReportCategoryUncheckedUpdateManyInput>
    /**
     * Filter which ReportCategories to update
     */
    where?: ReportCategoryWhereInput
    /**
     * Limit how many ReportCategories to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportCategoryIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * ReportCategory upsert
   */
  export type ReportCategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCategory
     */
    select?: ReportCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportCategory
     */
    omit?: ReportCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportCategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the ReportCategory to update in case it exists.
     */
    where: ReportCategoryWhereUniqueInput
    /**
     * In case the ReportCategory found by the `where` argument doesn't exist, create a new ReportCategory with this data.
     */
    create: XOR<ReportCategoryCreateInput, ReportCategoryUncheckedCreateInput>
    /**
     * In case the ReportCategory was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportCategoryUpdateInput, ReportCategoryUncheckedUpdateInput>
  }

  /**
   * ReportCategory delete
   */
  export type ReportCategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCategory
     */
    select?: ReportCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportCategory
     */
    omit?: ReportCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportCategoryInclude<ExtArgs> | null
    /**
     * Filter which ReportCategory to delete.
     */
    where: ReportCategoryWhereUniqueInput
  }

  /**
   * ReportCategory deleteMany
   */
  export type ReportCategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ReportCategories to delete
     */
    where?: ReportCategoryWhereInput
    /**
     * Limit how many ReportCategories to delete.
     */
    limit?: number
  }

  /**
   * ReportCategory.parent
   */
  export type ReportCategory$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCategory
     */
    select?: ReportCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportCategory
     */
    omit?: ReportCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportCategoryInclude<ExtArgs> | null
    where?: ReportCategoryWhereInput
  }

  /**
   * ReportCategory.children
   */
  export type ReportCategory$childrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCategory
     */
    select?: ReportCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportCategory
     */
    omit?: ReportCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportCategoryInclude<ExtArgs> | null
    where?: ReportCategoryWhereInput
    orderBy?: ReportCategoryOrderByWithRelationInput | ReportCategoryOrderByWithRelationInput[]
    cursor?: ReportCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportCategoryScalarFieldEnum | ReportCategoryScalarFieldEnum[]
  }

  /**
   * ReportCategory.createdBy
   */
  export type ReportCategory$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ReportCategory.updatedBy
   */
  export type ReportCategory$updatedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * ReportCategory.reports
   */
  export type ReportCategory$reportsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    cursor?: ReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * ReportCategory without action
   */
  export type ReportCategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCategory
     */
    select?: ReportCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportCategory
     */
    omit?: ReportCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportCategoryInclude<ExtArgs> | null
  }


  /**
   * Model Report
   */

  export type AggregateReport = {
    _count: ReportCountAggregateOutputType | null
    _avg: ReportAvgAggregateOutputType | null
    _sum: ReportSumAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  export type ReportAvgAggregateOutputType = {
    version: number | null
  }

  export type ReportSumAggregateOutputType = {
    version: number | null
  }

  export type ReportMinAggregateOutputType = {
    id: string | null
    categoryId: string | null
    periodYear: string | null
    periodMonth: string | null
    periodDate: string | null
    version: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
    organizationId: string | null
  }

  export type ReportMaxAggregateOutputType = {
    id: string | null
    categoryId: string | null
    periodYear: string | null
    periodMonth: string | null
    periodDate: string | null
    version: number | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
    organizationId: string | null
  }

  export type ReportCountAggregateOutputType = {
    id: number
    categoryId: number
    periodYear: number
    periodMonth: number
    periodDate: number
    version: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    organizationId: number
    _all: number
  }


  export type ReportAvgAggregateInputType = {
    version?: true
  }

  export type ReportSumAggregateInputType = {
    version?: true
  }

  export type ReportMinAggregateInputType = {
    id?: true
    categoryId?: true
    periodYear?: true
    periodMonth?: true
    periodDate?: true
    version?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    organizationId?: true
  }

  export type ReportMaxAggregateInputType = {
    id?: true
    categoryId?: true
    periodYear?: true
    periodMonth?: true
    periodDate?: true
    version?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    organizationId?: true
  }

  export type ReportCountAggregateInputType = {
    id?: true
    categoryId?: true
    periodYear?: true
    periodMonth?: true
    periodDate?: true
    version?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    organizationId?: true
    _all?: true
  }

  export type ReportAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Report to aggregate.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Reports
    **/
    _count?: true | ReportCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ReportAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ReportSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ReportMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ReportMaxAggregateInputType
  }

  export type GetReportAggregateType<T extends ReportAggregateArgs> = {
        [P in keyof T & keyof AggregateReport]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateReport[P]>
      : GetScalarType<T[P], AggregateReport[P]>
  }




  export type ReportGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithAggregationInput | ReportOrderByWithAggregationInput[]
    by: ReportScalarFieldEnum[] | ReportScalarFieldEnum
    having?: ReportScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ReportCountAggregateInputType | true
    _avg?: ReportAvgAggregateInputType
    _sum?: ReportSumAggregateInputType
    _min?: ReportMinAggregateInputType
    _max?: ReportMaxAggregateInputType
  }

  export type ReportGroupByOutputType = {
    id: string
    categoryId: string
    periodYear: string
    periodMonth: string
    periodDate: string | null
    version: number
    createdAt: Date
    updatedAt: Date
    createdById: string | null
    updatedById: string | null
    organizationId: string | null
    _count: ReportCountAggregateOutputType | null
    _avg: ReportAvgAggregateOutputType | null
    _sum: ReportSumAggregateOutputType | null
    _min: ReportMinAggregateOutputType | null
    _max: ReportMaxAggregateOutputType | null
  }

  type GetReportGroupByPayload<T extends ReportGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ReportGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ReportGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ReportGroupByOutputType[P]>
            : GetScalarType<T[P], ReportGroupByOutputType[P]>
        }
      >
    >


  export type ReportSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    categoryId?: boolean
    periodYear?: boolean
    periodMonth?: boolean
    periodDate?: boolean
    version?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    organizationId?: boolean
    category?: boolean | ReportCategoryDefaultArgs<ExtArgs>
    createdBy?: boolean | Report$createdByArgs<ExtArgs>
    updatedBy?: boolean | Report$updatedByArgs<ExtArgs>
    organization?: boolean | Report$organizationArgs<ExtArgs>
    notes?: boolean | Report$notesArgs<ExtArgs>
    stages?: boolean | Report$stagesArgs<ExtArgs>
    files?: boolean | Report$filesArgs<ExtArgs>
    _count?: boolean | ReportCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["report"]>

  export type ReportSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    categoryId?: boolean
    periodYear?: boolean
    periodMonth?: boolean
    periodDate?: boolean
    version?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    organizationId?: boolean
    category?: boolean | ReportCategoryDefaultArgs<ExtArgs>
    createdBy?: boolean | Report$createdByArgs<ExtArgs>
    updatedBy?: boolean | Report$updatedByArgs<ExtArgs>
    organization?: boolean | Report$organizationArgs<ExtArgs>
  }, ExtArgs["result"]["report"]>

  export type ReportSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    categoryId?: boolean
    periodYear?: boolean
    periodMonth?: boolean
    periodDate?: boolean
    version?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    organizationId?: boolean
    category?: boolean | ReportCategoryDefaultArgs<ExtArgs>
    createdBy?: boolean | Report$createdByArgs<ExtArgs>
    updatedBy?: boolean | Report$updatedByArgs<ExtArgs>
    organization?: boolean | Report$organizationArgs<ExtArgs>
  }, ExtArgs["result"]["report"]>

  export type ReportSelectScalar = {
    id?: boolean
    categoryId?: boolean
    periodYear?: boolean
    periodMonth?: boolean
    periodDate?: boolean
    version?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    organizationId?: boolean
  }

  export type ReportOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "categoryId" | "periodYear" | "periodMonth" | "periodDate" | "version" | "createdAt" | "updatedAt" | "createdById" | "updatedById" | "organizationId", ExtArgs["result"]["report"]>
  export type ReportInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | ReportCategoryDefaultArgs<ExtArgs>
    createdBy?: boolean | Report$createdByArgs<ExtArgs>
    updatedBy?: boolean | Report$updatedByArgs<ExtArgs>
    organization?: boolean | Report$organizationArgs<ExtArgs>
    notes?: boolean | Report$notesArgs<ExtArgs>
    stages?: boolean | Report$stagesArgs<ExtArgs>
    files?: boolean | Report$filesArgs<ExtArgs>
    _count?: boolean | ReportCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type ReportIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | ReportCategoryDefaultArgs<ExtArgs>
    createdBy?: boolean | Report$createdByArgs<ExtArgs>
    updatedBy?: boolean | Report$updatedByArgs<ExtArgs>
    organization?: boolean | Report$organizationArgs<ExtArgs>
  }
  export type ReportIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    category?: boolean | ReportCategoryDefaultArgs<ExtArgs>
    createdBy?: boolean | Report$createdByArgs<ExtArgs>
    updatedBy?: boolean | Report$updatedByArgs<ExtArgs>
    organization?: boolean | Report$organizationArgs<ExtArgs>
  }

  export type $ReportPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Report"
    objects: {
      category: Prisma.$ReportCategoryPayload<ExtArgs>
      createdBy: Prisma.$UserPayload<ExtArgs> | null
      updatedBy: Prisma.$UserPayload<ExtArgs> | null
      organization: Prisma.$OrganizationPayload<ExtArgs> | null
      notes: Prisma.$NotePayload<ExtArgs>[]
      stages: Prisma.$StagePayload<ExtArgs>[]
      files: Prisma.$FilePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      categoryId: string
      periodYear: string
      periodMonth: string
      periodDate: string | null
      version: number
      createdAt: Date
      updatedAt: Date
      createdById: string | null
      updatedById: string | null
      organizationId: string | null
    }, ExtArgs["result"]["report"]>
    composites: {}
  }

  type ReportGetPayload<S extends boolean | null | undefined | ReportDefaultArgs> = $Result.GetResult<Prisma.$ReportPayload, S>

  type ReportCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ReportFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ReportCountAggregateInputType | true
    }

  export interface ReportDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Report'], meta: { name: 'Report' } }
    /**
     * Find zero or one Report that matches the filter.
     * @param {ReportFindUniqueArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ReportFindUniqueArgs>(args: SelectSubset<T, ReportFindUniqueArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Report that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ReportFindUniqueOrThrowArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ReportFindUniqueOrThrowArgs>(args: SelectSubset<T, ReportFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Report that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindFirstArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ReportFindFirstArgs>(args?: SelectSubset<T, ReportFindFirstArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Report that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindFirstOrThrowArgs} args - Arguments to find a Report
     * @example
     * // Get one Report
     * const report = await prisma.report.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ReportFindFirstOrThrowArgs>(args?: SelectSubset<T, ReportFindFirstOrThrowArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Reports that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Reports
     * const reports = await prisma.report.findMany()
     * 
     * // Get first 10 Reports
     * const reports = await prisma.report.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const reportWithIdOnly = await prisma.report.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ReportFindManyArgs>(args?: SelectSubset<T, ReportFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Report.
     * @param {ReportCreateArgs} args - Arguments to create a Report.
     * @example
     * // Create one Report
     * const Report = await prisma.report.create({
     *   data: {
     *     // ... data to create a Report
     *   }
     * })
     * 
     */
    create<T extends ReportCreateArgs>(args: SelectSubset<T, ReportCreateArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Reports.
     * @param {ReportCreateManyArgs} args - Arguments to create many Reports.
     * @example
     * // Create many Reports
     * const report = await prisma.report.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ReportCreateManyArgs>(args?: SelectSubset<T, ReportCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Reports and returns the data saved in the database.
     * @param {ReportCreateManyAndReturnArgs} args - Arguments to create many Reports.
     * @example
     * // Create many Reports
     * const report = await prisma.report.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Reports and only return the `id`
     * const reportWithIdOnly = await prisma.report.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ReportCreateManyAndReturnArgs>(args?: SelectSubset<T, ReportCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Report.
     * @param {ReportDeleteArgs} args - Arguments to delete one Report.
     * @example
     * // Delete one Report
     * const Report = await prisma.report.delete({
     *   where: {
     *     // ... filter to delete one Report
     *   }
     * })
     * 
     */
    delete<T extends ReportDeleteArgs>(args: SelectSubset<T, ReportDeleteArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Report.
     * @param {ReportUpdateArgs} args - Arguments to update one Report.
     * @example
     * // Update one Report
     * const report = await prisma.report.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ReportUpdateArgs>(args: SelectSubset<T, ReportUpdateArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Reports.
     * @param {ReportDeleteManyArgs} args - Arguments to filter Reports to delete.
     * @example
     * // Delete a few Reports
     * const { count } = await prisma.report.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ReportDeleteManyArgs>(args?: SelectSubset<T, ReportDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Reports
     * const report = await prisma.report.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ReportUpdateManyArgs>(args: SelectSubset<T, ReportUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Reports and returns the data updated in the database.
     * @param {ReportUpdateManyAndReturnArgs} args - Arguments to update many Reports.
     * @example
     * // Update many Reports
     * const report = await prisma.report.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Reports and only return the `id`
     * const reportWithIdOnly = await prisma.report.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ReportUpdateManyAndReturnArgs>(args: SelectSubset<T, ReportUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Report.
     * @param {ReportUpsertArgs} args - Arguments to update or create a Report.
     * @example
     * // Update or create a Report
     * const report = await prisma.report.upsert({
     *   create: {
     *     // ... data to create a Report
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Report we want to update
     *   }
     * })
     */
    upsert<T extends ReportUpsertArgs>(args: SelectSubset<T, ReportUpsertArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Reports.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportCountArgs} args - Arguments to filter Reports to count.
     * @example
     * // Count the number of Reports
     * const count = await prisma.report.count({
     *   where: {
     *     // ... the filter for the Reports we want to count
     *   }
     * })
    **/
    count<T extends ReportCountArgs>(
      args?: Subset<T, ReportCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ReportCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ReportAggregateArgs>(args: Subset<T, ReportAggregateArgs>): Prisma.PrismaPromise<GetReportAggregateType<T>>

    /**
     * Group by Report.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ReportGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ReportGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ReportGroupByArgs['orderBy'] }
        : { orderBy?: ReportGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ReportGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetReportGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Report model
   */
  readonly fields: ReportFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Report.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ReportClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    category<T extends ReportCategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, ReportCategoryDefaultArgs<ExtArgs>>): Prisma__ReportCategoryClient<$Result.GetResult<Prisma.$ReportCategoryPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends Report$createdByArgs<ExtArgs> = {}>(args?: Subset<T, Report$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    updatedBy<T extends Report$updatedByArgs<ExtArgs> = {}>(args?: Subset<T, Report$updatedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    organization<T extends Report$organizationArgs<ExtArgs> = {}>(args?: Subset<T, Report$organizationArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    notes<T extends Report$notesArgs<ExtArgs> = {}>(args?: Subset<T, Report$notesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    stages<T extends Report$stagesArgs<ExtArgs> = {}>(args?: Subset<T, Report$stagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    files<T extends Report$filesArgs<ExtArgs> = {}>(args?: Subset<T, Report$filesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Report model
   */
  interface ReportFieldRefs {
    readonly id: FieldRef<"Report", 'String'>
    readonly categoryId: FieldRef<"Report", 'String'>
    readonly periodYear: FieldRef<"Report", 'String'>
    readonly periodMonth: FieldRef<"Report", 'String'>
    readonly periodDate: FieldRef<"Report", 'String'>
    readonly version: FieldRef<"Report", 'Int'>
    readonly createdAt: FieldRef<"Report", 'DateTime'>
    readonly updatedAt: FieldRef<"Report", 'DateTime'>
    readonly createdById: FieldRef<"Report", 'String'>
    readonly updatedById: FieldRef<"Report", 'String'>
    readonly organizationId: FieldRef<"Report", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Report findUnique
   */
  export type ReportFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report findUniqueOrThrow
   */
  export type ReportFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report findFirst
   */
  export type ReportFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reports.
     */
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report findFirstOrThrow
   */
  export type ReportFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Report to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Reports.
     */
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report findMany
   */
  export type ReportFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter, which Reports to fetch.
     */
    where?: ReportWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Reports to fetch.
     */
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Reports.
     */
    cursor?: ReportWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Reports from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Reports.
     */
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Report create
   */
  export type ReportCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The data needed to create a Report.
     */
    data: XOR<ReportCreateInput, ReportUncheckedCreateInput>
  }

  /**
   * Report createMany
   */
  export type ReportCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Reports.
     */
    data: ReportCreateManyInput | ReportCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Report createManyAndReturn
   */
  export type ReportCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * The data used to create many Reports.
     */
    data: ReportCreateManyInput | ReportCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Report update
   */
  export type ReportUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The data needed to update a Report.
     */
    data: XOR<ReportUpdateInput, ReportUncheckedUpdateInput>
    /**
     * Choose, which Report to update.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report updateMany
   */
  export type ReportUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Reports.
     */
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyInput>
    /**
     * Filter which Reports to update
     */
    where?: ReportWhereInput
    /**
     * Limit how many Reports to update.
     */
    limit?: number
  }

  /**
   * Report updateManyAndReturn
   */
  export type ReportUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * The data used to update Reports.
     */
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyInput>
    /**
     * Filter which Reports to update
     */
    where?: ReportWhereInput
    /**
     * Limit how many Reports to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Report upsert
   */
  export type ReportUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * The filter to search for the Report to update in case it exists.
     */
    where: ReportWhereUniqueInput
    /**
     * In case the Report found by the `where` argument doesn't exist, create a new Report with this data.
     */
    create: XOR<ReportCreateInput, ReportUncheckedCreateInput>
    /**
     * In case the Report was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ReportUpdateInput, ReportUncheckedUpdateInput>
  }

  /**
   * Report delete
   */
  export type ReportDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    /**
     * Filter which Report to delete.
     */
    where: ReportWhereUniqueInput
  }

  /**
   * Report deleteMany
   */
  export type ReportDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Reports to delete
     */
    where?: ReportWhereInput
    /**
     * Limit how many Reports to delete.
     */
    limit?: number
  }

  /**
   * Report.createdBy
   */
  export type Report$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Report.updatedBy
   */
  export type Report$updatedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Report.organization
   */
  export type Report$organizationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    where?: OrganizationWhereInput
  }

  /**
   * Report.notes
   */
  export type Report$notesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    where?: NoteWhereInput
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    cursor?: NoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Report.stages
   */
  export type Report$stagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    where?: StageWhereInput
    orderBy?: StageOrderByWithRelationInput | StageOrderByWithRelationInput[]
    cursor?: StageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StageScalarFieldEnum | StageScalarFieldEnum[]
  }

  /**
   * Report.files
   */
  export type Report$filesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    where?: FileWhereInput
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    cursor?: FileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * Report without action
   */
  export type ReportDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
  }


  /**
   * Model File
   */

  export type AggregateFile = {
    _count: FileCountAggregateOutputType | null
    _avg: FileAvgAggregateOutputType | null
    _sum: FileSumAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  export type FileAvgAggregateOutputType = {
    size: number | null
  }

  export type FileSumAggregateOutputType = {
    size: number | null
  }

  export type FileMinAggregateOutputType = {
    id: string | null
    filename: string | null
    path: string | null
    mimeType: string | null
    size: number | null
    createdAt: Date | null
    updatedAt: Date | null
    reportId: string | null
  }

  export type FileMaxAggregateOutputType = {
    id: string | null
    filename: string | null
    path: string | null
    mimeType: string | null
    size: number | null
    createdAt: Date | null
    updatedAt: Date | null
    reportId: string | null
  }

  export type FileCountAggregateOutputType = {
    id: number
    filename: number
    path: number
    mimeType: number
    size: number
    createdAt: number
    updatedAt: number
    reportId: number
    _all: number
  }


  export type FileAvgAggregateInputType = {
    size?: true
  }

  export type FileSumAggregateInputType = {
    size?: true
  }

  export type FileMinAggregateInputType = {
    id?: true
    filename?: true
    path?: true
    mimeType?: true
    size?: true
    createdAt?: true
    updatedAt?: true
    reportId?: true
  }

  export type FileMaxAggregateInputType = {
    id?: true
    filename?: true
    path?: true
    mimeType?: true
    size?: true
    createdAt?: true
    updatedAt?: true
    reportId?: true
  }

  export type FileCountAggregateInputType = {
    id?: true
    filename?: true
    path?: true
    mimeType?: true
    size?: true
    createdAt?: true
    updatedAt?: true
    reportId?: true
    _all?: true
  }

  export type FileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which File to aggregate.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Files
    **/
    _count?: true | FileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FileAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FileSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FileMaxAggregateInputType
  }

  export type GetFileAggregateType<T extends FileAggregateArgs> = {
        [P in keyof T & keyof AggregateFile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFile[P]>
      : GetScalarType<T[P], AggregateFile[P]>
  }




  export type FileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FileWhereInput
    orderBy?: FileOrderByWithAggregationInput | FileOrderByWithAggregationInput[]
    by: FileScalarFieldEnum[] | FileScalarFieldEnum
    having?: FileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FileCountAggregateInputType | true
    _avg?: FileAvgAggregateInputType
    _sum?: FileSumAggregateInputType
    _min?: FileMinAggregateInputType
    _max?: FileMaxAggregateInputType
  }

  export type FileGroupByOutputType = {
    id: string
    filename: string
    path: string
    mimeType: string | null
    size: number | null
    createdAt: Date
    updatedAt: Date
    reportId: string | null
    _count: FileCountAggregateOutputType | null
    _avg: FileAvgAggregateOutputType | null
    _sum: FileSumAggregateOutputType | null
    _min: FileMinAggregateOutputType | null
    _max: FileMaxAggregateOutputType | null
  }

  type GetFileGroupByPayload<T extends FileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FileGroupByOutputType[P]>
            : GetScalarType<T[P], FileGroupByOutputType[P]>
        }
      >
    >


  export type FileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filename?: boolean
    path?: boolean
    mimeType?: boolean
    size?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reportId?: boolean
    report?: boolean | File$reportArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filename?: boolean
    path?: boolean
    mimeType?: boolean
    size?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reportId?: boolean
    report?: boolean | File$reportArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    filename?: boolean
    path?: boolean
    mimeType?: boolean
    size?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reportId?: boolean
    report?: boolean | File$reportArgs<ExtArgs>
  }, ExtArgs["result"]["file"]>

  export type FileSelectScalar = {
    id?: boolean
    filename?: boolean
    path?: boolean
    mimeType?: boolean
    size?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reportId?: boolean
  }

  export type FileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "filename" | "path" | "mimeType" | "size" | "createdAt" | "updatedAt" | "reportId", ExtArgs["result"]["file"]>
  export type FileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    report?: boolean | File$reportArgs<ExtArgs>
  }
  export type FileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    report?: boolean | File$reportArgs<ExtArgs>
  }
  export type FileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    report?: boolean | File$reportArgs<ExtArgs>
  }

  export type $FilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "File"
    objects: {
      report: Prisma.$ReportPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      filename: string
      path: string
      mimeType: string | null
      size: number | null
      createdAt: Date
      updatedAt: Date
      reportId: string | null
    }, ExtArgs["result"]["file"]>
    composites: {}
  }

  type FileGetPayload<S extends boolean | null | undefined | FileDefaultArgs> = $Result.GetResult<Prisma.$FilePayload, S>

  type FileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<FileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: FileCountAggregateInputType | true
    }

  export interface FileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['File'], meta: { name: 'File' } }
    /**
     * Find zero or one File that matches the filter.
     * @param {FileFindUniqueArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends FileFindUniqueArgs>(args: SelectSubset<T, FileFindUniqueArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one File that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {FileFindUniqueOrThrowArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends FileFindUniqueOrThrowArgs>(args: SelectSubset<T, FileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first File that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends FileFindFirstArgs>(args?: SelectSubset<T, FileFindFirstArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first File that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindFirstOrThrowArgs} args - Arguments to find a File
     * @example
     * // Get one File
     * const file = await prisma.file.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends FileFindFirstOrThrowArgs>(args?: SelectSubset<T, FileFindFirstOrThrowArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Files that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Files
     * const files = await prisma.file.findMany()
     * 
     * // Get first 10 Files
     * const files = await prisma.file.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const fileWithIdOnly = await prisma.file.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends FileFindManyArgs>(args?: SelectSubset<T, FileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a File.
     * @param {FileCreateArgs} args - Arguments to create a File.
     * @example
     * // Create one File
     * const File = await prisma.file.create({
     *   data: {
     *     // ... data to create a File
     *   }
     * })
     * 
     */
    create<T extends FileCreateArgs>(args: SelectSubset<T, FileCreateArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Files.
     * @param {FileCreateManyArgs} args - Arguments to create many Files.
     * @example
     * // Create many Files
     * const file = await prisma.file.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends FileCreateManyArgs>(args?: SelectSubset<T, FileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Files and returns the data saved in the database.
     * @param {FileCreateManyAndReturnArgs} args - Arguments to create many Files.
     * @example
     * // Create many Files
     * const file = await prisma.file.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Files and only return the `id`
     * const fileWithIdOnly = await prisma.file.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends FileCreateManyAndReturnArgs>(args?: SelectSubset<T, FileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a File.
     * @param {FileDeleteArgs} args - Arguments to delete one File.
     * @example
     * // Delete one File
     * const File = await prisma.file.delete({
     *   where: {
     *     // ... filter to delete one File
     *   }
     * })
     * 
     */
    delete<T extends FileDeleteArgs>(args: SelectSubset<T, FileDeleteArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one File.
     * @param {FileUpdateArgs} args - Arguments to update one File.
     * @example
     * // Update one File
     * const file = await prisma.file.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends FileUpdateArgs>(args: SelectSubset<T, FileUpdateArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Files.
     * @param {FileDeleteManyArgs} args - Arguments to filter Files to delete.
     * @example
     * // Delete a few Files
     * const { count } = await prisma.file.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends FileDeleteManyArgs>(args?: SelectSubset<T, FileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Files
     * const file = await prisma.file.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends FileUpdateManyArgs>(args: SelectSubset<T, FileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Files and returns the data updated in the database.
     * @param {FileUpdateManyAndReturnArgs} args - Arguments to update many Files.
     * @example
     * // Update many Files
     * const file = await prisma.file.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Files and only return the `id`
     * const fileWithIdOnly = await prisma.file.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends FileUpdateManyAndReturnArgs>(args: SelectSubset<T, FileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one File.
     * @param {FileUpsertArgs} args - Arguments to update or create a File.
     * @example
     * // Update or create a File
     * const file = await prisma.file.upsert({
     *   create: {
     *     // ... data to create a File
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the File we want to update
     *   }
     * })
     */
    upsert<T extends FileUpsertArgs>(args: SelectSubset<T, FileUpsertArgs<ExtArgs>>): Prisma__FileClient<$Result.GetResult<Prisma.$FilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Files.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileCountArgs} args - Arguments to filter Files to count.
     * @example
     * // Count the number of Files
     * const count = await prisma.file.count({
     *   where: {
     *     // ... the filter for the Files we want to count
     *   }
     * })
    **/
    count<T extends FileCountArgs>(
      args?: Subset<T, FileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FileAggregateArgs>(args: Subset<T, FileAggregateArgs>): Prisma.PrismaPromise<GetFileAggregateType<T>>

    /**
     * Group by File.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FileGroupByArgs['orderBy'] }
        : { orderBy?: FileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the File model
   */
  readonly fields: FileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for File.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    report<T extends File$reportArgs<ExtArgs> = {}>(args?: Subset<T, File$reportArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the File model
   */
  interface FileFieldRefs {
    readonly id: FieldRef<"File", 'String'>
    readonly filename: FieldRef<"File", 'String'>
    readonly path: FieldRef<"File", 'String'>
    readonly mimeType: FieldRef<"File", 'String'>
    readonly size: FieldRef<"File", 'Int'>
    readonly createdAt: FieldRef<"File", 'DateTime'>
    readonly updatedAt: FieldRef<"File", 'DateTime'>
    readonly reportId: FieldRef<"File", 'String'>
  }
    

  // Custom InputTypes
  /**
   * File findUnique
   */
  export type FileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File findUniqueOrThrow
   */
  export type FileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File findFirst
   */
  export type FileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File findFirstOrThrow
   */
  export type FileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which File to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Files.
     */
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File findMany
   */
  export type FileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter, which Files to fetch.
     */
    where?: FileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Files to fetch.
     */
    orderBy?: FileOrderByWithRelationInput | FileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Files.
     */
    cursor?: FileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Files from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Files.
     */
    skip?: number
    distinct?: FileScalarFieldEnum | FileScalarFieldEnum[]
  }

  /**
   * File create
   */
  export type FileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The data needed to create a File.
     */
    data: XOR<FileCreateInput, FileUncheckedCreateInput>
  }

  /**
   * File createMany
   */
  export type FileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Files.
     */
    data: FileCreateManyInput | FileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * File createManyAndReturn
   */
  export type FileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * The data used to create many Files.
     */
    data: FileCreateManyInput | FileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * File update
   */
  export type FileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The data needed to update a File.
     */
    data: XOR<FileUpdateInput, FileUncheckedUpdateInput>
    /**
     * Choose, which File to update.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File updateMany
   */
  export type FileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Files.
     */
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyInput>
    /**
     * Filter which Files to update
     */
    where?: FileWhereInput
    /**
     * Limit how many Files to update.
     */
    limit?: number
  }

  /**
   * File updateManyAndReturn
   */
  export type FileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * The data used to update Files.
     */
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyInput>
    /**
     * Filter which Files to update
     */
    where?: FileWhereInput
    /**
     * Limit how many Files to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * File upsert
   */
  export type FileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * The filter to search for the File to update in case it exists.
     */
    where: FileWhereUniqueInput
    /**
     * In case the File found by the `where` argument doesn't exist, create a new File with this data.
     */
    create: XOR<FileCreateInput, FileUncheckedCreateInput>
    /**
     * In case the File was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FileUpdateInput, FileUncheckedUpdateInput>
  }

  /**
   * File delete
   */
  export type FileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
    /**
     * Filter which File to delete.
     */
    where: FileWhereUniqueInput
  }

  /**
   * File deleteMany
   */
  export type FileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Files to delete
     */
    where?: FileWhereInput
    /**
     * Limit how many Files to delete.
     */
    limit?: number
  }

  /**
   * File.report
   */
  export type File$reportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    where?: ReportWhereInput
  }

  /**
   * File without action
   */
  export type FileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the File
     */
    select?: FileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the File
     */
    omit?: FileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FileInclude<ExtArgs> | null
  }


  /**
   * Model Note
   */

  export type AggregateNote = {
    _count: NoteCountAggregateOutputType | null
    _min: NoteMinAggregateOutputType | null
    _max: NoteMaxAggregateOutputType | null
  }

  export type NoteMinAggregateOutputType = {
    id: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
    reportId: string | null
  }

  export type NoteMaxAggregateOutputType = {
    id: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
    reportId: string | null
  }

  export type NoteCountAggregateOutputType = {
    id: number
    description: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    reportId: number
    _all: number
  }


  export type NoteMinAggregateInputType = {
    id?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    reportId?: true
  }

  export type NoteMaxAggregateInputType = {
    id?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    reportId?: true
  }

  export type NoteCountAggregateInputType = {
    id?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    reportId?: true
    _all?: true
  }

  export type NoteAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Note to aggregate.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notes
    **/
    _count?: true | NoteCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NoteMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NoteMaxAggregateInputType
  }

  export type GetNoteAggregateType<T extends NoteAggregateArgs> = {
        [P in keyof T & keyof AggregateNote]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNote[P]>
      : GetScalarType<T[P], AggregateNote[P]>
  }




  export type NoteGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NoteWhereInput
    orderBy?: NoteOrderByWithAggregationInput | NoteOrderByWithAggregationInput[]
    by: NoteScalarFieldEnum[] | NoteScalarFieldEnum
    having?: NoteScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NoteCountAggregateInputType | true
    _min?: NoteMinAggregateInputType
    _max?: NoteMaxAggregateInputType
  }

  export type NoteGroupByOutputType = {
    id: string
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
    reportId: string | null
    _count: NoteCountAggregateOutputType | null
    _min: NoteMinAggregateOutputType | null
    _max: NoteMaxAggregateOutputType | null
  }

  type GetNoteGroupByPayload<T extends NoteGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NoteGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NoteGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NoteGroupByOutputType[P]>
            : GetScalarType<T[P], NoteGroupByOutputType[P]>
        }
      >
    >


  export type NoteSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    reportId?: boolean
    createdBy?: boolean | Note$createdByArgs<ExtArgs>
    updatedBy?: boolean | Note$updatedByArgs<ExtArgs>
    report?: boolean | Note$reportArgs<ExtArgs>
  }, ExtArgs["result"]["note"]>

  export type NoteSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    reportId?: boolean
    createdBy?: boolean | Note$createdByArgs<ExtArgs>
    updatedBy?: boolean | Note$updatedByArgs<ExtArgs>
    report?: boolean | Note$reportArgs<ExtArgs>
  }, ExtArgs["result"]["note"]>

  export type NoteSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    reportId?: boolean
    createdBy?: boolean | Note$createdByArgs<ExtArgs>
    updatedBy?: boolean | Note$updatedByArgs<ExtArgs>
    report?: boolean | Note$reportArgs<ExtArgs>
  }, ExtArgs["result"]["note"]>

  export type NoteSelectScalar = {
    id?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    reportId?: boolean
  }

  export type NoteOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "description" | "createdAt" | "updatedAt" | "createdById" | "updatedById" | "reportId", ExtArgs["result"]["note"]>
  export type NoteInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | Note$createdByArgs<ExtArgs>
    updatedBy?: boolean | Note$updatedByArgs<ExtArgs>
    report?: boolean | Note$reportArgs<ExtArgs>
  }
  export type NoteIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | Note$createdByArgs<ExtArgs>
    updatedBy?: boolean | Note$updatedByArgs<ExtArgs>
    report?: boolean | Note$reportArgs<ExtArgs>
  }
  export type NoteIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | Note$createdByArgs<ExtArgs>
    updatedBy?: boolean | Note$updatedByArgs<ExtArgs>
    report?: boolean | Note$reportArgs<ExtArgs>
  }

  export type $NotePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Note"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs> | null
      updatedBy: Prisma.$UserPayload<ExtArgs> | null
      report: Prisma.$ReportPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      description: string | null
      createdAt: Date | null
      updatedAt: Date | null
      createdById: string | null
      updatedById: string | null
      reportId: string | null
    }, ExtArgs["result"]["note"]>
    composites: {}
  }

  type NoteGetPayload<S extends boolean | null | undefined | NoteDefaultArgs> = $Result.GetResult<Prisma.$NotePayload, S>

  type NoteCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<NoteFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: NoteCountAggregateInputType | true
    }

  export interface NoteDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Note'], meta: { name: 'Note' } }
    /**
     * Find zero or one Note that matches the filter.
     * @param {NoteFindUniqueArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends NoteFindUniqueArgs>(args: SelectSubset<T, NoteFindUniqueArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Note that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {NoteFindUniqueOrThrowArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends NoteFindUniqueOrThrowArgs>(args: SelectSubset<T, NoteFindUniqueOrThrowArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Note that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindFirstArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends NoteFindFirstArgs>(args?: SelectSubset<T, NoteFindFirstArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Note that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindFirstOrThrowArgs} args - Arguments to find a Note
     * @example
     * // Get one Note
     * const note = await prisma.note.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends NoteFindFirstOrThrowArgs>(args?: SelectSubset<T, NoteFindFirstOrThrowArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Notes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notes
     * const notes = await prisma.note.findMany()
     * 
     * // Get first 10 Notes
     * const notes = await prisma.note.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const noteWithIdOnly = await prisma.note.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends NoteFindManyArgs>(args?: SelectSubset<T, NoteFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Note.
     * @param {NoteCreateArgs} args - Arguments to create a Note.
     * @example
     * // Create one Note
     * const Note = await prisma.note.create({
     *   data: {
     *     // ... data to create a Note
     *   }
     * })
     * 
     */
    create<T extends NoteCreateArgs>(args: SelectSubset<T, NoteCreateArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Notes.
     * @param {NoteCreateManyArgs} args - Arguments to create many Notes.
     * @example
     * // Create many Notes
     * const note = await prisma.note.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends NoteCreateManyArgs>(args?: SelectSubset<T, NoteCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Notes and returns the data saved in the database.
     * @param {NoteCreateManyAndReturnArgs} args - Arguments to create many Notes.
     * @example
     * // Create many Notes
     * const note = await prisma.note.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Notes and only return the `id`
     * const noteWithIdOnly = await prisma.note.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends NoteCreateManyAndReturnArgs>(args?: SelectSubset<T, NoteCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Note.
     * @param {NoteDeleteArgs} args - Arguments to delete one Note.
     * @example
     * // Delete one Note
     * const Note = await prisma.note.delete({
     *   where: {
     *     // ... filter to delete one Note
     *   }
     * })
     * 
     */
    delete<T extends NoteDeleteArgs>(args: SelectSubset<T, NoteDeleteArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Note.
     * @param {NoteUpdateArgs} args - Arguments to update one Note.
     * @example
     * // Update one Note
     * const note = await prisma.note.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends NoteUpdateArgs>(args: SelectSubset<T, NoteUpdateArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Notes.
     * @param {NoteDeleteManyArgs} args - Arguments to filter Notes to delete.
     * @example
     * // Delete a few Notes
     * const { count } = await prisma.note.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends NoteDeleteManyArgs>(args?: SelectSubset<T, NoteDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notes
     * const note = await prisma.note.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends NoteUpdateManyArgs>(args: SelectSubset<T, NoteUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notes and returns the data updated in the database.
     * @param {NoteUpdateManyAndReturnArgs} args - Arguments to update many Notes.
     * @example
     * // Update many Notes
     * const note = await prisma.note.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Notes and only return the `id`
     * const noteWithIdOnly = await prisma.note.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends NoteUpdateManyAndReturnArgs>(args: SelectSubset<T, NoteUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Note.
     * @param {NoteUpsertArgs} args - Arguments to update or create a Note.
     * @example
     * // Update or create a Note
     * const note = await prisma.note.upsert({
     *   create: {
     *     // ... data to create a Note
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Note we want to update
     *   }
     * })
     */
    upsert<T extends NoteUpsertArgs>(args: SelectSubset<T, NoteUpsertArgs<ExtArgs>>): Prisma__NoteClient<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Notes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteCountArgs} args - Arguments to filter Notes to count.
     * @example
     * // Count the number of Notes
     * const count = await prisma.note.count({
     *   where: {
     *     // ... the filter for the Notes we want to count
     *   }
     * })
    **/
    count<T extends NoteCountArgs>(
      args?: Subset<T, NoteCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NoteCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Note.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NoteAggregateArgs>(args: Subset<T, NoteAggregateArgs>): Prisma.PrismaPromise<GetNoteAggregateType<T>>

    /**
     * Group by Note.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NoteGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NoteGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NoteGroupByArgs['orderBy'] }
        : { orderBy?: NoteGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NoteGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNoteGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Note model
   */
  readonly fields: NoteFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Note.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NoteClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends Note$createdByArgs<ExtArgs> = {}>(args?: Subset<T, Note$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    updatedBy<T extends Note$updatedByArgs<ExtArgs> = {}>(args?: Subset<T, Note$updatedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    report<T extends Note$reportArgs<ExtArgs> = {}>(args?: Subset<T, Note$reportArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Note model
   */
  interface NoteFieldRefs {
    readonly id: FieldRef<"Note", 'String'>
    readonly description: FieldRef<"Note", 'String'>
    readonly createdAt: FieldRef<"Note", 'DateTime'>
    readonly updatedAt: FieldRef<"Note", 'DateTime'>
    readonly createdById: FieldRef<"Note", 'String'>
    readonly updatedById: FieldRef<"Note", 'String'>
    readonly reportId: FieldRef<"Note", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Note findUnique
   */
  export type NoteFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note findUniqueOrThrow
   */
  export type NoteFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note findFirst
   */
  export type NoteFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notes.
     */
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Note findFirstOrThrow
   */
  export type NoteFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Note to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notes.
     */
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Note findMany
   */
  export type NoteFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter, which Notes to fetch.
     */
    where?: NoteWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notes to fetch.
     */
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notes.
     */
    cursor?: NoteWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notes.
     */
    skip?: number
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * Note create
   */
  export type NoteCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * The data needed to create a Note.
     */
    data?: XOR<NoteCreateInput, NoteUncheckedCreateInput>
  }

  /**
   * Note createMany
   */
  export type NoteCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notes.
     */
    data: NoteCreateManyInput | NoteCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Note createManyAndReturn
   */
  export type NoteCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * The data used to create many Notes.
     */
    data: NoteCreateManyInput | NoteCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Note update
   */
  export type NoteUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * The data needed to update a Note.
     */
    data: XOR<NoteUpdateInput, NoteUncheckedUpdateInput>
    /**
     * Choose, which Note to update.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note updateMany
   */
  export type NoteUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notes.
     */
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyInput>
    /**
     * Filter which Notes to update
     */
    where?: NoteWhereInput
    /**
     * Limit how many Notes to update.
     */
    limit?: number
  }

  /**
   * Note updateManyAndReturn
   */
  export type NoteUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * The data used to update Notes.
     */
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyInput>
    /**
     * Filter which Notes to update
     */
    where?: NoteWhereInput
    /**
     * Limit how many Notes to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Note upsert
   */
  export type NoteUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * The filter to search for the Note to update in case it exists.
     */
    where: NoteWhereUniqueInput
    /**
     * In case the Note found by the `where` argument doesn't exist, create a new Note with this data.
     */
    create: XOR<NoteCreateInput, NoteUncheckedCreateInput>
    /**
     * In case the Note was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NoteUpdateInput, NoteUncheckedUpdateInput>
  }

  /**
   * Note delete
   */
  export type NoteDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    /**
     * Filter which Note to delete.
     */
    where: NoteWhereUniqueInput
  }

  /**
   * Note deleteMany
   */
  export type NoteDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notes to delete
     */
    where?: NoteWhereInput
    /**
     * Limit how many Notes to delete.
     */
    limit?: number
  }

  /**
   * Note.createdBy
   */
  export type Note$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Note.updatedBy
   */
  export type Note$updatedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Note.report
   */
  export type Note$reportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    where?: ReportWhereInput
  }

  /**
   * Note without action
   */
  export type NoteDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
  }


  /**
   * Model Stage
   */

  export type AggregateStage = {
    _count: StageCountAggregateOutputType | null
    _min: StageMinAggregateOutputType | null
    _max: StageMaxAggregateOutputType | null
  }

  export type StageMinAggregateOutputType = {
    id: string | null
    stageTypeId: string | null
    comment: string | null
    createdById: string | null
    updatedById: string | null
    createdAt: Date | null
    updatedAt: Date | null
    reportId: string | null
  }

  export type StageMaxAggregateOutputType = {
    id: string | null
    stageTypeId: string | null
    comment: string | null
    createdById: string | null
    updatedById: string | null
    createdAt: Date | null
    updatedAt: Date | null
    reportId: string | null
  }

  export type StageCountAggregateOutputType = {
    id: number
    stageTypeId: number
    comment: number
    createdById: number
    updatedById: number
    createdAt: number
    updatedAt: number
    reportId: number
    _all: number
  }


  export type StageMinAggregateInputType = {
    id?: true
    stageTypeId?: true
    comment?: true
    createdById?: true
    updatedById?: true
    createdAt?: true
    updatedAt?: true
    reportId?: true
  }

  export type StageMaxAggregateInputType = {
    id?: true
    stageTypeId?: true
    comment?: true
    createdById?: true
    updatedById?: true
    createdAt?: true
    updatedAt?: true
    reportId?: true
  }

  export type StageCountAggregateInputType = {
    id?: true
    stageTypeId?: true
    comment?: true
    createdById?: true
    updatedById?: true
    createdAt?: true
    updatedAt?: true
    reportId?: true
    _all?: true
  }

  export type StageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stage to aggregate.
     */
    where?: StageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stages to fetch.
     */
    orderBy?: StageOrderByWithRelationInput | StageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Stages
    **/
    _count?: true | StageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StageMaxAggregateInputType
  }

  export type GetStageAggregateType<T extends StageAggregateArgs> = {
        [P in keyof T & keyof AggregateStage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStage[P]>
      : GetScalarType<T[P], AggregateStage[P]>
  }




  export type StageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StageWhereInput
    orderBy?: StageOrderByWithAggregationInput | StageOrderByWithAggregationInput[]
    by: StageScalarFieldEnum[] | StageScalarFieldEnum
    having?: StageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StageCountAggregateInputType | true
    _min?: StageMinAggregateInputType
    _max?: StageMaxAggregateInputType
  }

  export type StageGroupByOutputType = {
    id: string
    stageTypeId: string
    comment: string | null
    createdById: string | null
    updatedById: string | null
    createdAt: Date | null
    updatedAt: Date | null
    reportId: string | null
    _count: StageCountAggregateOutputType | null
    _min: StageMinAggregateOutputType | null
    _max: StageMaxAggregateOutputType | null
  }

  type GetStageGroupByPayload<T extends StageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StageGroupByOutputType[P]>
            : GetScalarType<T[P], StageGroupByOutputType[P]>
        }
      >
    >


  export type StageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stageTypeId?: boolean
    comment?: boolean
    createdById?: boolean
    updatedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reportId?: boolean
    type?: boolean | StageTypeDefaultArgs<ExtArgs>
    createdBy?: boolean | Stage$createdByArgs<ExtArgs>
    updatedBy?: boolean | Stage$updatedByArgs<ExtArgs>
    report?: boolean | Stage$reportArgs<ExtArgs>
  }, ExtArgs["result"]["stage"]>

  export type StageSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stageTypeId?: boolean
    comment?: boolean
    createdById?: boolean
    updatedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reportId?: boolean
    type?: boolean | StageTypeDefaultArgs<ExtArgs>
    createdBy?: boolean | Stage$createdByArgs<ExtArgs>
    updatedBy?: boolean | Stage$updatedByArgs<ExtArgs>
    report?: boolean | Stage$reportArgs<ExtArgs>
  }, ExtArgs["result"]["stage"]>

  export type StageSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    stageTypeId?: boolean
    comment?: boolean
    createdById?: boolean
    updatedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reportId?: boolean
    type?: boolean | StageTypeDefaultArgs<ExtArgs>
    createdBy?: boolean | Stage$createdByArgs<ExtArgs>
    updatedBy?: boolean | Stage$updatedByArgs<ExtArgs>
    report?: boolean | Stage$reportArgs<ExtArgs>
  }, ExtArgs["result"]["stage"]>

  export type StageSelectScalar = {
    id?: boolean
    stageTypeId?: boolean
    comment?: boolean
    createdById?: boolean
    updatedById?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    reportId?: boolean
  }

  export type StageOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "stageTypeId" | "comment" | "createdById" | "updatedById" | "createdAt" | "updatedAt" | "reportId", ExtArgs["result"]["stage"]>
  export type StageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    type?: boolean | StageTypeDefaultArgs<ExtArgs>
    createdBy?: boolean | Stage$createdByArgs<ExtArgs>
    updatedBy?: boolean | Stage$updatedByArgs<ExtArgs>
    report?: boolean | Stage$reportArgs<ExtArgs>
  }
  export type StageIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    type?: boolean | StageTypeDefaultArgs<ExtArgs>
    createdBy?: boolean | Stage$createdByArgs<ExtArgs>
    updatedBy?: boolean | Stage$updatedByArgs<ExtArgs>
    report?: boolean | Stage$reportArgs<ExtArgs>
  }
  export type StageIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    type?: boolean | StageTypeDefaultArgs<ExtArgs>
    createdBy?: boolean | Stage$createdByArgs<ExtArgs>
    updatedBy?: boolean | Stage$updatedByArgs<ExtArgs>
    report?: boolean | Stage$reportArgs<ExtArgs>
  }

  export type $StagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Stage"
    objects: {
      type: Prisma.$StageTypePayload<ExtArgs>
      createdBy: Prisma.$UserPayload<ExtArgs> | null
      updatedBy: Prisma.$UserPayload<ExtArgs> | null
      report: Prisma.$ReportPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      stageTypeId: string
      comment: string | null
      createdById: string | null
      updatedById: string | null
      createdAt: Date | null
      updatedAt: Date | null
      reportId: string | null
    }, ExtArgs["result"]["stage"]>
    composites: {}
  }

  type StageGetPayload<S extends boolean | null | undefined | StageDefaultArgs> = $Result.GetResult<Prisma.$StagePayload, S>

  type StageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StageFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StageCountAggregateInputType | true
    }

  export interface StageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Stage'], meta: { name: 'Stage' } }
    /**
     * Find zero or one Stage that matches the filter.
     * @param {StageFindUniqueArgs} args - Arguments to find a Stage
     * @example
     * // Get one Stage
     * const stage = await prisma.stage.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StageFindUniqueArgs>(args: SelectSubset<T, StageFindUniqueArgs<ExtArgs>>): Prisma__StageClient<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Stage that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StageFindUniqueOrThrowArgs} args - Arguments to find a Stage
     * @example
     * // Get one Stage
     * const stage = await prisma.stage.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StageFindUniqueOrThrowArgs>(args: SelectSubset<T, StageFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StageClient<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Stage that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageFindFirstArgs} args - Arguments to find a Stage
     * @example
     * // Get one Stage
     * const stage = await prisma.stage.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StageFindFirstArgs>(args?: SelectSubset<T, StageFindFirstArgs<ExtArgs>>): Prisma__StageClient<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Stage that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageFindFirstOrThrowArgs} args - Arguments to find a Stage
     * @example
     * // Get one Stage
     * const stage = await prisma.stage.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StageFindFirstOrThrowArgs>(args?: SelectSubset<T, StageFindFirstOrThrowArgs<ExtArgs>>): Prisma__StageClient<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Stages that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Stages
     * const stages = await prisma.stage.findMany()
     * 
     * // Get first 10 Stages
     * const stages = await prisma.stage.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stageWithIdOnly = await prisma.stage.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StageFindManyArgs>(args?: SelectSubset<T, StageFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Stage.
     * @param {StageCreateArgs} args - Arguments to create a Stage.
     * @example
     * // Create one Stage
     * const Stage = await prisma.stage.create({
     *   data: {
     *     // ... data to create a Stage
     *   }
     * })
     * 
     */
    create<T extends StageCreateArgs>(args: SelectSubset<T, StageCreateArgs<ExtArgs>>): Prisma__StageClient<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Stages.
     * @param {StageCreateManyArgs} args - Arguments to create many Stages.
     * @example
     * // Create many Stages
     * const stage = await prisma.stage.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StageCreateManyArgs>(args?: SelectSubset<T, StageCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Stages and returns the data saved in the database.
     * @param {StageCreateManyAndReturnArgs} args - Arguments to create many Stages.
     * @example
     * // Create many Stages
     * const stage = await prisma.stage.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Stages and only return the `id`
     * const stageWithIdOnly = await prisma.stage.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StageCreateManyAndReturnArgs>(args?: SelectSubset<T, StageCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Stage.
     * @param {StageDeleteArgs} args - Arguments to delete one Stage.
     * @example
     * // Delete one Stage
     * const Stage = await prisma.stage.delete({
     *   where: {
     *     // ... filter to delete one Stage
     *   }
     * })
     * 
     */
    delete<T extends StageDeleteArgs>(args: SelectSubset<T, StageDeleteArgs<ExtArgs>>): Prisma__StageClient<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Stage.
     * @param {StageUpdateArgs} args - Arguments to update one Stage.
     * @example
     * // Update one Stage
     * const stage = await prisma.stage.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StageUpdateArgs>(args: SelectSubset<T, StageUpdateArgs<ExtArgs>>): Prisma__StageClient<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Stages.
     * @param {StageDeleteManyArgs} args - Arguments to filter Stages to delete.
     * @example
     * // Delete a few Stages
     * const { count } = await prisma.stage.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StageDeleteManyArgs>(args?: SelectSubset<T, StageDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Stages
     * const stage = await prisma.stage.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StageUpdateManyArgs>(args: SelectSubset<T, StageUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Stages and returns the data updated in the database.
     * @param {StageUpdateManyAndReturnArgs} args - Arguments to update many Stages.
     * @example
     * // Update many Stages
     * const stage = await prisma.stage.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Stages and only return the `id`
     * const stageWithIdOnly = await prisma.stage.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StageUpdateManyAndReturnArgs>(args: SelectSubset<T, StageUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Stage.
     * @param {StageUpsertArgs} args - Arguments to update or create a Stage.
     * @example
     * // Update or create a Stage
     * const stage = await prisma.stage.upsert({
     *   create: {
     *     // ... data to create a Stage
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Stage we want to update
     *   }
     * })
     */
    upsert<T extends StageUpsertArgs>(args: SelectSubset<T, StageUpsertArgs<ExtArgs>>): Prisma__StageClient<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Stages.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageCountArgs} args - Arguments to filter Stages to count.
     * @example
     * // Count the number of Stages
     * const count = await prisma.stage.count({
     *   where: {
     *     // ... the filter for the Stages we want to count
     *   }
     * })
    **/
    count<T extends StageCountArgs>(
      args?: Subset<T, StageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Stage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StageAggregateArgs>(args: Subset<T, StageAggregateArgs>): Prisma.PrismaPromise<GetStageAggregateType<T>>

    /**
     * Group by Stage.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StageGroupByArgs['orderBy'] }
        : { orderBy?: StageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Stage model
   */
  readonly fields: StageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Stage.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    type<T extends StageTypeDefaultArgs<ExtArgs> = {}>(args?: Subset<T, StageTypeDefaultArgs<ExtArgs>>): Prisma__StageTypeClient<$Result.GetResult<Prisma.$StageTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends Stage$createdByArgs<ExtArgs> = {}>(args?: Subset<T, Stage$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    updatedBy<T extends Stage$updatedByArgs<ExtArgs> = {}>(args?: Subset<T, Stage$updatedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    report<T extends Stage$reportArgs<ExtArgs> = {}>(args?: Subset<T, Stage$reportArgs<ExtArgs>>): Prisma__ReportClient<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Stage model
   */
  interface StageFieldRefs {
    readonly id: FieldRef<"Stage", 'String'>
    readonly stageTypeId: FieldRef<"Stage", 'String'>
    readonly comment: FieldRef<"Stage", 'String'>
    readonly createdById: FieldRef<"Stage", 'String'>
    readonly updatedById: FieldRef<"Stage", 'String'>
    readonly createdAt: FieldRef<"Stage", 'DateTime'>
    readonly updatedAt: FieldRef<"Stage", 'DateTime'>
    readonly reportId: FieldRef<"Stage", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Stage findUnique
   */
  export type StageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    /**
     * Filter, which Stage to fetch.
     */
    where: StageWhereUniqueInput
  }

  /**
   * Stage findUniqueOrThrow
   */
  export type StageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    /**
     * Filter, which Stage to fetch.
     */
    where: StageWhereUniqueInput
  }

  /**
   * Stage findFirst
   */
  export type StageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    /**
     * Filter, which Stage to fetch.
     */
    where?: StageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stages to fetch.
     */
    orderBy?: StageOrderByWithRelationInput | StageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stages.
     */
    cursor?: StageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stages.
     */
    distinct?: StageScalarFieldEnum | StageScalarFieldEnum[]
  }

  /**
   * Stage findFirstOrThrow
   */
  export type StageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    /**
     * Filter, which Stage to fetch.
     */
    where?: StageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stages to fetch.
     */
    orderBy?: StageOrderByWithRelationInput | StageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Stages.
     */
    cursor?: StageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stages.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Stages.
     */
    distinct?: StageScalarFieldEnum | StageScalarFieldEnum[]
  }

  /**
   * Stage findMany
   */
  export type StageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    /**
     * Filter, which Stages to fetch.
     */
    where?: StageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Stages to fetch.
     */
    orderBy?: StageOrderByWithRelationInput | StageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Stages.
     */
    cursor?: StageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Stages from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Stages.
     */
    skip?: number
    distinct?: StageScalarFieldEnum | StageScalarFieldEnum[]
  }

  /**
   * Stage create
   */
  export type StageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    /**
     * The data needed to create a Stage.
     */
    data: XOR<StageCreateInput, StageUncheckedCreateInput>
  }

  /**
   * Stage createMany
   */
  export type StageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Stages.
     */
    data: StageCreateManyInput | StageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Stage createManyAndReturn
   */
  export type StageCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * The data used to create many Stages.
     */
    data: StageCreateManyInput | StageCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Stage update
   */
  export type StageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    /**
     * The data needed to update a Stage.
     */
    data: XOR<StageUpdateInput, StageUncheckedUpdateInput>
    /**
     * Choose, which Stage to update.
     */
    where: StageWhereUniqueInput
  }

  /**
   * Stage updateMany
   */
  export type StageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Stages.
     */
    data: XOR<StageUpdateManyMutationInput, StageUncheckedUpdateManyInput>
    /**
     * Filter which Stages to update
     */
    where?: StageWhereInput
    /**
     * Limit how many Stages to update.
     */
    limit?: number
  }

  /**
   * Stage updateManyAndReturn
   */
  export type StageUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * The data used to update Stages.
     */
    data: XOR<StageUpdateManyMutationInput, StageUncheckedUpdateManyInput>
    /**
     * Filter which Stages to update
     */
    where?: StageWhereInput
    /**
     * Limit how many Stages to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Stage upsert
   */
  export type StageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    /**
     * The filter to search for the Stage to update in case it exists.
     */
    where: StageWhereUniqueInput
    /**
     * In case the Stage found by the `where` argument doesn't exist, create a new Stage with this data.
     */
    create: XOR<StageCreateInput, StageUncheckedCreateInput>
    /**
     * In case the Stage was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StageUpdateInput, StageUncheckedUpdateInput>
  }

  /**
   * Stage delete
   */
  export type StageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    /**
     * Filter which Stage to delete.
     */
    where: StageWhereUniqueInput
  }

  /**
   * Stage deleteMany
   */
  export type StageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Stages to delete
     */
    where?: StageWhereInput
    /**
     * Limit how many Stages to delete.
     */
    limit?: number
  }

  /**
   * Stage.createdBy
   */
  export type Stage$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Stage.updatedBy
   */
  export type Stage$updatedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Stage.report
   */
  export type Stage$reportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    where?: ReportWhereInput
  }

  /**
   * Stage without action
   */
  export type StageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
  }


  /**
   * Model StageType
   */

  export type AggregateStageType = {
    _count: StageTypeCountAggregateOutputType | null
    _avg: StageTypeAvgAggregateOutputType | null
    _sum: StageTypeSumAggregateOutputType | null
    _min: StageTypeMinAggregateOutputType | null
    _max: StageTypeMaxAggregateOutputType | null
  }

  export type StageTypeAvgAggregateOutputType = {
    order: number | null
  }

  export type StageTypeSumAggregateOutputType = {
    order: number | null
  }

  export type StageTypeMinAggregateOutputType = {
    id: string | null
    model: string | null
    order: number | null
    value: string | null
    label: string | null
  }

  export type StageTypeMaxAggregateOutputType = {
    id: string | null
    model: string | null
    order: number | null
    value: string | null
    label: string | null
  }

  export type StageTypeCountAggregateOutputType = {
    id: number
    model: number
    order: number
    value: number
    label: number
    _all: number
  }


  export type StageTypeAvgAggregateInputType = {
    order?: true
  }

  export type StageTypeSumAggregateInputType = {
    order?: true
  }

  export type StageTypeMinAggregateInputType = {
    id?: true
    model?: true
    order?: true
    value?: true
    label?: true
  }

  export type StageTypeMaxAggregateInputType = {
    id?: true
    model?: true
    order?: true
    value?: true
    label?: true
  }

  export type StageTypeCountAggregateInputType = {
    id?: true
    model?: true
    order?: true
    value?: true
    label?: true
    _all?: true
  }

  export type StageTypeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StageType to aggregate.
     */
    where?: StageTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StageTypes to fetch.
     */
    orderBy?: StageTypeOrderByWithRelationInput | StageTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: StageTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StageTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StageTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned StageTypes
    **/
    _count?: true | StageTypeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: StageTypeAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: StageTypeSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: StageTypeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: StageTypeMaxAggregateInputType
  }

  export type GetStageTypeAggregateType<T extends StageTypeAggregateArgs> = {
        [P in keyof T & keyof AggregateStageType]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateStageType[P]>
      : GetScalarType<T[P], AggregateStageType[P]>
  }




  export type StageTypeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: StageTypeWhereInput
    orderBy?: StageTypeOrderByWithAggregationInput | StageTypeOrderByWithAggregationInput[]
    by: StageTypeScalarFieldEnum[] | StageTypeScalarFieldEnum
    having?: StageTypeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: StageTypeCountAggregateInputType | true
    _avg?: StageTypeAvgAggregateInputType
    _sum?: StageTypeSumAggregateInputType
    _min?: StageTypeMinAggregateInputType
    _max?: StageTypeMaxAggregateInputType
  }

  export type StageTypeGroupByOutputType = {
    id: string
    model: string
    order: number
    value: string
    label: string
    _count: StageTypeCountAggregateOutputType | null
    _avg: StageTypeAvgAggregateOutputType | null
    _sum: StageTypeSumAggregateOutputType | null
    _min: StageTypeMinAggregateOutputType | null
    _max: StageTypeMaxAggregateOutputType | null
  }

  type GetStageTypeGroupByPayload<T extends StageTypeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<StageTypeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof StageTypeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], StageTypeGroupByOutputType[P]>
            : GetScalarType<T[P], StageTypeGroupByOutputType[P]>
        }
      >
    >


  export type StageTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    model?: boolean
    order?: boolean
    value?: boolean
    label?: boolean
    stages?: boolean | StageType$stagesArgs<ExtArgs>
    _count?: boolean | StageTypeCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["stageType"]>

  export type StageTypeSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    model?: boolean
    order?: boolean
    value?: boolean
    label?: boolean
  }, ExtArgs["result"]["stageType"]>

  export type StageTypeSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    model?: boolean
    order?: boolean
    value?: boolean
    label?: boolean
  }, ExtArgs["result"]["stageType"]>

  export type StageTypeSelectScalar = {
    id?: boolean
    model?: boolean
    order?: boolean
    value?: boolean
    label?: boolean
  }

  export type StageTypeOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "model" | "order" | "value" | "label", ExtArgs["result"]["stageType"]>
  export type StageTypeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    stages?: boolean | StageType$stagesArgs<ExtArgs>
    _count?: boolean | StageTypeCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type StageTypeIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type StageTypeIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $StageTypePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "StageType"
    objects: {
      stages: Prisma.$StagePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      model: string
      order: number
      value: string
      label: string
    }, ExtArgs["result"]["stageType"]>
    composites: {}
  }

  type StageTypeGetPayload<S extends boolean | null | undefined | StageTypeDefaultArgs> = $Result.GetResult<Prisma.$StageTypePayload, S>

  type StageTypeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<StageTypeFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: StageTypeCountAggregateInputType | true
    }

  export interface StageTypeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['StageType'], meta: { name: 'StageType' } }
    /**
     * Find zero or one StageType that matches the filter.
     * @param {StageTypeFindUniqueArgs} args - Arguments to find a StageType
     * @example
     * // Get one StageType
     * const stageType = await prisma.stageType.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends StageTypeFindUniqueArgs>(args: SelectSubset<T, StageTypeFindUniqueArgs<ExtArgs>>): Prisma__StageTypeClient<$Result.GetResult<Prisma.$StageTypePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one StageType that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {StageTypeFindUniqueOrThrowArgs} args - Arguments to find a StageType
     * @example
     * // Get one StageType
     * const stageType = await prisma.stageType.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends StageTypeFindUniqueOrThrowArgs>(args: SelectSubset<T, StageTypeFindUniqueOrThrowArgs<ExtArgs>>): Prisma__StageTypeClient<$Result.GetResult<Prisma.$StageTypePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StageType that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageTypeFindFirstArgs} args - Arguments to find a StageType
     * @example
     * // Get one StageType
     * const stageType = await prisma.stageType.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends StageTypeFindFirstArgs>(args?: SelectSubset<T, StageTypeFindFirstArgs<ExtArgs>>): Prisma__StageTypeClient<$Result.GetResult<Prisma.$StageTypePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first StageType that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageTypeFindFirstOrThrowArgs} args - Arguments to find a StageType
     * @example
     * // Get one StageType
     * const stageType = await prisma.stageType.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends StageTypeFindFirstOrThrowArgs>(args?: SelectSubset<T, StageTypeFindFirstOrThrowArgs<ExtArgs>>): Prisma__StageTypeClient<$Result.GetResult<Prisma.$StageTypePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more StageTypes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageTypeFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all StageTypes
     * const stageTypes = await prisma.stageType.findMany()
     * 
     * // Get first 10 StageTypes
     * const stageTypes = await prisma.stageType.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const stageTypeWithIdOnly = await prisma.stageType.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends StageTypeFindManyArgs>(args?: SelectSubset<T, StageTypeFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StageTypePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a StageType.
     * @param {StageTypeCreateArgs} args - Arguments to create a StageType.
     * @example
     * // Create one StageType
     * const StageType = await prisma.stageType.create({
     *   data: {
     *     // ... data to create a StageType
     *   }
     * })
     * 
     */
    create<T extends StageTypeCreateArgs>(args: SelectSubset<T, StageTypeCreateArgs<ExtArgs>>): Prisma__StageTypeClient<$Result.GetResult<Prisma.$StageTypePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many StageTypes.
     * @param {StageTypeCreateManyArgs} args - Arguments to create many StageTypes.
     * @example
     * // Create many StageTypes
     * const stageType = await prisma.stageType.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends StageTypeCreateManyArgs>(args?: SelectSubset<T, StageTypeCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many StageTypes and returns the data saved in the database.
     * @param {StageTypeCreateManyAndReturnArgs} args - Arguments to create many StageTypes.
     * @example
     * // Create many StageTypes
     * const stageType = await prisma.stageType.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many StageTypes and only return the `id`
     * const stageTypeWithIdOnly = await prisma.stageType.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends StageTypeCreateManyAndReturnArgs>(args?: SelectSubset<T, StageTypeCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StageTypePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a StageType.
     * @param {StageTypeDeleteArgs} args - Arguments to delete one StageType.
     * @example
     * // Delete one StageType
     * const StageType = await prisma.stageType.delete({
     *   where: {
     *     // ... filter to delete one StageType
     *   }
     * })
     * 
     */
    delete<T extends StageTypeDeleteArgs>(args: SelectSubset<T, StageTypeDeleteArgs<ExtArgs>>): Prisma__StageTypeClient<$Result.GetResult<Prisma.$StageTypePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one StageType.
     * @param {StageTypeUpdateArgs} args - Arguments to update one StageType.
     * @example
     * // Update one StageType
     * const stageType = await prisma.stageType.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends StageTypeUpdateArgs>(args: SelectSubset<T, StageTypeUpdateArgs<ExtArgs>>): Prisma__StageTypeClient<$Result.GetResult<Prisma.$StageTypePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more StageTypes.
     * @param {StageTypeDeleteManyArgs} args - Arguments to filter StageTypes to delete.
     * @example
     * // Delete a few StageTypes
     * const { count } = await prisma.stageType.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends StageTypeDeleteManyArgs>(args?: SelectSubset<T, StageTypeDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StageTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageTypeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many StageTypes
     * const stageType = await prisma.stageType.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends StageTypeUpdateManyArgs>(args: SelectSubset<T, StageTypeUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more StageTypes and returns the data updated in the database.
     * @param {StageTypeUpdateManyAndReturnArgs} args - Arguments to update many StageTypes.
     * @example
     * // Update many StageTypes
     * const stageType = await prisma.stageType.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more StageTypes and only return the `id`
     * const stageTypeWithIdOnly = await prisma.stageType.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends StageTypeUpdateManyAndReturnArgs>(args: SelectSubset<T, StageTypeUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StageTypePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one StageType.
     * @param {StageTypeUpsertArgs} args - Arguments to update or create a StageType.
     * @example
     * // Update or create a StageType
     * const stageType = await prisma.stageType.upsert({
     *   create: {
     *     // ... data to create a StageType
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the StageType we want to update
     *   }
     * })
     */
    upsert<T extends StageTypeUpsertArgs>(args: SelectSubset<T, StageTypeUpsertArgs<ExtArgs>>): Prisma__StageTypeClient<$Result.GetResult<Prisma.$StageTypePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of StageTypes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageTypeCountArgs} args - Arguments to filter StageTypes to count.
     * @example
     * // Count the number of StageTypes
     * const count = await prisma.stageType.count({
     *   where: {
     *     // ... the filter for the StageTypes we want to count
     *   }
     * })
    **/
    count<T extends StageTypeCountArgs>(
      args?: Subset<T, StageTypeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], StageTypeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a StageType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageTypeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends StageTypeAggregateArgs>(args: Subset<T, StageTypeAggregateArgs>): Prisma.PrismaPromise<GetStageTypeAggregateType<T>>

    /**
     * Group by StageType.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {StageTypeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends StageTypeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: StageTypeGroupByArgs['orderBy'] }
        : { orderBy?: StageTypeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, StageTypeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetStageTypeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the StageType model
   */
  readonly fields: StageTypeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for StageType.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__StageTypeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    stages<T extends StageType$stagesArgs<ExtArgs> = {}>(args?: Subset<T, StageType$stagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the StageType model
   */
  interface StageTypeFieldRefs {
    readonly id: FieldRef<"StageType", 'String'>
    readonly model: FieldRef<"StageType", 'String'>
    readonly order: FieldRef<"StageType", 'Int'>
    readonly value: FieldRef<"StageType", 'String'>
    readonly label: FieldRef<"StageType", 'String'>
  }
    

  // Custom InputTypes
  /**
   * StageType findUnique
   */
  export type StageTypeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StageType
     */
    select?: StageTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StageType
     */
    omit?: StageTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageTypeInclude<ExtArgs> | null
    /**
     * Filter, which StageType to fetch.
     */
    where: StageTypeWhereUniqueInput
  }

  /**
   * StageType findUniqueOrThrow
   */
  export type StageTypeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StageType
     */
    select?: StageTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StageType
     */
    omit?: StageTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageTypeInclude<ExtArgs> | null
    /**
     * Filter, which StageType to fetch.
     */
    where: StageTypeWhereUniqueInput
  }

  /**
   * StageType findFirst
   */
  export type StageTypeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StageType
     */
    select?: StageTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StageType
     */
    omit?: StageTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageTypeInclude<ExtArgs> | null
    /**
     * Filter, which StageType to fetch.
     */
    where?: StageTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StageTypes to fetch.
     */
    orderBy?: StageTypeOrderByWithRelationInput | StageTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StageTypes.
     */
    cursor?: StageTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StageTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StageTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StageTypes.
     */
    distinct?: StageTypeScalarFieldEnum | StageTypeScalarFieldEnum[]
  }

  /**
   * StageType findFirstOrThrow
   */
  export type StageTypeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StageType
     */
    select?: StageTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StageType
     */
    omit?: StageTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageTypeInclude<ExtArgs> | null
    /**
     * Filter, which StageType to fetch.
     */
    where?: StageTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StageTypes to fetch.
     */
    orderBy?: StageTypeOrderByWithRelationInput | StageTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for StageTypes.
     */
    cursor?: StageTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StageTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StageTypes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of StageTypes.
     */
    distinct?: StageTypeScalarFieldEnum | StageTypeScalarFieldEnum[]
  }

  /**
   * StageType findMany
   */
  export type StageTypeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StageType
     */
    select?: StageTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StageType
     */
    omit?: StageTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageTypeInclude<ExtArgs> | null
    /**
     * Filter, which StageTypes to fetch.
     */
    where?: StageTypeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of StageTypes to fetch.
     */
    orderBy?: StageTypeOrderByWithRelationInput | StageTypeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing StageTypes.
     */
    cursor?: StageTypeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` StageTypes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` StageTypes.
     */
    skip?: number
    distinct?: StageTypeScalarFieldEnum | StageTypeScalarFieldEnum[]
  }

  /**
   * StageType create
   */
  export type StageTypeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StageType
     */
    select?: StageTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StageType
     */
    omit?: StageTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageTypeInclude<ExtArgs> | null
    /**
     * The data needed to create a StageType.
     */
    data: XOR<StageTypeCreateInput, StageTypeUncheckedCreateInput>
  }

  /**
   * StageType createMany
   */
  export type StageTypeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many StageTypes.
     */
    data: StageTypeCreateManyInput | StageTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StageType createManyAndReturn
   */
  export type StageTypeCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StageType
     */
    select?: StageTypeSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StageType
     */
    omit?: StageTypeOmit<ExtArgs> | null
    /**
     * The data used to create many StageTypes.
     */
    data: StageTypeCreateManyInput | StageTypeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * StageType update
   */
  export type StageTypeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StageType
     */
    select?: StageTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StageType
     */
    omit?: StageTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageTypeInclude<ExtArgs> | null
    /**
     * The data needed to update a StageType.
     */
    data: XOR<StageTypeUpdateInput, StageTypeUncheckedUpdateInput>
    /**
     * Choose, which StageType to update.
     */
    where: StageTypeWhereUniqueInput
  }

  /**
   * StageType updateMany
   */
  export type StageTypeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update StageTypes.
     */
    data: XOR<StageTypeUpdateManyMutationInput, StageTypeUncheckedUpdateManyInput>
    /**
     * Filter which StageTypes to update
     */
    where?: StageTypeWhereInput
    /**
     * Limit how many StageTypes to update.
     */
    limit?: number
  }

  /**
   * StageType updateManyAndReturn
   */
  export type StageTypeUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StageType
     */
    select?: StageTypeSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the StageType
     */
    omit?: StageTypeOmit<ExtArgs> | null
    /**
     * The data used to update StageTypes.
     */
    data: XOR<StageTypeUpdateManyMutationInput, StageTypeUncheckedUpdateManyInput>
    /**
     * Filter which StageTypes to update
     */
    where?: StageTypeWhereInput
    /**
     * Limit how many StageTypes to update.
     */
    limit?: number
  }

  /**
   * StageType upsert
   */
  export type StageTypeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StageType
     */
    select?: StageTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StageType
     */
    omit?: StageTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageTypeInclude<ExtArgs> | null
    /**
     * The filter to search for the StageType to update in case it exists.
     */
    where: StageTypeWhereUniqueInput
    /**
     * In case the StageType found by the `where` argument doesn't exist, create a new StageType with this data.
     */
    create: XOR<StageTypeCreateInput, StageTypeUncheckedCreateInput>
    /**
     * In case the StageType was found with the provided `where` argument, update it with this data.
     */
    update: XOR<StageTypeUpdateInput, StageTypeUncheckedUpdateInput>
  }

  /**
   * StageType delete
   */
  export type StageTypeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StageType
     */
    select?: StageTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StageType
     */
    omit?: StageTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageTypeInclude<ExtArgs> | null
    /**
     * Filter which StageType to delete.
     */
    where: StageTypeWhereUniqueInput
  }

  /**
   * StageType deleteMany
   */
  export type StageTypeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which StageTypes to delete
     */
    where?: StageTypeWhereInput
    /**
     * Limit how many StageTypes to delete.
     */
    limit?: number
  }

  /**
   * StageType.stages
   */
  export type StageType$stagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    where?: StageWhereInput
    orderBy?: StageOrderByWithRelationInput | StageOrderByWithRelationInput[]
    cursor?: StageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StageScalarFieldEnum | StageScalarFieldEnum[]
  }

  /**
   * StageType without action
   */
  export type StageTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the StageType
     */
    select?: StageTypeSelect<ExtArgs> | null
    /**
     * Omit specific fields from the StageType
     */
    omit?: StageTypeOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageTypeInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
    status: $Enums.UserStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    departmentId: string | null
    organizationId: string | null
    roleId: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    username: string | null
    password: string | null
    status: $Enums.UserStatus | null
    createdAt: Date | null
    updatedAt: Date | null
    departmentId: string | null
    organizationId: string | null
    roleId: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    password: number
    status: number
    createdAt: number
    updatedAt: number
    departmentId: number
    organizationId: number
    roleId: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    password?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    departmentId?: true
    organizationId?: true
    roleId?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    password?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    departmentId?: true
    organizationId?: true
    roleId?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    password?: true
    status?: true
    createdAt?: true
    updatedAt?: true
    departmentId?: true
    organizationId?: true
    roleId?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    username: string
    password: string
    status: $Enums.UserStatus
    createdAt: Date | null
    updatedAt: Date | null
    departmentId: string | null
    organizationId: string | null
    roleId: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    departmentId?: boolean
    organizationId?: boolean
    roleId?: boolean
    department?: boolean | User$departmentArgs<ExtArgs>
    organization?: boolean | User$organizationArgs<ExtArgs>
    role?: boolean | User$roleArgs<ExtArgs>
    permissions?: boolean | User$permissionsArgs<ExtArgs>
    profile?: boolean | User$profileArgs<ExtArgs>
    CreatorNote?: boolean | User$CreatorNoteArgs<ExtArgs>
    UpdaterNote?: boolean | User$UpdaterNoteArgs<ExtArgs>
    CreatorStage?: boolean | User$CreatorStageArgs<ExtArgs>
    UpdaterStage?: boolean | User$UpdaterStageArgs<ExtArgs>
    CreatorReport?: boolean | User$CreatorReportArgs<ExtArgs>
    UpdaterReport?: boolean | User$UpdaterReportArgs<ExtArgs>
    CreatorReportCategory?: boolean | User$CreatorReportCategoryArgs<ExtArgs>
    UpdaterReportCategory?: boolean | User$UpdaterReportCategoryArgs<ExtArgs>
    CreatorDepartment?: boolean | User$CreatorDepartmentArgs<ExtArgs>
    UpdaterDepartment?: boolean | User$UpdaterDepartmentArgs<ExtArgs>
    CreatorPermission?: boolean | User$CreatorPermissionArgs<ExtArgs>
    UpdaterPermission?: boolean | User$UpdaterPermissionArgs<ExtArgs>
    CreatorDepartmentPermission?: boolean | User$CreatorDepartmentPermissionArgs<ExtArgs>
    UpdaterDepartmentPermission?: boolean | User$UpdaterDepartmentPermissionArgs<ExtArgs>
    CreatorUserPermission?: boolean | User$CreatorUserPermissionArgs<ExtArgs>
    UpdaterUserPermission?: boolean | User$UpdaterUserPermissionArgs<ExtArgs>
    CreatorProfile?: boolean | User$CreatorProfileArgs<ExtArgs>
    UpdaterProfile?: boolean | User$UpdaterProfileArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    departmentId?: boolean
    organizationId?: boolean
    roleId?: boolean
    department?: boolean | User$departmentArgs<ExtArgs>
    organization?: boolean | User$organizationArgs<ExtArgs>
    role?: boolean | User$roleArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    password?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    departmentId?: boolean
    organizationId?: boolean
    roleId?: boolean
    department?: boolean | User$departmentArgs<ExtArgs>
    organization?: boolean | User$organizationArgs<ExtArgs>
    role?: boolean | User$roleArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    password?: boolean
    status?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    departmentId?: boolean
    organizationId?: boolean
    roleId?: boolean
  }

  export type UserOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "username" | "password" | "status" | "createdAt" | "updatedAt" | "departmentId" | "organizationId" | "roleId", ExtArgs["result"]["user"]>
  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | User$departmentArgs<ExtArgs>
    organization?: boolean | User$organizationArgs<ExtArgs>
    role?: boolean | User$roleArgs<ExtArgs>
    permissions?: boolean | User$permissionsArgs<ExtArgs>
    profile?: boolean | User$profileArgs<ExtArgs>
    CreatorNote?: boolean | User$CreatorNoteArgs<ExtArgs>
    UpdaterNote?: boolean | User$UpdaterNoteArgs<ExtArgs>
    CreatorStage?: boolean | User$CreatorStageArgs<ExtArgs>
    UpdaterStage?: boolean | User$UpdaterStageArgs<ExtArgs>
    CreatorReport?: boolean | User$CreatorReportArgs<ExtArgs>
    UpdaterReport?: boolean | User$UpdaterReportArgs<ExtArgs>
    CreatorReportCategory?: boolean | User$CreatorReportCategoryArgs<ExtArgs>
    UpdaterReportCategory?: boolean | User$UpdaterReportCategoryArgs<ExtArgs>
    CreatorDepartment?: boolean | User$CreatorDepartmentArgs<ExtArgs>
    UpdaterDepartment?: boolean | User$UpdaterDepartmentArgs<ExtArgs>
    CreatorPermission?: boolean | User$CreatorPermissionArgs<ExtArgs>
    UpdaterPermission?: boolean | User$UpdaterPermissionArgs<ExtArgs>
    CreatorDepartmentPermission?: boolean | User$CreatorDepartmentPermissionArgs<ExtArgs>
    UpdaterDepartmentPermission?: boolean | User$UpdaterDepartmentPermissionArgs<ExtArgs>
    CreatorUserPermission?: boolean | User$CreatorUserPermissionArgs<ExtArgs>
    UpdaterUserPermission?: boolean | User$UpdaterUserPermissionArgs<ExtArgs>
    CreatorProfile?: boolean | User$CreatorProfileArgs<ExtArgs>
    UpdaterProfile?: boolean | User$UpdaterProfileArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type UserIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | User$departmentArgs<ExtArgs>
    organization?: boolean | User$organizationArgs<ExtArgs>
    role?: boolean | User$roleArgs<ExtArgs>
  }
  export type UserIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    department?: boolean | User$departmentArgs<ExtArgs>
    organization?: boolean | User$organizationArgs<ExtArgs>
    role?: boolean | User$roleArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      department: Prisma.$DepartmentPayload<ExtArgs> | null
      organization: Prisma.$OrganizationPayload<ExtArgs> | null
      role: Prisma.$RolePayload<ExtArgs> | null
      permissions: Prisma.$UserPermissionPayload<ExtArgs>[]
      profile: Prisma.$ProfilePayload<ExtArgs> | null
      CreatorNote: Prisma.$NotePayload<ExtArgs>[]
      UpdaterNote: Prisma.$NotePayload<ExtArgs>[]
      CreatorStage: Prisma.$StagePayload<ExtArgs>[]
      UpdaterStage: Prisma.$StagePayload<ExtArgs>[]
      CreatorReport: Prisma.$ReportPayload<ExtArgs>[]
      UpdaterReport: Prisma.$ReportPayload<ExtArgs>[]
      CreatorReportCategory: Prisma.$ReportCategoryPayload<ExtArgs>[]
      UpdaterReportCategory: Prisma.$ReportCategoryPayload<ExtArgs>[]
      CreatorDepartment: Prisma.$DepartmentPayload<ExtArgs>[]
      UpdaterDepartment: Prisma.$DepartmentPayload<ExtArgs>[]
      CreatorPermission: Prisma.$PermissionPayload<ExtArgs>[]
      UpdaterPermission: Prisma.$PermissionPayload<ExtArgs>[]
      CreatorDepartmentPermission: Prisma.$DepartmentPermissionPayload<ExtArgs>[]
      UpdaterDepartmentPermission: Prisma.$DepartmentPermissionPayload<ExtArgs>[]
      CreatorUserPermission: Prisma.$UserPermissionPayload<ExtArgs>[]
      UpdaterUserPermission: Prisma.$UserPermissionPayload<ExtArgs>[]
      CreatorProfile: Prisma.$ProfilePayload<ExtArgs>[]
      UpdaterProfile: Prisma.$ProfilePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      password: string
      status: $Enums.UserStatus
      createdAt: Date | null
      updatedAt: Date | null
      departmentId: string | null
      organizationId: string | null
      roleId: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Users and returns the data saved in the database.
     * @param {UserCreateManyAndReturnArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Users and only return the `id`
     * const userWithIdOnly = await prisma.user.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserCreateManyAndReturnArgs>(args?: SelectSubset<T, UserCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users and returns the data updated in the database.
     * @param {UserUpdateManyAndReturnArgs} args - Arguments to update many Users.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Users and only return the `id`
     * const userWithIdOnly = await prisma.user.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserUpdateManyAndReturnArgs>(args: SelectSubset<T, UserUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    department<T extends User$departmentArgs<ExtArgs> = {}>(args?: Subset<T, User$departmentArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    organization<T extends User$organizationArgs<ExtArgs> = {}>(args?: Subset<T, User$organizationArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    role<T extends User$roleArgs<ExtArgs> = {}>(args?: Subset<T, User$roleArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    permissions<T extends User$permissionsArgs<ExtArgs> = {}>(args?: Subset<T, User$permissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    profile<T extends User$profileArgs<ExtArgs> = {}>(args?: Subset<T, User$profileArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    CreatorNote<T extends User$CreatorNoteArgs<ExtArgs> = {}>(args?: Subset<T, User$CreatorNoteArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    UpdaterNote<T extends User$UpdaterNoteArgs<ExtArgs> = {}>(args?: Subset<T, User$UpdaterNoteArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    CreatorStage<T extends User$CreatorStageArgs<ExtArgs> = {}>(args?: Subset<T, User$CreatorStageArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    UpdaterStage<T extends User$UpdaterStageArgs<ExtArgs> = {}>(args?: Subset<T, User$UpdaterStageArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$StagePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    CreatorReport<T extends User$CreatorReportArgs<ExtArgs> = {}>(args?: Subset<T, User$CreatorReportArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    UpdaterReport<T extends User$UpdaterReportArgs<ExtArgs> = {}>(args?: Subset<T, User$UpdaterReportArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    CreatorReportCategory<T extends User$CreatorReportCategoryArgs<ExtArgs> = {}>(args?: Subset<T, User$CreatorReportCategoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    UpdaterReportCategory<T extends User$UpdaterReportCategoryArgs<ExtArgs> = {}>(args?: Subset<T, User$UpdaterReportCategoryArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportCategoryPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    CreatorDepartment<T extends User$CreatorDepartmentArgs<ExtArgs> = {}>(args?: Subset<T, User$CreatorDepartmentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    UpdaterDepartment<T extends User$UpdaterDepartmentArgs<ExtArgs> = {}>(args?: Subset<T, User$UpdaterDepartmentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    CreatorPermission<T extends User$CreatorPermissionArgs<ExtArgs> = {}>(args?: Subset<T, User$CreatorPermissionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    UpdaterPermission<T extends User$UpdaterPermissionArgs<ExtArgs> = {}>(args?: Subset<T, User$UpdaterPermissionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    CreatorDepartmentPermission<T extends User$CreatorDepartmentPermissionArgs<ExtArgs> = {}>(args?: Subset<T, User$CreatorDepartmentPermissionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    UpdaterDepartmentPermission<T extends User$UpdaterDepartmentPermissionArgs<ExtArgs> = {}>(args?: Subset<T, User$UpdaterDepartmentPermissionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    CreatorUserPermission<T extends User$CreatorUserPermissionArgs<ExtArgs> = {}>(args?: Subset<T, User$CreatorUserPermissionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    UpdaterUserPermission<T extends User$UpdaterUserPermissionArgs<ExtArgs> = {}>(args?: Subset<T, User$UpdaterUserPermissionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    CreatorProfile<T extends User$CreatorProfileArgs<ExtArgs> = {}>(args?: Subset<T, User$CreatorProfileArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    UpdaterProfile<T extends User$UpdaterProfileArgs<ExtArgs> = {}>(args?: Subset<T, User$UpdaterProfileArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly status: FieldRef<"User", 'UserStatus'>
    readonly createdAt: FieldRef<"User", 'DateTime'>
    readonly updatedAt: FieldRef<"User", 'DateTime'>
    readonly departmentId: FieldRef<"User", 'String'>
    readonly organizationId: FieldRef<"User", 'String'>
    readonly roleId: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User createManyAndReturn
   */
  export type UserCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
  }

  /**
   * User updateManyAndReturn
   */
  export type UserUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
    /**
     * Limit how many Users to delete.
     */
    limit?: number
  }

  /**
   * User.department
   */
  export type User$departmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
  }

  /**
   * User.organization
   */
  export type User$organizationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    where?: OrganizationWhereInput
  }

  /**
   * User.role
   */
  export type User$roleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    where?: RoleWhereInput
  }

  /**
   * User.permissions
   */
  export type User$permissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    where?: UserPermissionWhereInput
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    cursor?: UserPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * User.profile
   */
  export type User$profileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    where?: ProfileWhereInput
  }

  /**
   * User.CreatorNote
   */
  export type User$CreatorNoteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    where?: NoteWhereInput
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    cursor?: NoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * User.UpdaterNote
   */
  export type User$UpdaterNoteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Note
     */
    select?: NoteSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Note
     */
    omit?: NoteOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NoteInclude<ExtArgs> | null
    where?: NoteWhereInput
    orderBy?: NoteOrderByWithRelationInput | NoteOrderByWithRelationInput[]
    cursor?: NoteWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NoteScalarFieldEnum | NoteScalarFieldEnum[]
  }

  /**
   * User.CreatorStage
   */
  export type User$CreatorStageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    where?: StageWhereInput
    orderBy?: StageOrderByWithRelationInput | StageOrderByWithRelationInput[]
    cursor?: StageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StageScalarFieldEnum | StageScalarFieldEnum[]
  }

  /**
   * User.UpdaterStage
   */
  export type User$UpdaterStageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Stage
     */
    select?: StageSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Stage
     */
    omit?: StageOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: StageInclude<ExtArgs> | null
    where?: StageWhereInput
    orderBy?: StageOrderByWithRelationInput | StageOrderByWithRelationInput[]
    cursor?: StageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: StageScalarFieldEnum | StageScalarFieldEnum[]
  }

  /**
   * User.CreatorReport
   */
  export type User$CreatorReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    cursor?: ReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * User.UpdaterReport
   */
  export type User$UpdaterReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    cursor?: ReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * User.CreatorReportCategory
   */
  export type User$CreatorReportCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCategory
     */
    select?: ReportCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportCategory
     */
    omit?: ReportCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportCategoryInclude<ExtArgs> | null
    where?: ReportCategoryWhereInput
    orderBy?: ReportCategoryOrderByWithRelationInput | ReportCategoryOrderByWithRelationInput[]
    cursor?: ReportCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportCategoryScalarFieldEnum | ReportCategoryScalarFieldEnum[]
  }

  /**
   * User.UpdaterReportCategory
   */
  export type User$UpdaterReportCategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ReportCategory
     */
    select?: ReportCategorySelect<ExtArgs> | null
    /**
     * Omit specific fields from the ReportCategory
     */
    omit?: ReportCategoryOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportCategoryInclude<ExtArgs> | null
    where?: ReportCategoryWhereInput
    orderBy?: ReportCategoryOrderByWithRelationInput | ReportCategoryOrderByWithRelationInput[]
    cursor?: ReportCategoryWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportCategoryScalarFieldEnum | ReportCategoryScalarFieldEnum[]
  }

  /**
   * User.CreatorDepartment
   */
  export type User$CreatorDepartmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    cursor?: DepartmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * User.UpdaterDepartment
   */
  export type User$UpdaterDepartmentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    cursor?: DepartmentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * User.CreatorPermission
   */
  export type User$CreatorPermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    where?: PermissionWhereInput
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    cursor?: PermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * User.UpdaterPermission
   */
  export type User$UpdaterPermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    where?: PermissionWhereInput
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    cursor?: PermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * User.CreatorDepartmentPermission
   */
  export type User$CreatorDepartmentPermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentPermission
     */
    select?: DepartmentPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentPermission
     */
    omit?: DepartmentPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentPermissionInclude<ExtArgs> | null
    where?: DepartmentPermissionWhereInput
    orderBy?: DepartmentPermissionOrderByWithRelationInput | DepartmentPermissionOrderByWithRelationInput[]
    cursor?: DepartmentPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentPermissionScalarFieldEnum | DepartmentPermissionScalarFieldEnum[]
  }

  /**
   * User.UpdaterDepartmentPermission
   */
  export type User$UpdaterDepartmentPermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentPermission
     */
    select?: DepartmentPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentPermission
     */
    omit?: DepartmentPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentPermissionInclude<ExtArgs> | null
    where?: DepartmentPermissionWhereInput
    orderBy?: DepartmentPermissionOrderByWithRelationInput | DepartmentPermissionOrderByWithRelationInput[]
    cursor?: DepartmentPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentPermissionScalarFieldEnum | DepartmentPermissionScalarFieldEnum[]
  }

  /**
   * User.CreatorUserPermission
   */
  export type User$CreatorUserPermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    where?: UserPermissionWhereInput
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    cursor?: UserPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * User.UpdaterUserPermission
   */
  export type User$UpdaterUserPermissionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    where?: UserPermissionWhereInput
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    cursor?: UserPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * User.CreatorProfile
   */
  export type User$CreatorProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    cursor?: ProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * User.UpdaterProfile
   */
  export type User$UpdaterProfileArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    cursor?: ProfileWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Organization
   */

  export type AggregateOrganization = {
    _count: OrganizationCountAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  export type OrganizationMinAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
  }

  export type OrganizationMaxAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
  }

  export type OrganizationCountAggregateOutputType = {
    id: number
    name: number
    code: number
    _all: number
  }


  export type OrganizationMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
  }

  export type OrganizationMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
  }

  export type OrganizationCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    _all?: true
  }

  export type OrganizationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Organization to aggregate.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Organizations
    **/
    _count?: true | OrganizationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OrganizationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OrganizationMaxAggregateInputType
  }

  export type GetOrganizationAggregateType<T extends OrganizationAggregateArgs> = {
        [P in keyof T & keyof AggregateOrganization]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOrganization[P]>
      : GetScalarType<T[P], AggregateOrganization[P]>
  }




  export type OrganizationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OrganizationWhereInput
    orderBy?: OrganizationOrderByWithAggregationInput | OrganizationOrderByWithAggregationInput[]
    by: OrganizationScalarFieldEnum[] | OrganizationScalarFieldEnum
    having?: OrganizationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OrganizationCountAggregateInputType | true
    _min?: OrganizationMinAggregateInputType
    _max?: OrganizationMaxAggregateInputType
  }

  export type OrganizationGroupByOutputType = {
    id: string
    name: string
    code: string
    _count: OrganizationCountAggregateOutputType | null
    _min: OrganizationMinAggregateOutputType | null
    _max: OrganizationMaxAggregateOutputType | null
  }

  type GetOrganizationGroupByPayload<T extends OrganizationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OrganizationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OrganizationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
            : GetScalarType<T[P], OrganizationGroupByOutputType[P]>
        }
      >
    >


  export type OrganizationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    users?: boolean | Organization$usersArgs<ExtArgs>
    Report?: boolean | Organization$ReportArgs<ExtArgs>
    _count?: boolean | OrganizationCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
  }, ExtArgs["result"]["organization"]>

  export type OrganizationSelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
  }

  export type OrganizationOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "code", ExtArgs["result"]["organization"]>
  export type OrganizationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Organization$usersArgs<ExtArgs>
    Report?: boolean | Organization$ReportArgs<ExtArgs>
    _count?: boolean | OrganizationCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type OrganizationIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type OrganizationIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $OrganizationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Organization"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
      Report: Prisma.$ReportPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      code: string
    }, ExtArgs["result"]["organization"]>
    composites: {}
  }

  type OrganizationGetPayload<S extends boolean | null | undefined | OrganizationDefaultArgs> = $Result.GetResult<Prisma.$OrganizationPayload, S>

  type OrganizationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<OrganizationFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: OrganizationCountAggregateInputType | true
    }

  export interface OrganizationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Organization'], meta: { name: 'Organization' } }
    /**
     * Find zero or one Organization that matches the filter.
     * @param {OrganizationFindUniqueArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OrganizationFindUniqueArgs>(args: SelectSubset<T, OrganizationFindUniqueArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Organization that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {OrganizationFindUniqueOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OrganizationFindUniqueOrThrowArgs>(args: SelectSubset<T, OrganizationFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Organization that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OrganizationFindFirstArgs>(args?: SelectSubset<T, OrganizationFindFirstArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Organization that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindFirstOrThrowArgs} args - Arguments to find a Organization
     * @example
     * // Get one Organization
     * const organization = await prisma.organization.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OrganizationFindFirstOrThrowArgs>(args?: SelectSubset<T, OrganizationFindFirstOrThrowArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Organizations that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Organizations
     * const organizations = await prisma.organization.findMany()
     * 
     * // Get first 10 Organizations
     * const organizations = await prisma.organization.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const organizationWithIdOnly = await prisma.organization.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OrganizationFindManyArgs>(args?: SelectSubset<T, OrganizationFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Organization.
     * @param {OrganizationCreateArgs} args - Arguments to create a Organization.
     * @example
     * // Create one Organization
     * const Organization = await prisma.organization.create({
     *   data: {
     *     // ... data to create a Organization
     *   }
     * })
     * 
     */
    create<T extends OrganizationCreateArgs>(args: SelectSubset<T, OrganizationCreateArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Organizations.
     * @param {OrganizationCreateManyArgs} args - Arguments to create many Organizations.
     * @example
     * // Create many Organizations
     * const organization = await prisma.organization.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OrganizationCreateManyArgs>(args?: SelectSubset<T, OrganizationCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Organizations and returns the data saved in the database.
     * @param {OrganizationCreateManyAndReturnArgs} args - Arguments to create many Organizations.
     * @example
     * // Create many Organizations
     * const organization = await prisma.organization.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Organizations and only return the `id`
     * const organizationWithIdOnly = await prisma.organization.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends OrganizationCreateManyAndReturnArgs>(args?: SelectSubset<T, OrganizationCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Organization.
     * @param {OrganizationDeleteArgs} args - Arguments to delete one Organization.
     * @example
     * // Delete one Organization
     * const Organization = await prisma.organization.delete({
     *   where: {
     *     // ... filter to delete one Organization
     *   }
     * })
     * 
     */
    delete<T extends OrganizationDeleteArgs>(args: SelectSubset<T, OrganizationDeleteArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Organization.
     * @param {OrganizationUpdateArgs} args - Arguments to update one Organization.
     * @example
     * // Update one Organization
     * const organization = await prisma.organization.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OrganizationUpdateArgs>(args: SelectSubset<T, OrganizationUpdateArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Organizations.
     * @param {OrganizationDeleteManyArgs} args - Arguments to filter Organizations to delete.
     * @example
     * // Delete a few Organizations
     * const { count } = await prisma.organization.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OrganizationDeleteManyArgs>(args?: SelectSubset<T, OrganizationDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Organizations
     * const organization = await prisma.organization.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OrganizationUpdateManyArgs>(args: SelectSubset<T, OrganizationUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Organizations and returns the data updated in the database.
     * @param {OrganizationUpdateManyAndReturnArgs} args - Arguments to update many Organizations.
     * @example
     * // Update many Organizations
     * const organization = await prisma.organization.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Organizations and only return the `id`
     * const organizationWithIdOnly = await prisma.organization.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends OrganizationUpdateManyAndReturnArgs>(args: SelectSubset<T, OrganizationUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Organization.
     * @param {OrganizationUpsertArgs} args - Arguments to update or create a Organization.
     * @example
     * // Update or create a Organization
     * const organization = await prisma.organization.upsert({
     *   create: {
     *     // ... data to create a Organization
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Organization we want to update
     *   }
     * })
     */
    upsert<T extends OrganizationUpsertArgs>(args: SelectSubset<T, OrganizationUpsertArgs<ExtArgs>>): Prisma__OrganizationClient<$Result.GetResult<Prisma.$OrganizationPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Organizations.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationCountArgs} args - Arguments to filter Organizations to count.
     * @example
     * // Count the number of Organizations
     * const count = await prisma.organization.count({
     *   where: {
     *     // ... the filter for the Organizations we want to count
     *   }
     * })
    **/
    count<T extends OrganizationCountArgs>(
      args?: Subset<T, OrganizationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OrganizationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OrganizationAggregateArgs>(args: Subset<T, OrganizationAggregateArgs>): Prisma.PrismaPromise<GetOrganizationAggregateType<T>>

    /**
     * Group by Organization.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OrganizationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OrganizationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OrganizationGroupByArgs['orderBy'] }
        : { orderBy?: OrganizationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OrganizationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOrganizationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Organization model
   */
  readonly fields: OrganizationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Organization.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OrganizationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Organization$usersArgs<ExtArgs> = {}>(args?: Subset<T, Organization$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    Report<T extends Organization$ReportArgs<ExtArgs> = {}>(args?: Subset<T, Organization$ReportArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ReportPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Organization model
   */
  interface OrganizationFieldRefs {
    readonly id: FieldRef<"Organization", 'String'>
    readonly name: FieldRef<"Organization", 'String'>
    readonly code: FieldRef<"Organization", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Organization findUnique
   */
  export type OrganizationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findUniqueOrThrow
   */
  export type OrganizationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization findFirst
   */
  export type OrganizationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization findFirstOrThrow
   */
  export type OrganizationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organization to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Organizations.
     */
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization findMany
   */
  export type OrganizationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter, which Organizations to fetch.
     */
    where?: OrganizationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Organizations to fetch.
     */
    orderBy?: OrganizationOrderByWithRelationInput | OrganizationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Organizations.
     */
    cursor?: OrganizationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Organizations from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Organizations.
     */
    skip?: number
    distinct?: OrganizationScalarFieldEnum | OrganizationScalarFieldEnum[]
  }

  /**
   * Organization create
   */
  export type OrganizationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The data needed to create a Organization.
     */
    data: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
  }

  /**
   * Organization createMany
   */
  export type OrganizationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Organizations.
     */
    data: OrganizationCreateManyInput | OrganizationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Organization createManyAndReturn
   */
  export type OrganizationCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * The data used to create many Organizations.
     */
    data: OrganizationCreateManyInput | OrganizationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Organization update
   */
  export type OrganizationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The data needed to update a Organization.
     */
    data: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
    /**
     * Choose, which Organization to update.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization updateMany
   */
  export type OrganizationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Organizations.
     */
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyInput>
    /**
     * Filter which Organizations to update
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to update.
     */
    limit?: number
  }

  /**
   * Organization updateManyAndReturn
   */
  export type OrganizationUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * The data used to update Organizations.
     */
    data: XOR<OrganizationUpdateManyMutationInput, OrganizationUncheckedUpdateManyInput>
    /**
     * Filter which Organizations to update
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to update.
     */
    limit?: number
  }

  /**
   * Organization upsert
   */
  export type OrganizationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * The filter to search for the Organization to update in case it exists.
     */
    where: OrganizationWhereUniqueInput
    /**
     * In case the Organization found by the `where` argument doesn't exist, create a new Organization with this data.
     */
    create: XOR<OrganizationCreateInput, OrganizationUncheckedCreateInput>
    /**
     * In case the Organization was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OrganizationUpdateInput, OrganizationUncheckedUpdateInput>
  }

  /**
   * Organization delete
   */
  export type OrganizationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
    /**
     * Filter which Organization to delete.
     */
    where: OrganizationWhereUniqueInput
  }

  /**
   * Organization deleteMany
   */
  export type OrganizationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Organizations to delete
     */
    where?: OrganizationWhereInput
    /**
     * Limit how many Organizations to delete.
     */
    limit?: number
  }

  /**
   * Organization.users
   */
  export type Organization$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Organization.Report
   */
  export type Organization$ReportArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Report
     */
    select?: ReportSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Report
     */
    omit?: ReportOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ReportInclude<ExtArgs> | null
    where?: ReportWhereInput
    orderBy?: ReportOrderByWithRelationInput | ReportOrderByWithRelationInput[]
    cursor?: ReportWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ReportScalarFieldEnum | ReportScalarFieldEnum[]
  }

  /**
   * Organization without action
   */
  export type OrganizationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Organization
     */
    select?: OrganizationSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Organization
     */
    omit?: OrganizationOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OrganizationInclude<ExtArgs> | null
  }


  /**
   * Model Role
   */

  export type AggregateRole = {
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  export type RoleAvgAggregateOutputType = {
    level: number | null
  }

  export type RoleSumAggregateOutputType = {
    level: number | null
  }

  export type RoleMinAggregateOutputType = {
    id: string | null
    name: string | null
    level: number | null
  }

  export type RoleMaxAggregateOutputType = {
    id: string | null
    name: string | null
    level: number | null
  }

  export type RoleCountAggregateOutputType = {
    id: number
    name: number
    level: number
    _all: number
  }


  export type RoleAvgAggregateInputType = {
    level?: true
  }

  export type RoleSumAggregateInputType = {
    level?: true
  }

  export type RoleMinAggregateInputType = {
    id?: true
    name?: true
    level?: true
  }

  export type RoleMaxAggregateInputType = {
    id?: true
    name?: true
    level?: true
  }

  export type RoleCountAggregateInputType = {
    id?: true
    name?: true
    level?: true
    _all?: true
  }

  export type RoleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Role to aggregate.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Roles
    **/
    _count?: true | RoleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: RoleAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: RoleSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: RoleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: RoleMaxAggregateInputType
  }

  export type GetRoleAggregateType<T extends RoleAggregateArgs> = {
        [P in keyof T & keyof AggregateRole]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateRole[P]>
      : GetScalarType<T[P], AggregateRole[P]>
  }




  export type RoleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: RoleWhereInput
    orderBy?: RoleOrderByWithAggregationInput | RoleOrderByWithAggregationInput[]
    by: RoleScalarFieldEnum[] | RoleScalarFieldEnum
    having?: RoleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: RoleCountAggregateInputType | true
    _avg?: RoleAvgAggregateInputType
    _sum?: RoleSumAggregateInputType
    _min?: RoleMinAggregateInputType
    _max?: RoleMaxAggregateInputType
  }

  export type RoleGroupByOutputType = {
    id: string
    name: string
    level: number
    _count: RoleCountAggregateOutputType | null
    _avg: RoleAvgAggregateOutputType | null
    _sum: RoleSumAggregateOutputType | null
    _min: RoleMinAggregateOutputType | null
    _max: RoleMaxAggregateOutputType | null
  }

  type GetRoleGroupByPayload<T extends RoleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<RoleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof RoleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], RoleGroupByOutputType[P]>
            : GetScalarType<T[P], RoleGroupByOutputType[P]>
        }
      >
    >


  export type RoleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    level?: boolean
    users?: boolean | Role$usersArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["role"]>

  export type RoleSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    level?: boolean
  }, ExtArgs["result"]["role"]>

  export type RoleSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    level?: boolean
  }, ExtArgs["result"]["role"]>

  export type RoleSelectScalar = {
    id?: boolean
    name?: boolean
    level?: boolean
  }

  export type RoleOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "level", ExtArgs["result"]["role"]>
  export type RoleInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    users?: boolean | Role$usersArgs<ExtArgs>
    _count?: boolean | RoleCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type RoleIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type RoleIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $RolePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Role"
    objects: {
      users: Prisma.$UserPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      level: number
    }, ExtArgs["result"]["role"]>
    composites: {}
  }

  type RoleGetPayload<S extends boolean | null | undefined | RoleDefaultArgs> = $Result.GetResult<Prisma.$RolePayload, S>

  type RoleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<RoleFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: RoleCountAggregateInputType | true
    }

  export interface RoleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Role'], meta: { name: 'Role' } }
    /**
     * Find zero or one Role that matches the filter.
     * @param {RoleFindUniqueArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends RoleFindUniqueArgs>(args: SelectSubset<T, RoleFindUniqueArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Role that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {RoleFindUniqueOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends RoleFindUniqueOrThrowArgs>(args: SelectSubset<T, RoleFindUniqueOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Role that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends RoleFindFirstArgs>(args?: SelectSubset<T, RoleFindFirstArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Role that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindFirstOrThrowArgs} args - Arguments to find a Role
     * @example
     * // Get one Role
     * const role = await prisma.role.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends RoleFindFirstOrThrowArgs>(args?: SelectSubset<T, RoleFindFirstOrThrowArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Roles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Roles
     * const roles = await prisma.role.findMany()
     * 
     * // Get first 10 Roles
     * const roles = await prisma.role.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const roleWithIdOnly = await prisma.role.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends RoleFindManyArgs>(args?: SelectSubset<T, RoleFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Role.
     * @param {RoleCreateArgs} args - Arguments to create a Role.
     * @example
     * // Create one Role
     * const Role = await prisma.role.create({
     *   data: {
     *     // ... data to create a Role
     *   }
     * })
     * 
     */
    create<T extends RoleCreateArgs>(args: SelectSubset<T, RoleCreateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Roles.
     * @param {RoleCreateManyArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends RoleCreateManyArgs>(args?: SelectSubset<T, RoleCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Roles and returns the data saved in the database.
     * @param {RoleCreateManyAndReturnArgs} args - Arguments to create many Roles.
     * @example
     * // Create many Roles
     * const role = await prisma.role.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Roles and only return the `id`
     * const roleWithIdOnly = await prisma.role.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends RoleCreateManyAndReturnArgs>(args?: SelectSubset<T, RoleCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Role.
     * @param {RoleDeleteArgs} args - Arguments to delete one Role.
     * @example
     * // Delete one Role
     * const Role = await prisma.role.delete({
     *   where: {
     *     // ... filter to delete one Role
     *   }
     * })
     * 
     */
    delete<T extends RoleDeleteArgs>(args: SelectSubset<T, RoleDeleteArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Role.
     * @param {RoleUpdateArgs} args - Arguments to update one Role.
     * @example
     * // Update one Role
     * const role = await prisma.role.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends RoleUpdateArgs>(args: SelectSubset<T, RoleUpdateArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Roles.
     * @param {RoleDeleteManyArgs} args - Arguments to filter Roles to delete.
     * @example
     * // Delete a few Roles
     * const { count } = await prisma.role.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends RoleDeleteManyArgs>(args?: SelectSubset<T, RoleDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends RoleUpdateManyArgs>(args: SelectSubset<T, RoleUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Roles and returns the data updated in the database.
     * @param {RoleUpdateManyAndReturnArgs} args - Arguments to update many Roles.
     * @example
     * // Update many Roles
     * const role = await prisma.role.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Roles and only return the `id`
     * const roleWithIdOnly = await prisma.role.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends RoleUpdateManyAndReturnArgs>(args: SelectSubset<T, RoleUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Role.
     * @param {RoleUpsertArgs} args - Arguments to update or create a Role.
     * @example
     * // Update or create a Role
     * const role = await prisma.role.upsert({
     *   create: {
     *     // ... data to create a Role
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Role we want to update
     *   }
     * })
     */
    upsert<T extends RoleUpsertArgs>(args: SelectSubset<T, RoleUpsertArgs<ExtArgs>>): Prisma__RoleClient<$Result.GetResult<Prisma.$RolePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Roles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleCountArgs} args - Arguments to filter Roles to count.
     * @example
     * // Count the number of Roles
     * const count = await prisma.role.count({
     *   where: {
     *     // ... the filter for the Roles we want to count
     *   }
     * })
    **/
    count<T extends RoleCountArgs>(
      args?: Subset<T, RoleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], RoleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends RoleAggregateArgs>(args: Subset<T, RoleAggregateArgs>): Prisma.PrismaPromise<GetRoleAggregateType<T>>

    /**
     * Group by Role.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {RoleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends RoleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: RoleGroupByArgs['orderBy'] }
        : { orderBy?: RoleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, RoleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetRoleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Role model
   */
  readonly fields: RoleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Role.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__RoleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    users<T extends Role$usersArgs<ExtArgs> = {}>(args?: Subset<T, Role$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Role model
   */
  interface RoleFieldRefs {
    readonly id: FieldRef<"Role", 'String'>
    readonly name: FieldRef<"Role", 'String'>
    readonly level: FieldRef<"Role", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Role findUnique
   */
  export type RoleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findUniqueOrThrow
   */
  export type RoleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role findFirst
   */
  export type RoleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findFirstOrThrow
   */
  export type RoleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Role to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Roles.
     */
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role findMany
   */
  export type RoleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter, which Roles to fetch.
     */
    where?: RoleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Roles to fetch.
     */
    orderBy?: RoleOrderByWithRelationInput | RoleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Roles.
     */
    cursor?: RoleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Roles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Roles.
     */
    skip?: number
    distinct?: RoleScalarFieldEnum | RoleScalarFieldEnum[]
  }

  /**
   * Role create
   */
  export type RoleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to create a Role.
     */
    data: XOR<RoleCreateInput, RoleUncheckedCreateInput>
  }

  /**
   * Role createMany
   */
  export type RoleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role createManyAndReturn
   */
  export type RoleCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * The data used to create many Roles.
     */
    data: RoleCreateManyInput | RoleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Role update
   */
  export type RoleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The data needed to update a Role.
     */
    data: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
    /**
     * Choose, which Role to update.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role updateMany
   */
  export type RoleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to update.
     */
    limit?: number
  }

  /**
   * Role updateManyAndReturn
   */
  export type RoleUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * The data used to update Roles.
     */
    data: XOR<RoleUpdateManyMutationInput, RoleUncheckedUpdateManyInput>
    /**
     * Filter which Roles to update
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to update.
     */
    limit?: number
  }

  /**
   * Role upsert
   */
  export type RoleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * The filter to search for the Role to update in case it exists.
     */
    where: RoleWhereUniqueInput
    /**
     * In case the Role found by the `where` argument doesn't exist, create a new Role with this data.
     */
    create: XOR<RoleCreateInput, RoleUncheckedCreateInput>
    /**
     * In case the Role was found with the provided `where` argument, update it with this data.
     */
    update: XOR<RoleUpdateInput, RoleUncheckedUpdateInput>
  }

  /**
   * Role delete
   */
  export type RoleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
    /**
     * Filter which Role to delete.
     */
    where: RoleWhereUniqueInput
  }

  /**
   * Role deleteMany
   */
  export type RoleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Roles to delete
     */
    where?: RoleWhereInput
    /**
     * Limit how many Roles to delete.
     */
    limit?: number
  }

  /**
   * Role.users
   */
  export type Role$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Role without action
   */
  export type RoleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Role
     */
    select?: RoleSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Role
     */
    omit?: RoleOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: RoleInclude<ExtArgs> | null
  }


  /**
   * Model Department
   */

  export type AggregateDepartment = {
    _count: DepartmentCountAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  export type DepartmentMinAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    createdById: string | null
    updatedById: string | null
  }

  export type DepartmentMaxAggregateOutputType = {
    id: string | null
    name: string | null
    code: string | null
    createdById: string | null
    updatedById: string | null
  }

  export type DepartmentCountAggregateOutputType = {
    id: number
    name: number
    code: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type DepartmentMinAggregateInputType = {
    id?: true
    name?: true
    code?: true
    createdById?: true
    updatedById?: true
  }

  export type DepartmentMaxAggregateInputType = {
    id?: true
    name?: true
    code?: true
    createdById?: true
    updatedById?: true
  }

  export type DepartmentCountAggregateInputType = {
    id?: true
    name?: true
    code?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type DepartmentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Department to aggregate.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Departments
    **/
    _count?: true | DepartmentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentMaxAggregateInputType
  }

  export type GetDepartmentAggregateType<T extends DepartmentAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartment[P]>
      : GetScalarType<T[P], AggregateDepartment[P]>
  }




  export type DepartmentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentWhereInput
    orderBy?: DepartmentOrderByWithAggregationInput | DepartmentOrderByWithAggregationInput[]
    by: DepartmentScalarFieldEnum[] | DepartmentScalarFieldEnum
    having?: DepartmentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentCountAggregateInputType | true
    _min?: DepartmentMinAggregateInputType
    _max?: DepartmentMaxAggregateInputType
  }

  export type DepartmentGroupByOutputType = {
    id: string
    name: string
    code: string
    createdById: string | null
    updatedById: string | null
    _count: DepartmentCountAggregateOutputType | null
    _min: DepartmentMinAggregateOutputType | null
    _max: DepartmentMaxAggregateOutputType | null
  }

  type GetDepartmentGroupByPayload<T extends DepartmentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartmentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    createdById?: boolean
    updatedById?: boolean
    createdBy?: boolean | Department$createdByArgs<ExtArgs>
    updatedBy?: boolean | Department$updatedByArgs<ExtArgs>
    users?: boolean | Department$usersArgs<ExtArgs>
    permissions?: boolean | Department$permissionsArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    createdById?: boolean
    updatedById?: boolean
    createdBy?: boolean | Department$createdByArgs<ExtArgs>
    updatedBy?: boolean | Department$updatedByArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    code?: boolean
    createdById?: boolean
    updatedById?: boolean
    createdBy?: boolean | Department$createdByArgs<ExtArgs>
    updatedBy?: boolean | Department$updatedByArgs<ExtArgs>
  }, ExtArgs["result"]["department"]>

  export type DepartmentSelectScalar = {
    id?: boolean
    name?: boolean
    code?: boolean
    createdById?: boolean
    updatedById?: boolean
  }

  export type DepartmentOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "code" | "createdById" | "updatedById", ExtArgs["result"]["department"]>
  export type DepartmentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | Department$createdByArgs<ExtArgs>
    updatedBy?: boolean | Department$updatedByArgs<ExtArgs>
    users?: boolean | Department$usersArgs<ExtArgs>
    permissions?: boolean | Department$permissionsArgs<ExtArgs>
    _count?: boolean | DepartmentCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type DepartmentIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | Department$createdByArgs<ExtArgs>
    updatedBy?: boolean | Department$updatedByArgs<ExtArgs>
  }
  export type DepartmentIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | Department$createdByArgs<ExtArgs>
    updatedBy?: boolean | Department$updatedByArgs<ExtArgs>
  }

  export type $DepartmentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Department"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs> | null
      updatedBy: Prisma.$UserPayload<ExtArgs> | null
      users: Prisma.$UserPayload<ExtArgs>[]
      permissions: Prisma.$DepartmentPermissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      code: string
      createdById: string | null
      updatedById: string | null
    }, ExtArgs["result"]["department"]>
    composites: {}
  }

  type DepartmentGetPayload<S extends boolean | null | undefined | DepartmentDefaultArgs> = $Result.GetResult<Prisma.$DepartmentPayload, S>

  type DepartmentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DepartmentFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DepartmentCountAggregateInputType | true
    }

  export interface DepartmentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Department'], meta: { name: 'Department' } }
    /**
     * Find zero or one Department that matches the filter.
     * @param {DepartmentFindUniqueArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepartmentFindUniqueArgs>(args: SelectSubset<T, DepartmentFindUniqueArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Department that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DepartmentFindUniqueOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepartmentFindUniqueOrThrowArgs>(args: SelectSubset<T, DepartmentFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Department that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepartmentFindFirstArgs>(args?: SelectSubset<T, DepartmentFindFirstArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Department that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindFirstOrThrowArgs} args - Arguments to find a Department
     * @example
     * // Get one Department
     * const department = await prisma.department.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepartmentFindFirstOrThrowArgs>(args?: SelectSubset<T, DepartmentFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Departments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Departments
     * const departments = await prisma.department.findMany()
     * 
     * // Get first 10 Departments
     * const departments = await prisma.department.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentWithIdOnly = await prisma.department.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DepartmentFindManyArgs>(args?: SelectSubset<T, DepartmentFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Department.
     * @param {DepartmentCreateArgs} args - Arguments to create a Department.
     * @example
     * // Create one Department
     * const Department = await prisma.department.create({
     *   data: {
     *     // ... data to create a Department
     *   }
     * })
     * 
     */
    create<T extends DepartmentCreateArgs>(args: SelectSubset<T, DepartmentCreateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Departments.
     * @param {DepartmentCreateManyArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepartmentCreateManyArgs>(args?: SelectSubset<T, DepartmentCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Departments and returns the data saved in the database.
     * @param {DepartmentCreateManyAndReturnArgs} args - Arguments to create many Departments.
     * @example
     * // Create many Departments
     * const department = await prisma.department.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Departments and only return the `id`
     * const departmentWithIdOnly = await prisma.department.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DepartmentCreateManyAndReturnArgs>(args?: SelectSubset<T, DepartmentCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Department.
     * @param {DepartmentDeleteArgs} args - Arguments to delete one Department.
     * @example
     * // Delete one Department
     * const Department = await prisma.department.delete({
     *   where: {
     *     // ... filter to delete one Department
     *   }
     * })
     * 
     */
    delete<T extends DepartmentDeleteArgs>(args: SelectSubset<T, DepartmentDeleteArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Department.
     * @param {DepartmentUpdateArgs} args - Arguments to update one Department.
     * @example
     * // Update one Department
     * const department = await prisma.department.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepartmentUpdateArgs>(args: SelectSubset<T, DepartmentUpdateArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Departments.
     * @param {DepartmentDeleteManyArgs} args - Arguments to filter Departments to delete.
     * @example
     * // Delete a few Departments
     * const { count } = await prisma.department.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepartmentDeleteManyArgs>(args?: SelectSubset<T, DepartmentDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepartmentUpdateManyArgs>(args: SelectSubset<T, DepartmentUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Departments and returns the data updated in the database.
     * @param {DepartmentUpdateManyAndReturnArgs} args - Arguments to update many Departments.
     * @example
     * // Update many Departments
     * const department = await prisma.department.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Departments and only return the `id`
     * const departmentWithIdOnly = await prisma.department.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DepartmentUpdateManyAndReturnArgs>(args: SelectSubset<T, DepartmentUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Department.
     * @param {DepartmentUpsertArgs} args - Arguments to update or create a Department.
     * @example
     * // Update or create a Department
     * const department = await prisma.department.upsert({
     *   create: {
     *     // ... data to create a Department
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Department we want to update
     *   }
     * })
     */
    upsert<T extends DepartmentUpsertArgs>(args: SelectSubset<T, DepartmentUpsertArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Departments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentCountArgs} args - Arguments to filter Departments to count.
     * @example
     * // Count the number of Departments
     * const count = await prisma.department.count({
     *   where: {
     *     // ... the filter for the Departments we want to count
     *   }
     * })
    **/
    count<T extends DepartmentCountArgs>(
      args?: Subset<T, DepartmentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentAggregateArgs>(args: Subset<T, DepartmentAggregateArgs>): Prisma.PrismaPromise<GetDepartmentAggregateType<T>>

    /**
     * Group by Department.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Department model
   */
  readonly fields: DepartmentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Department.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartmentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends Department$createdByArgs<ExtArgs> = {}>(args?: Subset<T, Department$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    updatedBy<T extends Department$updatedByArgs<ExtArgs> = {}>(args?: Subset<T, Department$updatedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    users<T extends Department$usersArgs<ExtArgs> = {}>(args?: Subset<T, Department$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    permissions<T extends Department$permissionsArgs<ExtArgs> = {}>(args?: Subset<T, Department$permissionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Department model
   */
  interface DepartmentFieldRefs {
    readonly id: FieldRef<"Department", 'String'>
    readonly name: FieldRef<"Department", 'String'>
    readonly code: FieldRef<"Department", 'String'>
    readonly createdById: FieldRef<"Department", 'String'>
    readonly updatedById: FieldRef<"Department", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Department findUnique
   */
  export type DepartmentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findUniqueOrThrow
   */
  export type DepartmentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department findFirst
   */
  export type DepartmentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findFirstOrThrow
   */
  export type DepartmentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Department to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Departments.
     */
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department findMany
   */
  export type DepartmentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter, which Departments to fetch.
     */
    where?: DepartmentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Departments to fetch.
     */
    orderBy?: DepartmentOrderByWithRelationInput | DepartmentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Departments.
     */
    cursor?: DepartmentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Departments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Departments.
     */
    skip?: number
    distinct?: DepartmentScalarFieldEnum | DepartmentScalarFieldEnum[]
  }

  /**
   * Department create
   */
  export type DepartmentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to create a Department.
     */
    data: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
  }

  /**
   * Department createMany
   */
  export type DepartmentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Department createManyAndReturn
   */
  export type DepartmentCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * The data used to create many Departments.
     */
    data: DepartmentCreateManyInput | DepartmentCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Department update
   */
  export type DepartmentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The data needed to update a Department.
     */
    data: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
    /**
     * Choose, which Department to update.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department updateMany
   */
  export type DepartmentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to update.
     */
    limit?: number
  }

  /**
   * Department updateManyAndReturn
   */
  export type DepartmentUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * The data used to update Departments.
     */
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyInput>
    /**
     * Filter which Departments to update
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Department upsert
   */
  export type DepartmentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * The filter to search for the Department to update in case it exists.
     */
    where: DepartmentWhereUniqueInput
    /**
     * In case the Department found by the `where` argument doesn't exist, create a new Department with this data.
     */
    create: XOR<DepartmentCreateInput, DepartmentUncheckedCreateInput>
    /**
     * In case the Department was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentUpdateInput, DepartmentUncheckedUpdateInput>
  }

  /**
   * Department delete
   */
  export type DepartmentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
    /**
     * Filter which Department to delete.
     */
    where: DepartmentWhereUniqueInput
  }

  /**
   * Department deleteMany
   */
  export type DepartmentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Departments to delete
     */
    where?: DepartmentWhereInput
    /**
     * Limit how many Departments to delete.
     */
    limit?: number
  }

  /**
   * Department.createdBy
   */
  export type Department$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Department.updatedBy
   */
  export type Department$updatedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Department.users
   */
  export type Department$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * Department.permissions
   */
  export type Department$permissionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentPermission
     */
    select?: DepartmentPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentPermission
     */
    omit?: DepartmentPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentPermissionInclude<ExtArgs> | null
    where?: DepartmentPermissionWhereInput
    orderBy?: DepartmentPermissionOrderByWithRelationInput | DepartmentPermissionOrderByWithRelationInput[]
    cursor?: DepartmentPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentPermissionScalarFieldEnum | DepartmentPermissionScalarFieldEnum[]
  }

  /**
   * Department without action
   */
  export type DepartmentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Department
     */
    select?: DepartmentSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Department
     */
    omit?: DepartmentOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentInclude<ExtArgs> | null
  }


  /**
   * Model Permission
   */

  export type AggregatePermission = {
    _count: PermissionCountAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  export type PermissionMinAggregateOutputType = {
    id: string | null
    name: string | null
    resource: string | null
    action: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
  }

  export type PermissionMaxAggregateOutputType = {
    id: string | null
    name: string | null
    resource: string | null
    action: string | null
    description: string | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
  }

  export type PermissionCountAggregateOutputType = {
    id: number
    name: number
    resource: number
    action: number
    description: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type PermissionMinAggregateInputType = {
    id?: true
    name?: true
    resource?: true
    action?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type PermissionMaxAggregateInputType = {
    id?: true
    name?: true
    resource?: true
    action?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
  }

  export type PermissionCountAggregateInputType = {
    id?: true
    name?: true
    resource?: true
    action?: true
    description?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type PermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Permission to aggregate.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Permissions
    **/
    _count?: true | PermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PermissionMaxAggregateInputType
  }

  export type GetPermissionAggregateType<T extends PermissionAggregateArgs> = {
        [P in keyof T & keyof AggregatePermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePermission[P]>
      : GetScalarType<T[P], AggregatePermission[P]>
  }




  export type PermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PermissionWhereInput
    orderBy?: PermissionOrderByWithAggregationInput | PermissionOrderByWithAggregationInput[]
    by: PermissionScalarFieldEnum[] | PermissionScalarFieldEnum
    having?: PermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PermissionCountAggregateInputType | true
    _min?: PermissionMinAggregateInputType
    _max?: PermissionMaxAggregateInputType
  }

  export type PermissionGroupByOutputType = {
    id: string
    name: string
    resource: string
    action: string
    description: string | null
    createdAt: Date
    updatedAt: Date
    createdById: string | null
    updatedById: string | null
    _count: PermissionCountAggregateOutputType | null
    _min: PermissionMinAggregateOutputType | null
    _max: PermissionMaxAggregateOutputType | null
  }

  type GetPermissionGroupByPayload<T extends PermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PermissionGroupByOutputType[P]>
            : GetScalarType<T[P], PermissionGroupByOutputType[P]>
        }
      >
    >


  export type PermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    resource?: boolean
    action?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    createdBy?: boolean | Permission$createdByArgs<ExtArgs>
    updatedBy?: boolean | Permission$updatedByArgs<ExtArgs>
    dept?: boolean | Permission$deptArgs<ExtArgs>
    users?: boolean | Permission$usersArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["permission"]>

  export type PermissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    resource?: boolean
    action?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    createdBy?: boolean | Permission$createdByArgs<ExtArgs>
    updatedBy?: boolean | Permission$updatedByArgs<ExtArgs>
  }, ExtArgs["result"]["permission"]>

  export type PermissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    resource?: boolean
    action?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    createdBy?: boolean | Permission$createdByArgs<ExtArgs>
    updatedBy?: boolean | Permission$updatedByArgs<ExtArgs>
  }, ExtArgs["result"]["permission"]>

  export type PermissionSelectScalar = {
    id?: boolean
    name?: boolean
    resource?: boolean
    action?: boolean
    description?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }

  export type PermissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "resource" | "action" | "description" | "createdAt" | "updatedAt" | "createdById" | "updatedById", ExtArgs["result"]["permission"]>
  export type PermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | Permission$createdByArgs<ExtArgs>
    updatedBy?: boolean | Permission$updatedByArgs<ExtArgs>
    dept?: boolean | Permission$deptArgs<ExtArgs>
    users?: boolean | Permission$usersArgs<ExtArgs>
    _count?: boolean | PermissionCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type PermissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | Permission$createdByArgs<ExtArgs>
    updatedBy?: boolean | Permission$updatedByArgs<ExtArgs>
  }
  export type PermissionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | Permission$createdByArgs<ExtArgs>
    updatedBy?: boolean | Permission$updatedByArgs<ExtArgs>
  }

  export type $PermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Permission"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs> | null
      updatedBy: Prisma.$UserPayload<ExtArgs> | null
      dept: Prisma.$DepartmentPermissionPayload<ExtArgs>[]
      users: Prisma.$UserPermissionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      resource: string
      action: string
      description: string | null
      createdAt: Date
      updatedAt: Date
      createdById: string | null
      updatedById: string | null
    }, ExtArgs["result"]["permission"]>
    composites: {}
  }

  type PermissionGetPayload<S extends boolean | null | undefined | PermissionDefaultArgs> = $Result.GetResult<Prisma.$PermissionPayload, S>

  type PermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<PermissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: PermissionCountAggregateInputType | true
    }

  export interface PermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Permission'], meta: { name: 'Permission' } }
    /**
     * Find zero or one Permission that matches the filter.
     * @param {PermissionFindUniqueArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends PermissionFindUniqueArgs>(args: SelectSubset<T, PermissionFindUniqueArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Permission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {PermissionFindUniqueOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends PermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, PermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Permission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindFirstArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends PermissionFindFirstArgs>(args?: SelectSubset<T, PermissionFindFirstArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Permission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindFirstOrThrowArgs} args - Arguments to find a Permission
     * @example
     * // Get one Permission
     * const permission = await prisma.permission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends PermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, PermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Permissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Permissions
     * const permissions = await prisma.permission.findMany()
     * 
     * // Get first 10 Permissions
     * const permissions = await prisma.permission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const permissionWithIdOnly = await prisma.permission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends PermissionFindManyArgs>(args?: SelectSubset<T, PermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Permission.
     * @param {PermissionCreateArgs} args - Arguments to create a Permission.
     * @example
     * // Create one Permission
     * const Permission = await prisma.permission.create({
     *   data: {
     *     // ... data to create a Permission
     *   }
     * })
     * 
     */
    create<T extends PermissionCreateArgs>(args: SelectSubset<T, PermissionCreateArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Permissions.
     * @param {PermissionCreateManyArgs} args - Arguments to create many Permissions.
     * @example
     * // Create many Permissions
     * const permission = await prisma.permission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends PermissionCreateManyArgs>(args?: SelectSubset<T, PermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Permissions and returns the data saved in the database.
     * @param {PermissionCreateManyAndReturnArgs} args - Arguments to create many Permissions.
     * @example
     * // Create many Permissions
     * const permission = await prisma.permission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Permissions and only return the `id`
     * const permissionWithIdOnly = await prisma.permission.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends PermissionCreateManyAndReturnArgs>(args?: SelectSubset<T, PermissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Permission.
     * @param {PermissionDeleteArgs} args - Arguments to delete one Permission.
     * @example
     * // Delete one Permission
     * const Permission = await prisma.permission.delete({
     *   where: {
     *     // ... filter to delete one Permission
     *   }
     * })
     * 
     */
    delete<T extends PermissionDeleteArgs>(args: SelectSubset<T, PermissionDeleteArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Permission.
     * @param {PermissionUpdateArgs} args - Arguments to update one Permission.
     * @example
     * // Update one Permission
     * const permission = await prisma.permission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends PermissionUpdateArgs>(args: SelectSubset<T, PermissionUpdateArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Permissions.
     * @param {PermissionDeleteManyArgs} args - Arguments to filter Permissions to delete.
     * @example
     * // Delete a few Permissions
     * const { count } = await prisma.permission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends PermissionDeleteManyArgs>(args?: SelectSubset<T, PermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Permissions
     * const permission = await prisma.permission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends PermissionUpdateManyArgs>(args: SelectSubset<T, PermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Permissions and returns the data updated in the database.
     * @param {PermissionUpdateManyAndReturnArgs} args - Arguments to update many Permissions.
     * @example
     * // Update many Permissions
     * const permission = await prisma.permission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Permissions and only return the `id`
     * const permissionWithIdOnly = await prisma.permission.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends PermissionUpdateManyAndReturnArgs>(args: SelectSubset<T, PermissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Permission.
     * @param {PermissionUpsertArgs} args - Arguments to update or create a Permission.
     * @example
     * // Update or create a Permission
     * const permission = await prisma.permission.upsert({
     *   create: {
     *     // ... data to create a Permission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Permission we want to update
     *   }
     * })
     */
    upsert<T extends PermissionUpsertArgs>(args: SelectSubset<T, PermissionUpsertArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Permissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionCountArgs} args - Arguments to filter Permissions to count.
     * @example
     * // Count the number of Permissions
     * const count = await prisma.permission.count({
     *   where: {
     *     // ... the filter for the Permissions we want to count
     *   }
     * })
    **/
    count<T extends PermissionCountArgs>(
      args?: Subset<T, PermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PermissionAggregateArgs>(args: Subset<T, PermissionAggregateArgs>): Prisma.PrismaPromise<GetPermissionAggregateType<T>>

    /**
     * Group by Permission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PermissionGroupByArgs['orderBy'] }
        : { orderBy?: PermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Permission model
   */
  readonly fields: PermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Permission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends Permission$createdByArgs<ExtArgs> = {}>(args?: Subset<T, Permission$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    updatedBy<T extends Permission$updatedByArgs<ExtArgs> = {}>(args?: Subset<T, Permission$updatedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    dept<T extends Permission$deptArgs<ExtArgs> = {}>(args?: Subset<T, Permission$deptArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    users<T extends Permission$usersArgs<ExtArgs> = {}>(args?: Subset<T, Permission$usersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Permission model
   */
  interface PermissionFieldRefs {
    readonly id: FieldRef<"Permission", 'String'>
    readonly name: FieldRef<"Permission", 'String'>
    readonly resource: FieldRef<"Permission", 'String'>
    readonly action: FieldRef<"Permission", 'String'>
    readonly description: FieldRef<"Permission", 'String'>
    readonly createdAt: FieldRef<"Permission", 'DateTime'>
    readonly updatedAt: FieldRef<"Permission", 'DateTime'>
    readonly createdById: FieldRef<"Permission", 'String'>
    readonly updatedById: FieldRef<"Permission", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Permission findUnique
   */
  export type PermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission findUniqueOrThrow
   */
  export type PermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission findFirst
   */
  export type PermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Permissions.
     */
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission findFirstOrThrow
   */
  export type PermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permission to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Permissions.
     */
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission findMany
   */
  export type PermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter, which Permissions to fetch.
     */
    where?: PermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Permissions to fetch.
     */
    orderBy?: PermissionOrderByWithRelationInput | PermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Permissions.
     */
    cursor?: PermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Permissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Permissions.
     */
    skip?: number
    distinct?: PermissionScalarFieldEnum | PermissionScalarFieldEnum[]
  }

  /**
   * Permission create
   */
  export type PermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a Permission.
     */
    data: XOR<PermissionCreateInput, PermissionUncheckedCreateInput>
  }

  /**
   * Permission createMany
   */
  export type PermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Permissions.
     */
    data: PermissionCreateManyInput | PermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Permission createManyAndReturn
   */
  export type PermissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * The data used to create many Permissions.
     */
    data: PermissionCreateManyInput | PermissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Permission update
   */
  export type PermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a Permission.
     */
    data: XOR<PermissionUpdateInput, PermissionUncheckedUpdateInput>
    /**
     * Choose, which Permission to update.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission updateMany
   */
  export type PermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Permissions.
     */
    data: XOR<PermissionUpdateManyMutationInput, PermissionUncheckedUpdateManyInput>
    /**
     * Filter which Permissions to update
     */
    where?: PermissionWhereInput
    /**
     * Limit how many Permissions to update.
     */
    limit?: number
  }

  /**
   * Permission updateManyAndReturn
   */
  export type PermissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * The data used to update Permissions.
     */
    data: XOR<PermissionUpdateManyMutationInput, PermissionUncheckedUpdateManyInput>
    /**
     * Filter which Permissions to update
     */
    where?: PermissionWhereInput
    /**
     * Limit how many Permissions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Permission upsert
   */
  export type PermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the Permission to update in case it exists.
     */
    where: PermissionWhereUniqueInput
    /**
     * In case the Permission found by the `where` argument doesn't exist, create a new Permission with this data.
     */
    create: XOR<PermissionCreateInput, PermissionUncheckedCreateInput>
    /**
     * In case the Permission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PermissionUpdateInput, PermissionUncheckedUpdateInput>
  }

  /**
   * Permission delete
   */
  export type PermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
    /**
     * Filter which Permission to delete.
     */
    where: PermissionWhereUniqueInput
  }

  /**
   * Permission deleteMany
   */
  export type PermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Permissions to delete
     */
    where?: PermissionWhereInput
    /**
     * Limit how many Permissions to delete.
     */
    limit?: number
  }

  /**
   * Permission.createdBy
   */
  export type Permission$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Permission.updatedBy
   */
  export type Permission$updatedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Permission.dept
   */
  export type Permission$deptArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentPermission
     */
    select?: DepartmentPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentPermission
     */
    omit?: DepartmentPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentPermissionInclude<ExtArgs> | null
    where?: DepartmentPermissionWhereInput
    orderBy?: DepartmentPermissionOrderByWithRelationInput | DepartmentPermissionOrderByWithRelationInput[]
    cursor?: DepartmentPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: DepartmentPermissionScalarFieldEnum | DepartmentPermissionScalarFieldEnum[]
  }

  /**
   * Permission.users
   */
  export type Permission$usersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    where?: UserPermissionWhereInput
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    cursor?: UserPermissionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * Permission without action
   */
  export type PermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Permission
     */
    select?: PermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Permission
     */
    omit?: PermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PermissionInclude<ExtArgs> | null
  }


  /**
   * Model DepartmentPermission
   */

  export type AggregateDepartmentPermission = {
    _count: DepartmentPermissionCountAggregateOutputType | null
    _min: DepartmentPermissionMinAggregateOutputType | null
    _max: DepartmentPermissionMaxAggregateOutputType | null
  }

  export type DepartmentPermissionMinAggregateOutputType = {
    id: string | null
    departmentId: string | null
    permissionId: string | null
    createdAt: Date | null
    createdById: string | null
    updatedById: string | null
  }

  export type DepartmentPermissionMaxAggregateOutputType = {
    id: string | null
    departmentId: string | null
    permissionId: string | null
    createdAt: Date | null
    createdById: string | null
    updatedById: string | null
  }

  export type DepartmentPermissionCountAggregateOutputType = {
    id: number
    departmentId: number
    permissionId: number
    createdAt: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type DepartmentPermissionMinAggregateInputType = {
    id?: true
    departmentId?: true
    permissionId?: true
    createdAt?: true
    createdById?: true
    updatedById?: true
  }

  export type DepartmentPermissionMaxAggregateInputType = {
    id?: true
    departmentId?: true
    permissionId?: true
    createdAt?: true
    createdById?: true
    updatedById?: true
  }

  export type DepartmentPermissionCountAggregateInputType = {
    id?: true
    departmentId?: true
    permissionId?: true
    createdAt?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type DepartmentPermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DepartmentPermission to aggregate.
     */
    where?: DepartmentPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepartmentPermissions to fetch.
     */
    orderBy?: DepartmentPermissionOrderByWithRelationInput | DepartmentPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: DepartmentPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepartmentPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepartmentPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned DepartmentPermissions
    **/
    _count?: true | DepartmentPermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: DepartmentPermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: DepartmentPermissionMaxAggregateInputType
  }

  export type GetDepartmentPermissionAggregateType<T extends DepartmentPermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateDepartmentPermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateDepartmentPermission[P]>
      : GetScalarType<T[P], AggregateDepartmentPermission[P]>
  }




  export type DepartmentPermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: DepartmentPermissionWhereInput
    orderBy?: DepartmentPermissionOrderByWithAggregationInput | DepartmentPermissionOrderByWithAggregationInput[]
    by: DepartmentPermissionScalarFieldEnum[] | DepartmentPermissionScalarFieldEnum
    having?: DepartmentPermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: DepartmentPermissionCountAggregateInputType | true
    _min?: DepartmentPermissionMinAggregateInputType
    _max?: DepartmentPermissionMaxAggregateInputType
  }

  export type DepartmentPermissionGroupByOutputType = {
    id: string
    departmentId: string
    permissionId: string
    createdAt: Date
    createdById: string | null
    updatedById: string | null
    _count: DepartmentPermissionCountAggregateOutputType | null
    _min: DepartmentPermissionMinAggregateOutputType | null
    _max: DepartmentPermissionMaxAggregateOutputType | null
  }

  type GetDepartmentPermissionGroupByPayload<T extends DepartmentPermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<DepartmentPermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof DepartmentPermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], DepartmentPermissionGroupByOutputType[P]>
            : GetScalarType<T[P], DepartmentPermissionGroupByOutputType[P]>
        }
      >
    >


  export type DepartmentPermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    departmentId?: boolean
    permissionId?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    createdBy?: boolean | DepartmentPermission$createdByArgs<ExtArgs>
    updatedBy?: boolean | DepartmentPermission$updatedByArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["departmentPermission"]>

  export type DepartmentPermissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    departmentId?: boolean
    permissionId?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    createdBy?: boolean | DepartmentPermission$createdByArgs<ExtArgs>
    updatedBy?: boolean | DepartmentPermission$updatedByArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["departmentPermission"]>

  export type DepartmentPermissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    departmentId?: boolean
    permissionId?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    createdBy?: boolean | DepartmentPermission$createdByArgs<ExtArgs>
    updatedBy?: boolean | DepartmentPermission$updatedByArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["departmentPermission"]>

  export type DepartmentPermissionSelectScalar = {
    id?: boolean
    departmentId?: boolean
    permissionId?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }

  export type DepartmentPermissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "departmentId" | "permissionId" | "createdAt" | "createdById" | "updatedById", ExtArgs["result"]["departmentPermission"]>
  export type DepartmentPermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | DepartmentPermission$createdByArgs<ExtArgs>
    updatedBy?: boolean | DepartmentPermission$updatedByArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }
  export type DepartmentPermissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | DepartmentPermission$createdByArgs<ExtArgs>
    updatedBy?: boolean | DepartmentPermission$updatedByArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }
  export type DepartmentPermissionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | DepartmentPermission$createdByArgs<ExtArgs>
    updatedBy?: boolean | DepartmentPermission$updatedByArgs<ExtArgs>
    department?: boolean | DepartmentDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
  }

  export type $DepartmentPermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "DepartmentPermission"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs> | null
      updatedBy: Prisma.$UserPayload<ExtArgs> | null
      department: Prisma.$DepartmentPayload<ExtArgs>
      permission: Prisma.$PermissionPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      departmentId: string
      permissionId: string
      createdAt: Date
      createdById: string | null
      updatedById: string | null
    }, ExtArgs["result"]["departmentPermission"]>
    composites: {}
  }

  type DepartmentPermissionGetPayload<S extends boolean | null | undefined | DepartmentPermissionDefaultArgs> = $Result.GetResult<Prisma.$DepartmentPermissionPayload, S>

  type DepartmentPermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<DepartmentPermissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: DepartmentPermissionCountAggregateInputType | true
    }

  export interface DepartmentPermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['DepartmentPermission'], meta: { name: 'DepartmentPermission' } }
    /**
     * Find zero or one DepartmentPermission that matches the filter.
     * @param {DepartmentPermissionFindUniqueArgs} args - Arguments to find a DepartmentPermission
     * @example
     * // Get one DepartmentPermission
     * const departmentPermission = await prisma.departmentPermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends DepartmentPermissionFindUniqueArgs>(args: SelectSubset<T, DepartmentPermissionFindUniqueArgs<ExtArgs>>): Prisma__DepartmentPermissionClient<$Result.GetResult<Prisma.$DepartmentPermissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one DepartmentPermission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {DepartmentPermissionFindUniqueOrThrowArgs} args - Arguments to find a DepartmentPermission
     * @example
     * // Get one DepartmentPermission
     * const departmentPermission = await prisma.departmentPermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends DepartmentPermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, DepartmentPermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__DepartmentPermissionClient<$Result.GetResult<Prisma.$DepartmentPermissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DepartmentPermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentPermissionFindFirstArgs} args - Arguments to find a DepartmentPermission
     * @example
     * // Get one DepartmentPermission
     * const departmentPermission = await prisma.departmentPermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends DepartmentPermissionFindFirstArgs>(args?: SelectSubset<T, DepartmentPermissionFindFirstArgs<ExtArgs>>): Prisma__DepartmentPermissionClient<$Result.GetResult<Prisma.$DepartmentPermissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first DepartmentPermission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentPermissionFindFirstOrThrowArgs} args - Arguments to find a DepartmentPermission
     * @example
     * // Get one DepartmentPermission
     * const departmentPermission = await prisma.departmentPermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends DepartmentPermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, DepartmentPermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__DepartmentPermissionClient<$Result.GetResult<Prisma.$DepartmentPermissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more DepartmentPermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentPermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all DepartmentPermissions
     * const departmentPermissions = await prisma.departmentPermission.findMany()
     * 
     * // Get first 10 DepartmentPermissions
     * const departmentPermissions = await prisma.departmentPermission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const departmentPermissionWithIdOnly = await prisma.departmentPermission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends DepartmentPermissionFindManyArgs>(args?: SelectSubset<T, DepartmentPermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a DepartmentPermission.
     * @param {DepartmentPermissionCreateArgs} args - Arguments to create a DepartmentPermission.
     * @example
     * // Create one DepartmentPermission
     * const DepartmentPermission = await prisma.departmentPermission.create({
     *   data: {
     *     // ... data to create a DepartmentPermission
     *   }
     * })
     * 
     */
    create<T extends DepartmentPermissionCreateArgs>(args: SelectSubset<T, DepartmentPermissionCreateArgs<ExtArgs>>): Prisma__DepartmentPermissionClient<$Result.GetResult<Prisma.$DepartmentPermissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many DepartmentPermissions.
     * @param {DepartmentPermissionCreateManyArgs} args - Arguments to create many DepartmentPermissions.
     * @example
     * // Create many DepartmentPermissions
     * const departmentPermission = await prisma.departmentPermission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends DepartmentPermissionCreateManyArgs>(args?: SelectSubset<T, DepartmentPermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many DepartmentPermissions and returns the data saved in the database.
     * @param {DepartmentPermissionCreateManyAndReturnArgs} args - Arguments to create many DepartmentPermissions.
     * @example
     * // Create many DepartmentPermissions
     * const departmentPermission = await prisma.departmentPermission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many DepartmentPermissions and only return the `id`
     * const departmentPermissionWithIdOnly = await prisma.departmentPermission.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends DepartmentPermissionCreateManyAndReturnArgs>(args?: SelectSubset<T, DepartmentPermissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPermissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a DepartmentPermission.
     * @param {DepartmentPermissionDeleteArgs} args - Arguments to delete one DepartmentPermission.
     * @example
     * // Delete one DepartmentPermission
     * const DepartmentPermission = await prisma.departmentPermission.delete({
     *   where: {
     *     // ... filter to delete one DepartmentPermission
     *   }
     * })
     * 
     */
    delete<T extends DepartmentPermissionDeleteArgs>(args: SelectSubset<T, DepartmentPermissionDeleteArgs<ExtArgs>>): Prisma__DepartmentPermissionClient<$Result.GetResult<Prisma.$DepartmentPermissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one DepartmentPermission.
     * @param {DepartmentPermissionUpdateArgs} args - Arguments to update one DepartmentPermission.
     * @example
     * // Update one DepartmentPermission
     * const departmentPermission = await prisma.departmentPermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends DepartmentPermissionUpdateArgs>(args: SelectSubset<T, DepartmentPermissionUpdateArgs<ExtArgs>>): Prisma__DepartmentPermissionClient<$Result.GetResult<Prisma.$DepartmentPermissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more DepartmentPermissions.
     * @param {DepartmentPermissionDeleteManyArgs} args - Arguments to filter DepartmentPermissions to delete.
     * @example
     * // Delete a few DepartmentPermissions
     * const { count } = await prisma.departmentPermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends DepartmentPermissionDeleteManyArgs>(args?: SelectSubset<T, DepartmentPermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DepartmentPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentPermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many DepartmentPermissions
     * const departmentPermission = await prisma.departmentPermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends DepartmentPermissionUpdateManyArgs>(args: SelectSubset<T, DepartmentPermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more DepartmentPermissions and returns the data updated in the database.
     * @param {DepartmentPermissionUpdateManyAndReturnArgs} args - Arguments to update many DepartmentPermissions.
     * @example
     * // Update many DepartmentPermissions
     * const departmentPermission = await prisma.departmentPermission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more DepartmentPermissions and only return the `id`
     * const departmentPermissionWithIdOnly = await prisma.departmentPermission.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends DepartmentPermissionUpdateManyAndReturnArgs>(args: SelectSubset<T, DepartmentPermissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$DepartmentPermissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one DepartmentPermission.
     * @param {DepartmentPermissionUpsertArgs} args - Arguments to update or create a DepartmentPermission.
     * @example
     * // Update or create a DepartmentPermission
     * const departmentPermission = await prisma.departmentPermission.upsert({
     *   create: {
     *     // ... data to create a DepartmentPermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the DepartmentPermission we want to update
     *   }
     * })
     */
    upsert<T extends DepartmentPermissionUpsertArgs>(args: SelectSubset<T, DepartmentPermissionUpsertArgs<ExtArgs>>): Prisma__DepartmentPermissionClient<$Result.GetResult<Prisma.$DepartmentPermissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of DepartmentPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentPermissionCountArgs} args - Arguments to filter DepartmentPermissions to count.
     * @example
     * // Count the number of DepartmentPermissions
     * const count = await prisma.departmentPermission.count({
     *   where: {
     *     // ... the filter for the DepartmentPermissions we want to count
     *   }
     * })
    **/
    count<T extends DepartmentPermissionCountArgs>(
      args?: Subset<T, DepartmentPermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], DepartmentPermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a DepartmentPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentPermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends DepartmentPermissionAggregateArgs>(args: Subset<T, DepartmentPermissionAggregateArgs>): Prisma.PrismaPromise<GetDepartmentPermissionAggregateType<T>>

    /**
     * Group by DepartmentPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {DepartmentPermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends DepartmentPermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: DepartmentPermissionGroupByArgs['orderBy'] }
        : { orderBy?: DepartmentPermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, DepartmentPermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetDepartmentPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the DepartmentPermission model
   */
  readonly fields: DepartmentPermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for DepartmentPermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__DepartmentPermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends DepartmentPermission$createdByArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentPermission$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    updatedBy<T extends DepartmentPermission$updatedByArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentPermission$updatedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    department<T extends DepartmentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, DepartmentDefaultArgs<ExtArgs>>): Prisma__DepartmentClient<$Result.GetResult<Prisma.$DepartmentPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    permission<T extends PermissionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PermissionDefaultArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the DepartmentPermission model
   */
  interface DepartmentPermissionFieldRefs {
    readonly id: FieldRef<"DepartmentPermission", 'String'>
    readonly departmentId: FieldRef<"DepartmentPermission", 'String'>
    readonly permissionId: FieldRef<"DepartmentPermission", 'String'>
    readonly createdAt: FieldRef<"DepartmentPermission", 'DateTime'>
    readonly createdById: FieldRef<"DepartmentPermission", 'String'>
    readonly updatedById: FieldRef<"DepartmentPermission", 'String'>
  }
    

  // Custom InputTypes
  /**
   * DepartmentPermission findUnique
   */
  export type DepartmentPermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentPermission
     */
    select?: DepartmentPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentPermission
     */
    omit?: DepartmentPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentPermissionInclude<ExtArgs> | null
    /**
     * Filter, which DepartmentPermission to fetch.
     */
    where: DepartmentPermissionWhereUniqueInput
  }

  /**
   * DepartmentPermission findUniqueOrThrow
   */
  export type DepartmentPermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentPermission
     */
    select?: DepartmentPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentPermission
     */
    omit?: DepartmentPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentPermissionInclude<ExtArgs> | null
    /**
     * Filter, which DepartmentPermission to fetch.
     */
    where: DepartmentPermissionWhereUniqueInput
  }

  /**
   * DepartmentPermission findFirst
   */
  export type DepartmentPermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentPermission
     */
    select?: DepartmentPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentPermission
     */
    omit?: DepartmentPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentPermissionInclude<ExtArgs> | null
    /**
     * Filter, which DepartmentPermission to fetch.
     */
    where?: DepartmentPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepartmentPermissions to fetch.
     */
    orderBy?: DepartmentPermissionOrderByWithRelationInput | DepartmentPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DepartmentPermissions.
     */
    cursor?: DepartmentPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepartmentPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepartmentPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DepartmentPermissions.
     */
    distinct?: DepartmentPermissionScalarFieldEnum | DepartmentPermissionScalarFieldEnum[]
  }

  /**
   * DepartmentPermission findFirstOrThrow
   */
  export type DepartmentPermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentPermission
     */
    select?: DepartmentPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentPermission
     */
    omit?: DepartmentPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentPermissionInclude<ExtArgs> | null
    /**
     * Filter, which DepartmentPermission to fetch.
     */
    where?: DepartmentPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepartmentPermissions to fetch.
     */
    orderBy?: DepartmentPermissionOrderByWithRelationInput | DepartmentPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for DepartmentPermissions.
     */
    cursor?: DepartmentPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepartmentPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepartmentPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of DepartmentPermissions.
     */
    distinct?: DepartmentPermissionScalarFieldEnum | DepartmentPermissionScalarFieldEnum[]
  }

  /**
   * DepartmentPermission findMany
   */
  export type DepartmentPermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentPermission
     */
    select?: DepartmentPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentPermission
     */
    omit?: DepartmentPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentPermissionInclude<ExtArgs> | null
    /**
     * Filter, which DepartmentPermissions to fetch.
     */
    where?: DepartmentPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of DepartmentPermissions to fetch.
     */
    orderBy?: DepartmentPermissionOrderByWithRelationInput | DepartmentPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing DepartmentPermissions.
     */
    cursor?: DepartmentPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` DepartmentPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` DepartmentPermissions.
     */
    skip?: number
    distinct?: DepartmentPermissionScalarFieldEnum | DepartmentPermissionScalarFieldEnum[]
  }

  /**
   * DepartmentPermission create
   */
  export type DepartmentPermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentPermission
     */
    select?: DepartmentPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentPermission
     */
    omit?: DepartmentPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentPermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a DepartmentPermission.
     */
    data: XOR<DepartmentPermissionCreateInput, DepartmentPermissionUncheckedCreateInput>
  }

  /**
   * DepartmentPermission createMany
   */
  export type DepartmentPermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many DepartmentPermissions.
     */
    data: DepartmentPermissionCreateManyInput | DepartmentPermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * DepartmentPermission createManyAndReturn
   */
  export type DepartmentPermissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentPermission
     */
    select?: DepartmentPermissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentPermission
     */
    omit?: DepartmentPermissionOmit<ExtArgs> | null
    /**
     * The data used to create many DepartmentPermissions.
     */
    data: DepartmentPermissionCreateManyInput | DepartmentPermissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentPermissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * DepartmentPermission update
   */
  export type DepartmentPermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentPermission
     */
    select?: DepartmentPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentPermission
     */
    omit?: DepartmentPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentPermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a DepartmentPermission.
     */
    data: XOR<DepartmentPermissionUpdateInput, DepartmentPermissionUncheckedUpdateInput>
    /**
     * Choose, which DepartmentPermission to update.
     */
    where: DepartmentPermissionWhereUniqueInput
  }

  /**
   * DepartmentPermission updateMany
   */
  export type DepartmentPermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update DepartmentPermissions.
     */
    data: XOR<DepartmentPermissionUpdateManyMutationInput, DepartmentPermissionUncheckedUpdateManyInput>
    /**
     * Filter which DepartmentPermissions to update
     */
    where?: DepartmentPermissionWhereInput
    /**
     * Limit how many DepartmentPermissions to update.
     */
    limit?: number
  }

  /**
   * DepartmentPermission updateManyAndReturn
   */
  export type DepartmentPermissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentPermission
     */
    select?: DepartmentPermissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentPermission
     */
    omit?: DepartmentPermissionOmit<ExtArgs> | null
    /**
     * The data used to update DepartmentPermissions.
     */
    data: XOR<DepartmentPermissionUpdateManyMutationInput, DepartmentPermissionUncheckedUpdateManyInput>
    /**
     * Filter which DepartmentPermissions to update
     */
    where?: DepartmentPermissionWhereInput
    /**
     * Limit how many DepartmentPermissions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentPermissionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * DepartmentPermission upsert
   */
  export type DepartmentPermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentPermission
     */
    select?: DepartmentPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentPermission
     */
    omit?: DepartmentPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentPermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the DepartmentPermission to update in case it exists.
     */
    where: DepartmentPermissionWhereUniqueInput
    /**
     * In case the DepartmentPermission found by the `where` argument doesn't exist, create a new DepartmentPermission with this data.
     */
    create: XOR<DepartmentPermissionCreateInput, DepartmentPermissionUncheckedCreateInput>
    /**
     * In case the DepartmentPermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<DepartmentPermissionUpdateInput, DepartmentPermissionUncheckedUpdateInput>
  }

  /**
   * DepartmentPermission delete
   */
  export type DepartmentPermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentPermission
     */
    select?: DepartmentPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentPermission
     */
    omit?: DepartmentPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentPermissionInclude<ExtArgs> | null
    /**
     * Filter which DepartmentPermission to delete.
     */
    where: DepartmentPermissionWhereUniqueInput
  }

  /**
   * DepartmentPermission deleteMany
   */
  export type DepartmentPermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which DepartmentPermissions to delete
     */
    where?: DepartmentPermissionWhereInput
    /**
     * Limit how many DepartmentPermissions to delete.
     */
    limit?: number
  }

  /**
   * DepartmentPermission.createdBy
   */
  export type DepartmentPermission$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * DepartmentPermission.updatedBy
   */
  export type DepartmentPermission$updatedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * DepartmentPermission without action
   */
  export type DepartmentPermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the DepartmentPermission
     */
    select?: DepartmentPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the DepartmentPermission
     */
    omit?: DepartmentPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: DepartmentPermissionInclude<ExtArgs> | null
  }


  /**
   * Model UserPermission
   */

  export type AggregateUserPermission = {
    _count: UserPermissionCountAggregateOutputType | null
    _min: UserPermissionMinAggregateOutputType | null
    _max: UserPermissionMaxAggregateOutputType | null
  }

  export type UserPermissionMinAggregateOutputType = {
    id: string | null
    userId: string | null
    permissionId: string | null
    createdAt: Date | null
    createdById: string | null
    updatedById: string | null
  }

  export type UserPermissionMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    permissionId: string | null
    createdAt: Date | null
    createdById: string | null
    updatedById: string | null
  }

  export type UserPermissionCountAggregateOutputType = {
    id: number
    userId: number
    permissionId: number
    createdAt: number
    createdById: number
    updatedById: number
    _all: number
  }


  export type UserPermissionMinAggregateInputType = {
    id?: true
    userId?: true
    permissionId?: true
    createdAt?: true
    createdById?: true
    updatedById?: true
  }

  export type UserPermissionMaxAggregateInputType = {
    id?: true
    userId?: true
    permissionId?: true
    createdAt?: true
    createdById?: true
    updatedById?: true
  }

  export type UserPermissionCountAggregateInputType = {
    id?: true
    userId?: true
    permissionId?: true
    createdAt?: true
    createdById?: true
    updatedById?: true
    _all?: true
  }

  export type UserPermissionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPermission to aggregate.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserPermissions
    **/
    _count?: true | UserPermissionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserPermissionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserPermissionMaxAggregateInputType
  }

  export type GetUserPermissionAggregateType<T extends UserPermissionAggregateArgs> = {
        [P in keyof T & keyof AggregateUserPermission]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserPermission[P]>
      : GetScalarType<T[P], AggregateUserPermission[P]>
  }




  export type UserPermissionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserPermissionWhereInput
    orderBy?: UserPermissionOrderByWithAggregationInput | UserPermissionOrderByWithAggregationInput[]
    by: UserPermissionScalarFieldEnum[] | UserPermissionScalarFieldEnum
    having?: UserPermissionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserPermissionCountAggregateInputType | true
    _min?: UserPermissionMinAggregateInputType
    _max?: UserPermissionMaxAggregateInputType
  }

  export type UserPermissionGroupByOutputType = {
    id: string
    userId: string
    permissionId: string
    createdAt: Date
    createdById: string | null
    updatedById: string | null
    _count: UserPermissionCountAggregateOutputType | null
    _min: UserPermissionMinAggregateOutputType | null
    _max: UserPermissionMaxAggregateOutputType | null
  }

  type GetUserPermissionGroupByPayload<T extends UserPermissionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserPermissionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserPermissionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserPermissionGroupByOutputType[P]>
            : GetScalarType<T[P], UserPermissionGroupByOutputType[P]>
        }
      >
    >


  export type UserPermissionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    permissionId?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
    createdBy?: boolean | UserPermission$createdByArgs<ExtArgs>
    updatedBy?: boolean | UserPermission$updatedByArgs<ExtArgs>
  }, ExtArgs["result"]["userPermission"]>

  export type UserPermissionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    permissionId?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
    createdBy?: boolean | UserPermission$createdByArgs<ExtArgs>
    updatedBy?: boolean | UserPermission$updatedByArgs<ExtArgs>
  }, ExtArgs["result"]["userPermission"]>

  export type UserPermissionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    permissionId?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
    createdBy?: boolean | UserPermission$createdByArgs<ExtArgs>
    updatedBy?: boolean | UserPermission$updatedByArgs<ExtArgs>
  }, ExtArgs["result"]["userPermission"]>

  export type UserPermissionSelectScalar = {
    id?: boolean
    userId?: boolean
    permissionId?: boolean
    createdAt?: boolean
    createdById?: boolean
    updatedById?: boolean
  }

  export type UserPermissionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "userId" | "permissionId" | "createdAt" | "createdById" | "updatedById", ExtArgs["result"]["userPermission"]>
  export type UserPermissionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
    createdBy?: boolean | UserPermission$createdByArgs<ExtArgs>
    updatedBy?: boolean | UserPermission$updatedByArgs<ExtArgs>
  }
  export type UserPermissionIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
    createdBy?: boolean | UserPermission$createdByArgs<ExtArgs>
    updatedBy?: boolean | UserPermission$updatedByArgs<ExtArgs>
  }
  export type UserPermissionIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    permission?: boolean | PermissionDefaultArgs<ExtArgs>
    createdBy?: boolean | UserPermission$createdByArgs<ExtArgs>
    updatedBy?: boolean | UserPermission$updatedByArgs<ExtArgs>
  }

  export type $UserPermissionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserPermission"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      permission: Prisma.$PermissionPayload<ExtArgs>
      createdBy: Prisma.$UserPayload<ExtArgs> | null
      updatedBy: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      permissionId: string
      createdAt: Date
      createdById: string | null
      updatedById: string | null
    }, ExtArgs["result"]["userPermission"]>
    composites: {}
  }

  type UserPermissionGetPayload<S extends boolean | null | undefined | UserPermissionDefaultArgs> = $Result.GetResult<Prisma.$UserPermissionPayload, S>

  type UserPermissionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<UserPermissionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UserPermissionCountAggregateInputType | true
    }

  export interface UserPermissionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserPermission'], meta: { name: 'UserPermission' } }
    /**
     * Find zero or one UserPermission that matches the filter.
     * @param {UserPermissionFindUniqueArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserPermissionFindUniqueArgs>(args: SelectSubset<T, UserPermissionFindUniqueArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one UserPermission that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {UserPermissionFindUniqueOrThrowArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserPermissionFindUniqueOrThrowArgs>(args: SelectSubset<T, UserPermissionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserPermission that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionFindFirstArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserPermissionFindFirstArgs>(args?: SelectSubset<T, UserPermissionFindFirstArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first UserPermission that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionFindFirstOrThrowArgs} args - Arguments to find a UserPermission
     * @example
     * // Get one UserPermission
     * const userPermission = await prisma.userPermission.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserPermissionFindFirstOrThrowArgs>(args?: SelectSubset<T, UserPermissionFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more UserPermissions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserPermissions
     * const userPermissions = await prisma.userPermission.findMany()
     * 
     * // Get first 10 UserPermissions
     * const userPermissions = await prisma.userPermission.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userPermissionWithIdOnly = await prisma.userPermission.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserPermissionFindManyArgs>(args?: SelectSubset<T, UserPermissionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a UserPermission.
     * @param {UserPermissionCreateArgs} args - Arguments to create a UserPermission.
     * @example
     * // Create one UserPermission
     * const UserPermission = await prisma.userPermission.create({
     *   data: {
     *     // ... data to create a UserPermission
     *   }
     * })
     * 
     */
    create<T extends UserPermissionCreateArgs>(args: SelectSubset<T, UserPermissionCreateArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many UserPermissions.
     * @param {UserPermissionCreateManyArgs} args - Arguments to create many UserPermissions.
     * @example
     * // Create many UserPermissions
     * const userPermission = await prisma.userPermission.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserPermissionCreateManyArgs>(args?: SelectSubset<T, UserPermissionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many UserPermissions and returns the data saved in the database.
     * @param {UserPermissionCreateManyAndReturnArgs} args - Arguments to create many UserPermissions.
     * @example
     * // Create many UserPermissions
     * const userPermission = await prisma.userPermission.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many UserPermissions and only return the `id`
     * const userPermissionWithIdOnly = await prisma.userPermission.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends UserPermissionCreateManyAndReturnArgs>(args?: SelectSubset<T, UserPermissionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a UserPermission.
     * @param {UserPermissionDeleteArgs} args - Arguments to delete one UserPermission.
     * @example
     * // Delete one UserPermission
     * const UserPermission = await prisma.userPermission.delete({
     *   where: {
     *     // ... filter to delete one UserPermission
     *   }
     * })
     * 
     */
    delete<T extends UserPermissionDeleteArgs>(args: SelectSubset<T, UserPermissionDeleteArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one UserPermission.
     * @param {UserPermissionUpdateArgs} args - Arguments to update one UserPermission.
     * @example
     * // Update one UserPermission
     * const userPermission = await prisma.userPermission.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserPermissionUpdateArgs>(args: SelectSubset<T, UserPermissionUpdateArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more UserPermissions.
     * @param {UserPermissionDeleteManyArgs} args - Arguments to filter UserPermissions to delete.
     * @example
     * // Delete a few UserPermissions
     * const { count } = await prisma.userPermission.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserPermissionDeleteManyArgs>(args?: SelectSubset<T, UserPermissionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserPermissions
     * const userPermission = await prisma.userPermission.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserPermissionUpdateManyArgs>(args: SelectSubset<T, UserPermissionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserPermissions and returns the data updated in the database.
     * @param {UserPermissionUpdateManyAndReturnArgs} args - Arguments to update many UserPermissions.
     * @example
     * // Update many UserPermissions
     * const userPermission = await prisma.userPermission.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more UserPermissions and only return the `id`
     * const userPermissionWithIdOnly = await prisma.userPermission.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends UserPermissionUpdateManyAndReturnArgs>(args: SelectSubset<T, UserPermissionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one UserPermission.
     * @param {UserPermissionUpsertArgs} args - Arguments to update or create a UserPermission.
     * @example
     * // Update or create a UserPermission
     * const userPermission = await prisma.userPermission.upsert({
     *   create: {
     *     // ... data to create a UserPermission
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserPermission we want to update
     *   }
     * })
     */
    upsert<T extends UserPermissionUpsertArgs>(args: SelectSubset<T, UserPermissionUpsertArgs<ExtArgs>>): Prisma__UserPermissionClient<$Result.GetResult<Prisma.$UserPermissionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of UserPermissions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionCountArgs} args - Arguments to filter UserPermissions to count.
     * @example
     * // Count the number of UserPermissions
     * const count = await prisma.userPermission.count({
     *   where: {
     *     // ... the filter for the UserPermissions we want to count
     *   }
     * })
    **/
    count<T extends UserPermissionCountArgs>(
      args?: Subset<T, UserPermissionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserPermissionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserPermissionAggregateArgs>(args: Subset<T, UserPermissionAggregateArgs>): Prisma.PrismaPromise<GetUserPermissionAggregateType<T>>

    /**
     * Group by UserPermission.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserPermissionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserPermissionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserPermissionGroupByArgs['orderBy'] }
        : { orderBy?: UserPermissionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserPermissionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserPermissionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserPermission model
   */
  readonly fields: UserPermissionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserPermission.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserPermissionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    permission<T extends PermissionDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PermissionDefaultArgs<ExtArgs>>): Prisma__PermissionClient<$Result.GetResult<Prisma.$PermissionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    createdBy<T extends UserPermission$createdByArgs<ExtArgs> = {}>(args?: Subset<T, UserPermission$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    updatedBy<T extends UserPermission$updatedByArgs<ExtArgs> = {}>(args?: Subset<T, UserPermission$updatedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the UserPermission model
   */
  interface UserPermissionFieldRefs {
    readonly id: FieldRef<"UserPermission", 'String'>
    readonly userId: FieldRef<"UserPermission", 'String'>
    readonly permissionId: FieldRef<"UserPermission", 'String'>
    readonly createdAt: FieldRef<"UserPermission", 'DateTime'>
    readonly createdById: FieldRef<"UserPermission", 'String'>
    readonly updatedById: FieldRef<"UserPermission", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserPermission findUnique
   */
  export type UserPermissionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where: UserPermissionWhereUniqueInput
  }

  /**
   * UserPermission findUniqueOrThrow
   */
  export type UserPermissionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where: UserPermissionWhereUniqueInput
  }

  /**
   * UserPermission findFirst
   */
  export type UserPermissionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPermissions.
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPermissions.
     */
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * UserPermission findFirstOrThrow
   */
  export type UserPermissionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermission to fetch.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserPermissions.
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserPermissions.
     */
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * UserPermission findMany
   */
  export type UserPermissionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter, which UserPermissions to fetch.
     */
    where?: UserPermissionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserPermissions to fetch.
     */
    orderBy?: UserPermissionOrderByWithRelationInput | UserPermissionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserPermissions.
     */
    cursor?: UserPermissionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserPermissions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserPermissions.
     */
    skip?: number
    distinct?: UserPermissionScalarFieldEnum | UserPermissionScalarFieldEnum[]
  }

  /**
   * UserPermission create
   */
  export type UserPermissionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * The data needed to create a UserPermission.
     */
    data: XOR<UserPermissionCreateInput, UserPermissionUncheckedCreateInput>
  }

  /**
   * UserPermission createMany
   */
  export type UserPermissionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserPermissions.
     */
    data: UserPermissionCreateManyInput | UserPermissionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserPermission createManyAndReturn
   */
  export type UserPermissionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * The data used to create many UserPermissions.
     */
    data: UserPermissionCreateManyInput | UserPermissionCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserPermission update
   */
  export type UserPermissionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * The data needed to update a UserPermission.
     */
    data: XOR<UserPermissionUpdateInput, UserPermissionUncheckedUpdateInput>
    /**
     * Choose, which UserPermission to update.
     */
    where: UserPermissionWhereUniqueInput
  }

  /**
   * UserPermission updateMany
   */
  export type UserPermissionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserPermissions.
     */
    data: XOR<UserPermissionUpdateManyMutationInput, UserPermissionUncheckedUpdateManyInput>
    /**
     * Filter which UserPermissions to update
     */
    where?: UserPermissionWhereInput
    /**
     * Limit how many UserPermissions to update.
     */
    limit?: number
  }

  /**
   * UserPermission updateManyAndReturn
   */
  export type UserPermissionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * The data used to update UserPermissions.
     */
    data: XOR<UserPermissionUpdateManyMutationInput, UserPermissionUncheckedUpdateManyInput>
    /**
     * Filter which UserPermissions to update
     */
    where?: UserPermissionWhereInput
    /**
     * Limit how many UserPermissions to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * UserPermission upsert
   */
  export type UserPermissionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * The filter to search for the UserPermission to update in case it exists.
     */
    where: UserPermissionWhereUniqueInput
    /**
     * In case the UserPermission found by the `where` argument doesn't exist, create a new UserPermission with this data.
     */
    create: XOR<UserPermissionCreateInput, UserPermissionUncheckedCreateInput>
    /**
     * In case the UserPermission was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserPermissionUpdateInput, UserPermissionUncheckedUpdateInput>
  }

  /**
   * UserPermission delete
   */
  export type UserPermissionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
    /**
     * Filter which UserPermission to delete.
     */
    where: UserPermissionWhereUniqueInput
  }

  /**
   * UserPermission deleteMany
   */
  export type UserPermissionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserPermissions to delete
     */
    where?: UserPermissionWhereInput
    /**
     * Limit how many UserPermissions to delete.
     */
    limit?: number
  }

  /**
   * UserPermission.createdBy
   */
  export type UserPermission$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * UserPermission.updatedBy
   */
  export type UserPermission$updatedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * UserPermission without action
   */
  export type UserPermissionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserPermission
     */
    select?: UserPermissionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the UserPermission
     */
    omit?: UserPermissionOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserPermissionInclude<ExtArgs> | null
  }


  /**
   * Model Profile
   */

  export type AggregateProfile = {
    _count: ProfileCountAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  export type ProfileMinAggregateOutputType = {
    id: string | null
    name: string | null
    department: string | null
    position: string | null
    joinDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
    userId: string | null
  }

  export type ProfileMaxAggregateOutputType = {
    id: string | null
    name: string | null
    department: string | null
    position: string | null
    joinDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
    userId: string | null
  }

  export type ProfileCountAggregateOutputType = {
    id: number
    name: number
    department: number
    position: number
    joinDate: number
    createdAt: number
    updatedAt: number
    createdById: number
    updatedById: number
    userId: number
    _all: number
  }


  export type ProfileMinAggregateInputType = {
    id?: true
    name?: true
    department?: true
    position?: true
    joinDate?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    userId?: true
  }

  export type ProfileMaxAggregateInputType = {
    id?: true
    name?: true
    department?: true
    position?: true
    joinDate?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    userId?: true
  }

  export type ProfileCountAggregateInputType = {
    id?: true
    name?: true
    department?: true
    position?: true
    joinDate?: true
    createdAt?: true
    updatedAt?: true
    createdById?: true
    updatedById?: true
    userId?: true
    _all?: true
  }

  export type ProfileAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profile to aggregate.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Profiles
    **/
    _count?: true | ProfileCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProfileMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProfileMaxAggregateInputType
  }

  export type GetProfileAggregateType<T extends ProfileAggregateArgs> = {
        [P in keyof T & keyof AggregateProfile]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProfile[P]>
      : GetScalarType<T[P], AggregateProfile[P]>
  }




  export type ProfileGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProfileWhereInput
    orderBy?: ProfileOrderByWithAggregationInput | ProfileOrderByWithAggregationInput[]
    by: ProfileScalarFieldEnum[] | ProfileScalarFieldEnum
    having?: ProfileScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProfileCountAggregateInputType | true
    _min?: ProfileMinAggregateInputType
    _max?: ProfileMaxAggregateInputType
  }

  export type ProfileGroupByOutputType = {
    id: string
    name: string | null
    department: string | null
    position: string | null
    joinDate: Date | null
    createdAt: Date | null
    updatedAt: Date | null
    createdById: string | null
    updatedById: string | null
    userId: string
    _count: ProfileCountAggregateOutputType | null
    _min: ProfileMinAggregateOutputType | null
    _max: ProfileMaxAggregateOutputType | null
  }

  type GetProfileGroupByPayload<T extends ProfileGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProfileGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProfileGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProfileGroupByOutputType[P]>
            : GetScalarType<T[P], ProfileGroupByOutputType[P]>
        }
      >
    >


  export type ProfileSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    department?: boolean
    position?: boolean
    joinDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    userId?: boolean
    createdBy?: boolean | Profile$createdByArgs<ExtArgs>
    updatedBy?: boolean | Profile$updatedByArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    department?: boolean
    position?: boolean
    joinDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    userId?: boolean
    createdBy?: boolean | Profile$createdByArgs<ExtArgs>
    updatedBy?: boolean | Profile$updatedByArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    department?: boolean
    position?: boolean
    joinDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    userId?: boolean
    createdBy?: boolean | Profile$createdByArgs<ExtArgs>
    updatedBy?: boolean | Profile$updatedByArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["profile"]>

  export type ProfileSelectScalar = {
    id?: boolean
    name?: boolean
    department?: boolean
    position?: boolean
    joinDate?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    createdById?: boolean
    updatedById?: boolean
    userId?: boolean
  }

  export type ProfileOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "name" | "department" | "position" | "joinDate" | "createdAt" | "updatedAt" | "createdById" | "updatedById" | "userId", ExtArgs["result"]["profile"]>
  export type ProfileInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | Profile$createdByArgs<ExtArgs>
    updatedBy?: boolean | Profile$updatedByArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ProfileIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | Profile$createdByArgs<ExtArgs>
    updatedBy?: boolean | Profile$updatedByArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }
  export type ProfileIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    createdBy?: boolean | Profile$createdByArgs<ExtArgs>
    updatedBy?: boolean | Profile$updatedByArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ProfilePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Profile"
    objects: {
      createdBy: Prisma.$UserPayload<ExtArgs> | null
      updatedBy: Prisma.$UserPayload<ExtArgs> | null
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      department: string | null
      position: string | null
      joinDate: Date | null
      createdAt: Date | null
      updatedAt: Date | null
      createdById: string | null
      updatedById: string | null
      userId: string
    }, ExtArgs["result"]["profile"]>
    composites: {}
  }

  type ProfileGetPayload<S extends boolean | null | undefined | ProfileDefaultArgs> = $Result.GetResult<Prisma.$ProfilePayload, S>

  type ProfileCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<ProfileFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: ProfileCountAggregateInputType | true
    }

  export interface ProfileDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Profile'], meta: { name: 'Profile' } }
    /**
     * Find zero or one Profile that matches the filter.
     * @param {ProfileFindUniqueArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProfileFindUniqueArgs>(args: SelectSubset<T, ProfileFindUniqueArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Profile that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {ProfileFindUniqueOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProfileFindUniqueOrThrowArgs>(args: SelectSubset<T, ProfileFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Profile that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProfileFindFirstArgs>(args?: SelectSubset<T, ProfileFindFirstArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Profile that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindFirstOrThrowArgs} args - Arguments to find a Profile
     * @example
     * // Get one Profile
     * const profile = await prisma.profile.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProfileFindFirstOrThrowArgs>(args?: SelectSubset<T, ProfileFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Profiles that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Profiles
     * const profiles = await prisma.profile.findMany()
     * 
     * // Get first 10 Profiles
     * const profiles = await prisma.profile.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const profileWithIdOnly = await prisma.profile.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProfileFindManyArgs>(args?: SelectSubset<T, ProfileFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Profile.
     * @param {ProfileCreateArgs} args - Arguments to create a Profile.
     * @example
     * // Create one Profile
     * const Profile = await prisma.profile.create({
     *   data: {
     *     // ... data to create a Profile
     *   }
     * })
     * 
     */
    create<T extends ProfileCreateArgs>(args: SelectSubset<T, ProfileCreateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Profiles.
     * @param {ProfileCreateManyArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profile = await prisma.profile.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProfileCreateManyArgs>(args?: SelectSubset<T, ProfileCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Profiles and returns the data saved in the database.
     * @param {ProfileCreateManyAndReturnArgs} args - Arguments to create many Profiles.
     * @example
     * // Create many Profiles
     * const profile = await prisma.profile.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Profiles and only return the `id`
     * const profileWithIdOnly = await prisma.profile.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends ProfileCreateManyAndReturnArgs>(args?: SelectSubset<T, ProfileCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Profile.
     * @param {ProfileDeleteArgs} args - Arguments to delete one Profile.
     * @example
     * // Delete one Profile
     * const Profile = await prisma.profile.delete({
     *   where: {
     *     // ... filter to delete one Profile
     *   }
     * })
     * 
     */
    delete<T extends ProfileDeleteArgs>(args: SelectSubset<T, ProfileDeleteArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Profile.
     * @param {ProfileUpdateArgs} args - Arguments to update one Profile.
     * @example
     * // Update one Profile
     * const profile = await prisma.profile.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProfileUpdateArgs>(args: SelectSubset<T, ProfileUpdateArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Profiles.
     * @param {ProfileDeleteManyArgs} args - Arguments to filter Profiles to delete.
     * @example
     * // Delete a few Profiles
     * const { count } = await prisma.profile.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProfileDeleteManyArgs>(args?: SelectSubset<T, ProfileDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProfileUpdateManyArgs>(args: SelectSubset<T, ProfileUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Profiles and returns the data updated in the database.
     * @param {ProfileUpdateManyAndReturnArgs} args - Arguments to update many Profiles.
     * @example
     * // Update many Profiles
     * const profile = await prisma.profile.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Profiles and only return the `id`
     * const profileWithIdOnly = await prisma.profile.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends ProfileUpdateManyAndReturnArgs>(args: SelectSubset<T, ProfileUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Profile.
     * @param {ProfileUpsertArgs} args - Arguments to update or create a Profile.
     * @example
     * // Update or create a Profile
     * const profile = await prisma.profile.upsert({
     *   create: {
     *     // ... data to create a Profile
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Profile we want to update
     *   }
     * })
     */
    upsert<T extends ProfileUpsertArgs>(args: SelectSubset<T, ProfileUpsertArgs<ExtArgs>>): Prisma__ProfileClient<$Result.GetResult<Prisma.$ProfilePayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Profiles.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileCountArgs} args - Arguments to filter Profiles to count.
     * @example
     * // Count the number of Profiles
     * const count = await prisma.profile.count({
     *   where: {
     *     // ... the filter for the Profiles we want to count
     *   }
     * })
    **/
    count<T extends ProfileCountArgs>(
      args?: Subset<T, ProfileCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProfileCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProfileAggregateArgs>(args: Subset<T, ProfileAggregateArgs>): Prisma.PrismaPromise<GetProfileAggregateType<T>>

    /**
     * Group by Profile.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProfileGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProfileGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProfileGroupByArgs['orderBy'] }
        : { orderBy?: ProfileGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProfileGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProfileGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Profile model
   */
  readonly fields: ProfileFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Profile.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProfileClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    createdBy<T extends Profile$createdByArgs<ExtArgs> = {}>(args?: Subset<T, Profile$createdByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    updatedBy<T extends Profile$updatedByArgs<ExtArgs> = {}>(args?: Subset<T, Profile$updatedByArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Profile model
   */
  interface ProfileFieldRefs {
    readonly id: FieldRef<"Profile", 'String'>
    readonly name: FieldRef<"Profile", 'String'>
    readonly department: FieldRef<"Profile", 'String'>
    readonly position: FieldRef<"Profile", 'String'>
    readonly joinDate: FieldRef<"Profile", 'DateTime'>
    readonly createdAt: FieldRef<"Profile", 'DateTime'>
    readonly updatedAt: FieldRef<"Profile", 'DateTime'>
    readonly createdById: FieldRef<"Profile", 'String'>
    readonly updatedById: FieldRef<"Profile", 'String'>
    readonly userId: FieldRef<"Profile", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Profile findUnique
   */
  export type ProfileFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findUniqueOrThrow
   */
  export type ProfileFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile findFirst
   */
  export type ProfileFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findFirstOrThrow
   */
  export type ProfileFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profile to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Profiles.
     */
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile findMany
   */
  export type ProfileFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter, which Profiles to fetch.
     */
    where?: ProfileWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Profiles to fetch.
     */
    orderBy?: ProfileOrderByWithRelationInput | ProfileOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Profiles.
     */
    cursor?: ProfileWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Profiles from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Profiles.
     */
    skip?: number
    distinct?: ProfileScalarFieldEnum | ProfileScalarFieldEnum[]
  }

  /**
   * Profile create
   */
  export type ProfileCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to create a Profile.
     */
    data: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
  }

  /**
   * Profile createMany
   */
  export type ProfileCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Profile createManyAndReturn
   */
  export type ProfileCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * The data used to create many Profiles.
     */
    data: ProfileCreateManyInput | ProfileCreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * Profile update
   */
  export type ProfileUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The data needed to update a Profile.
     */
    data: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
    /**
     * Choose, which Profile to update.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile updateMany
   */
  export type ProfileUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
    /**
     * Limit how many Profiles to update.
     */
    limit?: number
  }

  /**
   * Profile updateManyAndReturn
   */
  export type ProfileUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * The data used to update Profiles.
     */
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyInput>
    /**
     * Filter which Profiles to update
     */
    where?: ProfileWhereInput
    /**
     * Limit how many Profiles to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * Profile upsert
   */
  export type ProfileUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * The filter to search for the Profile to update in case it exists.
     */
    where: ProfileWhereUniqueInput
    /**
     * In case the Profile found by the `where` argument doesn't exist, create a new Profile with this data.
     */
    create: XOR<ProfileCreateInput, ProfileUncheckedCreateInput>
    /**
     * In case the Profile was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProfileUpdateInput, ProfileUncheckedUpdateInput>
  }

  /**
   * Profile delete
   */
  export type ProfileDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
    /**
     * Filter which Profile to delete.
     */
    where: ProfileWhereUniqueInput
  }

  /**
   * Profile deleteMany
   */
  export type ProfileDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Profiles to delete
     */
    where?: ProfileWhereInput
    /**
     * Limit how many Profiles to delete.
     */
    limit?: number
  }

  /**
   * Profile.createdBy
   */
  export type Profile$createdByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Profile.updatedBy
   */
  export type Profile$updatedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Omit specific fields from the User
     */
    omit?: UserOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }

  /**
   * Profile without action
   */
  export type ProfileDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Profile
     */
    select?: ProfileSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Profile
     */
    omit?: ProfileOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProfileInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    sid: string | null
    expire: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    sid: string | null
    expire: Date | null
  }

  export type SessionCountAggregateOutputType = {
    sid: number
    sess: number
    expire: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    sid?: true
    expire?: true
  }

  export type SessionMaxAggregateInputType = {
    sid?: true
    expire?: true
  }

  export type SessionCountAggregateInputType = {
    sid?: true
    sess?: true
    expire?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    sid: string
    sess: JsonValue
    expire: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sid?: boolean
    sess?: boolean
    expire?: boolean
  }, ExtArgs["result"]["session"]>

  export type SessionSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sid?: boolean
    sess?: boolean
    expire?: boolean
  }, ExtArgs["result"]["session"]>

  export type SessionSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    sid?: boolean
    sess?: boolean
    expire?: boolean
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    sid?: boolean
    sess?: boolean
    expire?: boolean
  }

  export type SessionOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"sid" | "sess" | "expire", ExtArgs["result"]["session"]>

  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      sid: string
      sess: Prisma.JsonValue
      expire: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }

  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends SessionFindUniqueArgs>(args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Session that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs>(args: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends SessionFindFirstArgs>(args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs>(args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `sid`
     * const sessionWithSidOnly = await prisma.session.findMany({ select: { sid: true } })
     * 
     */
    findMany<T extends SessionFindManyArgs>(args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
     */
    create<T extends SessionCreateArgs>(args: SelectSubset<T, SessionCreateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Sessions.
     * @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends SessionCreateManyArgs>(args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Sessions and returns the data saved in the database.
     * @param {SessionCreateManyAndReturnArgs} args - Arguments to create many Sessions.
     * @example
     * // Create many Sessions
     * const session = await prisma.session.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Sessions and only return the `sid`
     * const sessionWithSidOnly = await prisma.session.createManyAndReturn({
     *   select: { sid: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends SessionCreateManyAndReturnArgs>(args?: SelectSubset<T, SessionCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
     */
    delete<T extends SessionDeleteArgs>(args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends SessionUpdateArgs>(args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends SessionDeleteManyArgs>(args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends SessionUpdateManyArgs>(args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions and returns the data updated in the database.
     * @param {SessionUpdateManyAndReturnArgs} args - Arguments to update many Sessions.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Sessions and only return the `sid`
     * const sessionWithSidOnly = await prisma.session.updateManyAndReturn({
     *   select: { sid: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends SessionUpdateManyAndReturnArgs>(args: SelectSubset<T, SessionUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
     */
    upsert<T extends SessionUpsertArgs>(args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Session model
   */
  interface SessionFieldRefs {
    readonly sid: FieldRef<"Session", 'String'>
    readonly sess: FieldRef<"Session", 'Json'>
    readonly expire: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session createManyAndReturn
   */
  export type SessionCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session updateManyAndReturn
   */
  export type SessionUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to update.
     */
    limit?: number
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
    /**
     * Limit how many Sessions to delete.
     */
    limit?: number
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Omit specific fields from the Session
     */
    omit?: SessionOmit<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ReportCategoryScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    parentId: 'parentId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type ReportCategoryScalarFieldEnum = (typeof ReportCategoryScalarFieldEnum)[keyof typeof ReportCategoryScalarFieldEnum]


  export const ReportScalarFieldEnum: {
    id: 'id',
    categoryId: 'categoryId',
    periodYear: 'periodYear',
    periodMonth: 'periodMonth',
    periodDate: 'periodDate',
    version: 'version',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById',
    organizationId: 'organizationId'
  };

  export type ReportScalarFieldEnum = (typeof ReportScalarFieldEnum)[keyof typeof ReportScalarFieldEnum]


  export const FileScalarFieldEnum: {
    id: 'id',
    filename: 'filename',
    path: 'path',
    mimeType: 'mimeType',
    size: 'size',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    reportId: 'reportId'
  };

  export type FileScalarFieldEnum = (typeof FileScalarFieldEnum)[keyof typeof FileScalarFieldEnum]


  export const NoteScalarFieldEnum: {
    id: 'id',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById',
    reportId: 'reportId'
  };

  export type NoteScalarFieldEnum = (typeof NoteScalarFieldEnum)[keyof typeof NoteScalarFieldEnum]


  export const StageScalarFieldEnum: {
    id: 'id',
    stageTypeId: 'stageTypeId',
    comment: 'comment',
    createdById: 'createdById',
    updatedById: 'updatedById',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    reportId: 'reportId'
  };

  export type StageScalarFieldEnum = (typeof StageScalarFieldEnum)[keyof typeof StageScalarFieldEnum]


  export const StageTypeScalarFieldEnum: {
    id: 'id',
    model: 'model',
    order: 'order',
    value: 'value',
    label: 'label'
  };

  export type StageTypeScalarFieldEnum = (typeof StageTypeScalarFieldEnum)[keyof typeof StageTypeScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    password: 'password',
    status: 'status',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    departmentId: 'departmentId',
    organizationId: 'organizationId',
    roleId: 'roleId'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const OrganizationScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code'
  };

  export type OrganizationScalarFieldEnum = (typeof OrganizationScalarFieldEnum)[keyof typeof OrganizationScalarFieldEnum]


  export const RoleScalarFieldEnum: {
    id: 'id',
    name: 'name',
    level: 'level'
  };

  export type RoleScalarFieldEnum = (typeof RoleScalarFieldEnum)[keyof typeof RoleScalarFieldEnum]


  export const DepartmentScalarFieldEnum: {
    id: 'id',
    name: 'name',
    code: 'code',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type DepartmentScalarFieldEnum = (typeof DepartmentScalarFieldEnum)[keyof typeof DepartmentScalarFieldEnum]


  export const PermissionScalarFieldEnum: {
    id: 'id',
    name: 'name',
    resource: 'resource',
    action: 'action',
    description: 'description',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type PermissionScalarFieldEnum = (typeof PermissionScalarFieldEnum)[keyof typeof PermissionScalarFieldEnum]


  export const DepartmentPermissionScalarFieldEnum: {
    id: 'id',
    departmentId: 'departmentId',
    permissionId: 'permissionId',
    createdAt: 'createdAt',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type DepartmentPermissionScalarFieldEnum = (typeof DepartmentPermissionScalarFieldEnum)[keyof typeof DepartmentPermissionScalarFieldEnum]


  export const UserPermissionScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    permissionId: 'permissionId',
    createdAt: 'createdAt',
    createdById: 'createdById',
    updatedById: 'updatedById'
  };

  export type UserPermissionScalarFieldEnum = (typeof UserPermissionScalarFieldEnum)[keyof typeof UserPermissionScalarFieldEnum]


  export const ProfileScalarFieldEnum: {
    id: 'id',
    name: 'name',
    department: 'department',
    position: 'position',
    joinDate: 'joinDate',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    createdById: 'createdById',
    updatedById: 'updatedById',
    userId: 'userId'
  };

  export type ProfileScalarFieldEnum = (typeof ProfileScalarFieldEnum)[keyof typeof ProfileScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    sid: 'sid',
    sess: 'sess',
    expire: 'expire'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const JsonNullValueInput: {
    JsonNull: typeof JsonNull
  };

  export type JsonNullValueInput = (typeof JsonNullValueInput)[keyof typeof JsonNullValueInput]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  export const JsonNullValueFilter: {
    DbNull: typeof DbNull,
    JsonNull: typeof JsonNull,
    AnyNull: typeof AnyNull
  };

  export type JsonNullValueFilter = (typeof JsonNullValueFilter)[keyof typeof JsonNullValueFilter]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'UserStatus'
   */
  export type EnumUserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserStatus'>
    


  /**
   * Reference to a field of type 'UserStatus[]'
   */
  export type ListEnumUserStatusFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'UserStatus[]'>
    


  /**
   * Reference to a field of type 'Json'
   */
  export type JsonFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Json'>
    


  /**
   * Reference to a field of type 'QueryMode'
   */
  export type EnumQueryModeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'QueryMode'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    
  /**
   * Deep Input Types
   */


  export type ReportCategoryWhereInput = {
    AND?: ReportCategoryWhereInput | ReportCategoryWhereInput[]
    OR?: ReportCategoryWhereInput[]
    NOT?: ReportCategoryWhereInput | ReportCategoryWhereInput[]
    id?: StringFilter<"ReportCategory"> | string
    name?: StringFilter<"ReportCategory"> | string
    code?: StringFilter<"ReportCategory"> | string
    parentId?: StringNullableFilter<"ReportCategory"> | string | null
    createdAt?: DateTimeFilter<"ReportCategory"> | Date | string
    updatedAt?: DateTimeFilter<"ReportCategory"> | Date | string
    createdById?: StringNullableFilter<"ReportCategory"> | string | null
    updatedById?: StringNullableFilter<"ReportCategory"> | string | null
    parent?: XOR<ReportCategoryNullableScalarRelationFilter, ReportCategoryWhereInput> | null
    children?: ReportCategoryListRelationFilter
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    reports?: ReportListRelationFilter
  }

  export type ReportCategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    parentId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    parent?: ReportCategoryOrderByWithRelationInput
    children?: ReportCategoryOrderByRelationAggregateInput
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
    reports?: ReportOrderByRelationAggregateInput
  }

  export type ReportCategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    code?: string
    AND?: ReportCategoryWhereInput | ReportCategoryWhereInput[]
    OR?: ReportCategoryWhereInput[]
    NOT?: ReportCategoryWhereInput | ReportCategoryWhereInput[]
    parentId?: StringNullableFilter<"ReportCategory"> | string | null
    createdAt?: DateTimeFilter<"ReportCategory"> | Date | string
    updatedAt?: DateTimeFilter<"ReportCategory"> | Date | string
    createdById?: StringNullableFilter<"ReportCategory"> | string | null
    updatedById?: StringNullableFilter<"ReportCategory"> | string | null
    parent?: XOR<ReportCategoryNullableScalarRelationFilter, ReportCategoryWhereInput> | null
    children?: ReportCategoryListRelationFilter
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    reports?: ReportListRelationFilter
  }, "id" | "name" | "code">

  export type ReportCategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    parentId?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    _count?: ReportCategoryCountOrderByAggregateInput
    _max?: ReportCategoryMaxOrderByAggregateInput
    _min?: ReportCategoryMinOrderByAggregateInput
  }

  export type ReportCategoryScalarWhereWithAggregatesInput = {
    AND?: ReportCategoryScalarWhereWithAggregatesInput | ReportCategoryScalarWhereWithAggregatesInput[]
    OR?: ReportCategoryScalarWhereWithAggregatesInput[]
    NOT?: ReportCategoryScalarWhereWithAggregatesInput | ReportCategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"ReportCategory"> | string
    name?: StringWithAggregatesFilter<"ReportCategory"> | string
    code?: StringWithAggregatesFilter<"ReportCategory"> | string
    parentId?: StringNullableWithAggregatesFilter<"ReportCategory"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"ReportCategory"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"ReportCategory"> | Date | string
    createdById?: StringNullableWithAggregatesFilter<"ReportCategory"> | string | null
    updatedById?: StringNullableWithAggregatesFilter<"ReportCategory"> | string | null
  }

  export type ReportWhereInput = {
    AND?: ReportWhereInput | ReportWhereInput[]
    OR?: ReportWhereInput[]
    NOT?: ReportWhereInput | ReportWhereInput[]
    id?: StringFilter<"Report"> | string
    categoryId?: StringFilter<"Report"> | string
    periodYear?: StringFilter<"Report"> | string
    periodMonth?: StringFilter<"Report"> | string
    periodDate?: StringNullableFilter<"Report"> | string | null
    version?: IntFilter<"Report"> | number
    createdAt?: DateTimeFilter<"Report"> | Date | string
    updatedAt?: DateTimeFilter<"Report"> | Date | string
    createdById?: StringNullableFilter<"Report"> | string | null
    updatedById?: StringNullableFilter<"Report"> | string | null
    organizationId?: StringNullableFilter<"Report"> | string | null
    category?: XOR<ReportCategoryScalarRelationFilter, ReportCategoryWhereInput>
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
    notes?: NoteListRelationFilter
    stages?: StageListRelationFilter
    files?: FileListRelationFilter
  }

  export type ReportOrderByWithRelationInput = {
    id?: SortOrder
    categoryId?: SortOrder
    periodYear?: SortOrder
    periodMonth?: SortOrder
    periodDate?: SortOrderInput | SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    organizationId?: SortOrderInput | SortOrder
    category?: ReportCategoryOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
    organization?: OrganizationOrderByWithRelationInput
    notes?: NoteOrderByRelationAggregateInput
    stages?: StageOrderByRelationAggregateInput
    files?: FileOrderByRelationAggregateInput
  }

  export type ReportWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ReportWhereInput | ReportWhereInput[]
    OR?: ReportWhereInput[]
    NOT?: ReportWhereInput | ReportWhereInput[]
    categoryId?: StringFilter<"Report"> | string
    periodYear?: StringFilter<"Report"> | string
    periodMonth?: StringFilter<"Report"> | string
    periodDate?: StringNullableFilter<"Report"> | string | null
    version?: IntFilter<"Report"> | number
    createdAt?: DateTimeFilter<"Report"> | Date | string
    updatedAt?: DateTimeFilter<"Report"> | Date | string
    createdById?: StringNullableFilter<"Report"> | string | null
    updatedById?: StringNullableFilter<"Report"> | string | null
    organizationId?: StringNullableFilter<"Report"> | string | null
    category?: XOR<ReportCategoryScalarRelationFilter, ReportCategoryWhereInput>
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
    notes?: NoteListRelationFilter
    stages?: StageListRelationFilter
    files?: FileListRelationFilter
  }, "id">

  export type ReportOrderByWithAggregationInput = {
    id?: SortOrder
    categoryId?: SortOrder
    periodYear?: SortOrder
    periodMonth?: SortOrder
    periodDate?: SortOrderInput | SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    organizationId?: SortOrderInput | SortOrder
    _count?: ReportCountOrderByAggregateInput
    _avg?: ReportAvgOrderByAggregateInput
    _max?: ReportMaxOrderByAggregateInput
    _min?: ReportMinOrderByAggregateInput
    _sum?: ReportSumOrderByAggregateInput
  }

  export type ReportScalarWhereWithAggregatesInput = {
    AND?: ReportScalarWhereWithAggregatesInput | ReportScalarWhereWithAggregatesInput[]
    OR?: ReportScalarWhereWithAggregatesInput[]
    NOT?: ReportScalarWhereWithAggregatesInput | ReportScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Report"> | string
    categoryId?: StringWithAggregatesFilter<"Report"> | string
    periodYear?: StringWithAggregatesFilter<"Report"> | string
    periodMonth?: StringWithAggregatesFilter<"Report"> | string
    periodDate?: StringNullableWithAggregatesFilter<"Report"> | string | null
    version?: IntWithAggregatesFilter<"Report"> | number
    createdAt?: DateTimeWithAggregatesFilter<"Report"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Report"> | Date | string
    createdById?: StringNullableWithAggregatesFilter<"Report"> | string | null
    updatedById?: StringNullableWithAggregatesFilter<"Report"> | string | null
    organizationId?: StringNullableWithAggregatesFilter<"Report"> | string | null
  }

  export type FileWhereInput = {
    AND?: FileWhereInput | FileWhereInput[]
    OR?: FileWhereInput[]
    NOT?: FileWhereInput | FileWhereInput[]
    id?: StringFilter<"File"> | string
    filename?: StringFilter<"File"> | string
    path?: StringFilter<"File"> | string
    mimeType?: StringNullableFilter<"File"> | string | null
    size?: IntNullableFilter<"File"> | number | null
    createdAt?: DateTimeFilter<"File"> | Date | string
    updatedAt?: DateTimeFilter<"File"> | Date | string
    reportId?: StringNullableFilter<"File"> | string | null
    report?: XOR<ReportNullableScalarRelationFilter, ReportWhereInput> | null
  }

  export type FileOrderByWithRelationInput = {
    id?: SortOrder
    filename?: SortOrder
    path?: SortOrder
    mimeType?: SortOrderInput | SortOrder
    size?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reportId?: SortOrderInput | SortOrder
    report?: ReportOrderByWithRelationInput
  }

  export type FileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: FileWhereInput | FileWhereInput[]
    OR?: FileWhereInput[]
    NOT?: FileWhereInput | FileWhereInput[]
    filename?: StringFilter<"File"> | string
    path?: StringFilter<"File"> | string
    mimeType?: StringNullableFilter<"File"> | string | null
    size?: IntNullableFilter<"File"> | number | null
    createdAt?: DateTimeFilter<"File"> | Date | string
    updatedAt?: DateTimeFilter<"File"> | Date | string
    reportId?: StringNullableFilter<"File"> | string | null
    report?: XOR<ReportNullableScalarRelationFilter, ReportWhereInput> | null
  }, "id">

  export type FileOrderByWithAggregationInput = {
    id?: SortOrder
    filename?: SortOrder
    path?: SortOrder
    mimeType?: SortOrderInput | SortOrder
    size?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reportId?: SortOrderInput | SortOrder
    _count?: FileCountOrderByAggregateInput
    _avg?: FileAvgOrderByAggregateInput
    _max?: FileMaxOrderByAggregateInput
    _min?: FileMinOrderByAggregateInput
    _sum?: FileSumOrderByAggregateInput
  }

  export type FileScalarWhereWithAggregatesInput = {
    AND?: FileScalarWhereWithAggregatesInput | FileScalarWhereWithAggregatesInput[]
    OR?: FileScalarWhereWithAggregatesInput[]
    NOT?: FileScalarWhereWithAggregatesInput | FileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"File"> | string
    filename?: StringWithAggregatesFilter<"File"> | string
    path?: StringWithAggregatesFilter<"File"> | string
    mimeType?: StringNullableWithAggregatesFilter<"File"> | string | null
    size?: IntNullableWithAggregatesFilter<"File"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"File"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"File"> | Date | string
    reportId?: StringNullableWithAggregatesFilter<"File"> | string | null
  }

  export type NoteWhereInput = {
    AND?: NoteWhereInput | NoteWhereInput[]
    OR?: NoteWhereInput[]
    NOT?: NoteWhereInput | NoteWhereInput[]
    id?: StringFilter<"Note"> | string
    description?: StringNullableFilter<"Note"> | string | null
    createdAt?: DateTimeNullableFilter<"Note"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Note"> | Date | string | null
    createdById?: StringNullableFilter<"Note"> | string | null
    updatedById?: StringNullableFilter<"Note"> | string | null
    reportId?: StringNullableFilter<"Note"> | string | null
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    report?: XOR<ReportNullableScalarRelationFilter, ReportWhereInput> | null
  }

  export type NoteOrderByWithRelationInput = {
    id?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    reportId?: SortOrderInput | SortOrder
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
    report?: ReportOrderByWithRelationInput
  }

  export type NoteWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NoteWhereInput | NoteWhereInput[]
    OR?: NoteWhereInput[]
    NOT?: NoteWhereInput | NoteWhereInput[]
    description?: StringNullableFilter<"Note"> | string | null
    createdAt?: DateTimeNullableFilter<"Note"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Note"> | Date | string | null
    createdById?: StringNullableFilter<"Note"> | string | null
    updatedById?: StringNullableFilter<"Note"> | string | null
    reportId?: StringNullableFilter<"Note"> | string | null
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    report?: XOR<ReportNullableScalarRelationFilter, ReportWhereInput> | null
  }, "id">

  export type NoteOrderByWithAggregationInput = {
    id?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    reportId?: SortOrderInput | SortOrder
    _count?: NoteCountOrderByAggregateInput
    _max?: NoteMaxOrderByAggregateInput
    _min?: NoteMinOrderByAggregateInput
  }

  export type NoteScalarWhereWithAggregatesInput = {
    AND?: NoteScalarWhereWithAggregatesInput | NoteScalarWhereWithAggregatesInput[]
    OR?: NoteScalarWhereWithAggregatesInput[]
    NOT?: NoteScalarWhereWithAggregatesInput | NoteScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Note"> | string
    description?: StringNullableWithAggregatesFilter<"Note"> | string | null
    createdAt?: DateTimeNullableWithAggregatesFilter<"Note"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Note"> | Date | string | null
    createdById?: StringNullableWithAggregatesFilter<"Note"> | string | null
    updatedById?: StringNullableWithAggregatesFilter<"Note"> | string | null
    reportId?: StringNullableWithAggregatesFilter<"Note"> | string | null
  }

  export type StageWhereInput = {
    AND?: StageWhereInput | StageWhereInput[]
    OR?: StageWhereInput[]
    NOT?: StageWhereInput | StageWhereInput[]
    id?: StringFilter<"Stage"> | string
    stageTypeId?: StringFilter<"Stage"> | string
    comment?: StringNullableFilter<"Stage"> | string | null
    createdById?: StringNullableFilter<"Stage"> | string | null
    updatedById?: StringNullableFilter<"Stage"> | string | null
    createdAt?: DateTimeNullableFilter<"Stage"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Stage"> | Date | string | null
    reportId?: StringNullableFilter<"Stage"> | string | null
    type?: XOR<StageTypeScalarRelationFilter, StageTypeWhereInput>
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    report?: XOR<ReportNullableScalarRelationFilter, ReportWhereInput> | null
  }

  export type StageOrderByWithRelationInput = {
    id?: SortOrder
    stageTypeId?: SortOrder
    comment?: SortOrderInput | SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    reportId?: SortOrderInput | SortOrder
    type?: StageTypeOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
    report?: ReportOrderByWithRelationInput
  }

  export type StageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StageWhereInput | StageWhereInput[]
    OR?: StageWhereInput[]
    NOT?: StageWhereInput | StageWhereInput[]
    stageTypeId?: StringFilter<"Stage"> | string
    comment?: StringNullableFilter<"Stage"> | string | null
    createdById?: StringNullableFilter<"Stage"> | string | null
    updatedById?: StringNullableFilter<"Stage"> | string | null
    createdAt?: DateTimeNullableFilter<"Stage"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Stage"> | Date | string | null
    reportId?: StringNullableFilter<"Stage"> | string | null
    type?: XOR<StageTypeScalarRelationFilter, StageTypeWhereInput>
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    report?: XOR<ReportNullableScalarRelationFilter, ReportWhereInput> | null
  }, "id">

  export type StageOrderByWithAggregationInput = {
    id?: SortOrder
    stageTypeId?: SortOrder
    comment?: SortOrderInput | SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    reportId?: SortOrderInput | SortOrder
    _count?: StageCountOrderByAggregateInput
    _max?: StageMaxOrderByAggregateInput
    _min?: StageMinOrderByAggregateInput
  }

  export type StageScalarWhereWithAggregatesInput = {
    AND?: StageScalarWhereWithAggregatesInput | StageScalarWhereWithAggregatesInput[]
    OR?: StageScalarWhereWithAggregatesInput[]
    NOT?: StageScalarWhereWithAggregatesInput | StageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Stage"> | string
    stageTypeId?: StringWithAggregatesFilter<"Stage"> | string
    comment?: StringNullableWithAggregatesFilter<"Stage"> | string | null
    createdById?: StringNullableWithAggregatesFilter<"Stage"> | string | null
    updatedById?: StringNullableWithAggregatesFilter<"Stage"> | string | null
    createdAt?: DateTimeNullableWithAggregatesFilter<"Stage"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Stage"> | Date | string | null
    reportId?: StringNullableWithAggregatesFilter<"Stage"> | string | null
  }

  export type StageTypeWhereInput = {
    AND?: StageTypeWhereInput | StageTypeWhereInput[]
    OR?: StageTypeWhereInput[]
    NOT?: StageTypeWhereInput | StageTypeWhereInput[]
    id?: StringFilter<"StageType"> | string
    model?: StringFilter<"StageType"> | string
    order?: IntFilter<"StageType"> | number
    value?: StringFilter<"StageType"> | string
    label?: StringFilter<"StageType"> | string
    stages?: StageListRelationFilter
  }

  export type StageTypeOrderByWithRelationInput = {
    id?: SortOrder
    model?: SortOrder
    order?: SortOrder
    value?: SortOrder
    label?: SortOrder
    stages?: StageOrderByRelationAggregateInput
  }

  export type StageTypeWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: StageTypeWhereInput | StageTypeWhereInput[]
    OR?: StageTypeWhereInput[]
    NOT?: StageTypeWhereInput | StageTypeWhereInput[]
    model?: StringFilter<"StageType"> | string
    order?: IntFilter<"StageType"> | number
    value?: StringFilter<"StageType"> | string
    label?: StringFilter<"StageType"> | string
    stages?: StageListRelationFilter
  }, "id">

  export type StageTypeOrderByWithAggregationInput = {
    id?: SortOrder
    model?: SortOrder
    order?: SortOrder
    value?: SortOrder
    label?: SortOrder
    _count?: StageTypeCountOrderByAggregateInput
    _avg?: StageTypeAvgOrderByAggregateInput
    _max?: StageTypeMaxOrderByAggregateInput
    _min?: StageTypeMinOrderByAggregateInput
    _sum?: StageTypeSumOrderByAggregateInput
  }

  export type StageTypeScalarWhereWithAggregatesInput = {
    AND?: StageTypeScalarWhereWithAggregatesInput | StageTypeScalarWhereWithAggregatesInput[]
    OR?: StageTypeScalarWhereWithAggregatesInput[]
    NOT?: StageTypeScalarWhereWithAggregatesInput | StageTypeScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"StageType"> | string
    model?: StringWithAggregatesFilter<"StageType"> | string
    order?: IntWithAggregatesFilter<"StageType"> | number
    value?: StringWithAggregatesFilter<"StageType"> | string
    label?: StringWithAggregatesFilter<"StageType"> | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    status?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    createdAt?: DateTimeNullableFilter<"User"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    departmentId?: StringNullableFilter<"User"> | string | null
    organizationId?: StringNullableFilter<"User"> | string | null
    roleId?: StringNullableFilter<"User"> | string | null
    department?: XOR<DepartmentNullableScalarRelationFilter, DepartmentWhereInput> | null
    organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
    role?: XOR<RoleNullableScalarRelationFilter, RoleWhereInput> | null
    permissions?: UserPermissionListRelationFilter
    profile?: XOR<ProfileNullableScalarRelationFilter, ProfileWhereInput> | null
    CreatorNote?: NoteListRelationFilter
    UpdaterNote?: NoteListRelationFilter
    CreatorStage?: StageListRelationFilter
    UpdaterStage?: StageListRelationFilter
    CreatorReport?: ReportListRelationFilter
    UpdaterReport?: ReportListRelationFilter
    CreatorReportCategory?: ReportCategoryListRelationFilter
    UpdaterReportCategory?: ReportCategoryListRelationFilter
    CreatorDepartment?: DepartmentListRelationFilter
    UpdaterDepartment?: DepartmentListRelationFilter
    CreatorPermission?: PermissionListRelationFilter
    UpdaterPermission?: PermissionListRelationFilter
    CreatorDepartmentPermission?: DepartmentPermissionListRelationFilter
    UpdaterDepartmentPermission?: DepartmentPermissionListRelationFilter
    CreatorUserPermission?: UserPermissionListRelationFilter
    UpdaterUserPermission?: UserPermissionListRelationFilter
    CreatorProfile?: ProfileListRelationFilter
    UpdaterProfile?: ProfileListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    status?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    departmentId?: SortOrderInput | SortOrder
    organizationId?: SortOrderInput | SortOrder
    roleId?: SortOrderInput | SortOrder
    department?: DepartmentOrderByWithRelationInput
    organization?: OrganizationOrderByWithRelationInput
    role?: RoleOrderByWithRelationInput
    permissions?: UserPermissionOrderByRelationAggregateInput
    profile?: ProfileOrderByWithRelationInput
    CreatorNote?: NoteOrderByRelationAggregateInput
    UpdaterNote?: NoteOrderByRelationAggregateInput
    CreatorStage?: StageOrderByRelationAggregateInput
    UpdaterStage?: StageOrderByRelationAggregateInput
    CreatorReport?: ReportOrderByRelationAggregateInput
    UpdaterReport?: ReportOrderByRelationAggregateInput
    CreatorReportCategory?: ReportCategoryOrderByRelationAggregateInput
    UpdaterReportCategory?: ReportCategoryOrderByRelationAggregateInput
    CreatorDepartment?: DepartmentOrderByRelationAggregateInput
    UpdaterDepartment?: DepartmentOrderByRelationAggregateInput
    CreatorPermission?: PermissionOrderByRelationAggregateInput
    UpdaterPermission?: PermissionOrderByRelationAggregateInput
    CreatorDepartmentPermission?: DepartmentPermissionOrderByRelationAggregateInput
    UpdaterDepartmentPermission?: DepartmentPermissionOrderByRelationAggregateInput
    CreatorUserPermission?: UserPermissionOrderByRelationAggregateInput
    UpdaterUserPermission?: UserPermissionOrderByRelationAggregateInput
    CreatorProfile?: ProfileOrderByRelationAggregateInput
    UpdaterProfile?: ProfileOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    username?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    password?: StringFilter<"User"> | string
    status?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    createdAt?: DateTimeNullableFilter<"User"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    departmentId?: StringNullableFilter<"User"> | string | null
    organizationId?: StringNullableFilter<"User"> | string | null
    roleId?: StringNullableFilter<"User"> | string | null
    department?: XOR<DepartmentNullableScalarRelationFilter, DepartmentWhereInput> | null
    organization?: XOR<OrganizationNullableScalarRelationFilter, OrganizationWhereInput> | null
    role?: XOR<RoleNullableScalarRelationFilter, RoleWhereInput> | null
    permissions?: UserPermissionListRelationFilter
    profile?: XOR<ProfileNullableScalarRelationFilter, ProfileWhereInput> | null
    CreatorNote?: NoteListRelationFilter
    UpdaterNote?: NoteListRelationFilter
    CreatorStage?: StageListRelationFilter
    UpdaterStage?: StageListRelationFilter
    CreatorReport?: ReportListRelationFilter
    UpdaterReport?: ReportListRelationFilter
    CreatorReportCategory?: ReportCategoryListRelationFilter
    UpdaterReportCategory?: ReportCategoryListRelationFilter
    CreatorDepartment?: DepartmentListRelationFilter
    UpdaterDepartment?: DepartmentListRelationFilter
    CreatorPermission?: PermissionListRelationFilter
    UpdaterPermission?: PermissionListRelationFilter
    CreatorDepartmentPermission?: DepartmentPermissionListRelationFilter
    UpdaterDepartmentPermission?: DepartmentPermissionListRelationFilter
    CreatorUserPermission?: UserPermissionListRelationFilter
    UpdaterUserPermission?: UserPermissionListRelationFilter
    CreatorProfile?: ProfileListRelationFilter
    UpdaterProfile?: ProfileListRelationFilter
  }, "id" | "username">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    status?: SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    departmentId?: SortOrderInput | SortOrder
    organizationId?: SortOrderInput | SortOrder
    roleId?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    status?: EnumUserStatusWithAggregatesFilter<"User"> | $Enums.UserStatus
    createdAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    departmentId?: StringNullableWithAggregatesFilter<"User"> | string | null
    organizationId?: StringNullableWithAggregatesFilter<"User"> | string | null
    roleId?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type OrganizationWhereInput = {
    AND?: OrganizationWhereInput | OrganizationWhereInput[]
    OR?: OrganizationWhereInput[]
    NOT?: OrganizationWhereInput | OrganizationWhereInput[]
    id?: StringFilter<"Organization"> | string
    name?: StringFilter<"Organization"> | string
    code?: StringFilter<"Organization"> | string
    users?: UserListRelationFilter
    Report?: ReportListRelationFilter
  }

  export type OrganizationOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    users?: UserOrderByRelationAggregateInput
    Report?: ReportOrderByRelationAggregateInput
  }

  export type OrganizationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    code?: string
    AND?: OrganizationWhereInput | OrganizationWhereInput[]
    OR?: OrganizationWhereInput[]
    NOT?: OrganizationWhereInput | OrganizationWhereInput[]
    users?: UserListRelationFilter
    Report?: ReportListRelationFilter
  }, "id" | "name" | "code">

  export type OrganizationOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    _count?: OrganizationCountOrderByAggregateInput
    _max?: OrganizationMaxOrderByAggregateInput
    _min?: OrganizationMinOrderByAggregateInput
  }

  export type OrganizationScalarWhereWithAggregatesInput = {
    AND?: OrganizationScalarWhereWithAggregatesInput | OrganizationScalarWhereWithAggregatesInput[]
    OR?: OrganizationScalarWhereWithAggregatesInput[]
    NOT?: OrganizationScalarWhereWithAggregatesInput | OrganizationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Organization"> | string
    name?: StringWithAggregatesFilter<"Organization"> | string
    code?: StringWithAggregatesFilter<"Organization"> | string
  }

  export type RoleWhereInput = {
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    id?: StringFilter<"Role"> | string
    name?: StringFilter<"Role"> | string
    level?: IntFilter<"Role"> | number
    users?: UserListRelationFilter
  }

  export type RoleOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    level?: SortOrder
    users?: UserOrderByRelationAggregateInput
  }

  export type RoleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: RoleWhereInput | RoleWhereInput[]
    OR?: RoleWhereInput[]
    NOT?: RoleWhereInput | RoleWhereInput[]
    level?: IntFilter<"Role"> | number
    users?: UserListRelationFilter
  }, "id" | "name">

  export type RoleOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    level?: SortOrder
    _count?: RoleCountOrderByAggregateInput
    _avg?: RoleAvgOrderByAggregateInput
    _max?: RoleMaxOrderByAggregateInput
    _min?: RoleMinOrderByAggregateInput
    _sum?: RoleSumOrderByAggregateInput
  }

  export type RoleScalarWhereWithAggregatesInput = {
    AND?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    OR?: RoleScalarWhereWithAggregatesInput[]
    NOT?: RoleScalarWhereWithAggregatesInput | RoleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Role"> | string
    name?: StringWithAggregatesFilter<"Role"> | string
    level?: IntWithAggregatesFilter<"Role"> | number
  }

  export type DepartmentWhereInput = {
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    id?: StringFilter<"Department"> | string
    name?: StringFilter<"Department"> | string
    code?: StringFilter<"Department"> | string
    createdById?: StringNullableFilter<"Department"> | string | null
    updatedById?: StringNullableFilter<"Department"> | string | null
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    users?: UserListRelationFilter
    permissions?: DepartmentPermissionListRelationFilter
  }

  export type DepartmentOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
    users?: UserOrderByRelationAggregateInput
    permissions?: DepartmentPermissionOrderByRelationAggregateInput
  }

  export type DepartmentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    code?: string
    AND?: DepartmentWhereInput | DepartmentWhereInput[]
    OR?: DepartmentWhereInput[]
    NOT?: DepartmentWhereInput | DepartmentWhereInput[]
    createdById?: StringNullableFilter<"Department"> | string | null
    updatedById?: StringNullableFilter<"Department"> | string | null
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    users?: UserListRelationFilter
    permissions?: DepartmentPermissionListRelationFilter
  }, "id" | "name" | "code">

  export type DepartmentOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    _count?: DepartmentCountOrderByAggregateInput
    _max?: DepartmentMaxOrderByAggregateInput
    _min?: DepartmentMinOrderByAggregateInput
  }

  export type DepartmentScalarWhereWithAggregatesInput = {
    AND?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    OR?: DepartmentScalarWhereWithAggregatesInput[]
    NOT?: DepartmentScalarWhereWithAggregatesInput | DepartmentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Department"> | string
    name?: StringWithAggregatesFilter<"Department"> | string
    code?: StringWithAggregatesFilter<"Department"> | string
    createdById?: StringNullableWithAggregatesFilter<"Department"> | string | null
    updatedById?: StringNullableWithAggregatesFilter<"Department"> | string | null
  }

  export type PermissionWhereInput = {
    AND?: PermissionWhereInput | PermissionWhereInput[]
    OR?: PermissionWhereInput[]
    NOT?: PermissionWhereInput | PermissionWhereInput[]
    id?: StringFilter<"Permission"> | string
    name?: StringFilter<"Permission"> | string
    resource?: StringFilter<"Permission"> | string
    action?: StringFilter<"Permission"> | string
    description?: StringNullableFilter<"Permission"> | string | null
    createdAt?: DateTimeFilter<"Permission"> | Date | string
    updatedAt?: DateTimeFilter<"Permission"> | Date | string
    createdById?: StringNullableFilter<"Permission"> | string | null
    updatedById?: StringNullableFilter<"Permission"> | string | null
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    dept?: DepartmentPermissionListRelationFilter
    users?: UserPermissionListRelationFilter
  }

  export type PermissionOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    resource?: SortOrder
    action?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
    dept?: DepartmentPermissionOrderByRelationAggregateInput
    users?: UserPermissionOrderByRelationAggregateInput
  }

  export type PermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    resource_action?: PermissionResourceActionCompoundUniqueInput
    AND?: PermissionWhereInput | PermissionWhereInput[]
    OR?: PermissionWhereInput[]
    NOT?: PermissionWhereInput | PermissionWhereInput[]
    resource?: StringFilter<"Permission"> | string
    action?: StringFilter<"Permission"> | string
    description?: StringNullableFilter<"Permission"> | string | null
    createdAt?: DateTimeFilter<"Permission"> | Date | string
    updatedAt?: DateTimeFilter<"Permission"> | Date | string
    createdById?: StringNullableFilter<"Permission"> | string | null
    updatedById?: StringNullableFilter<"Permission"> | string | null
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    dept?: DepartmentPermissionListRelationFilter
    users?: UserPermissionListRelationFilter
  }, "id" | "name" | "resource_action">

  export type PermissionOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    resource?: SortOrder
    action?: SortOrder
    description?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    _count?: PermissionCountOrderByAggregateInput
    _max?: PermissionMaxOrderByAggregateInput
    _min?: PermissionMinOrderByAggregateInput
  }

  export type PermissionScalarWhereWithAggregatesInput = {
    AND?: PermissionScalarWhereWithAggregatesInput | PermissionScalarWhereWithAggregatesInput[]
    OR?: PermissionScalarWhereWithAggregatesInput[]
    NOT?: PermissionScalarWhereWithAggregatesInput | PermissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Permission"> | string
    name?: StringWithAggregatesFilter<"Permission"> | string
    resource?: StringWithAggregatesFilter<"Permission"> | string
    action?: StringWithAggregatesFilter<"Permission"> | string
    description?: StringNullableWithAggregatesFilter<"Permission"> | string | null
    createdAt?: DateTimeWithAggregatesFilter<"Permission"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Permission"> | Date | string
    createdById?: StringNullableWithAggregatesFilter<"Permission"> | string | null
    updatedById?: StringNullableWithAggregatesFilter<"Permission"> | string | null
  }

  export type DepartmentPermissionWhereInput = {
    AND?: DepartmentPermissionWhereInput | DepartmentPermissionWhereInput[]
    OR?: DepartmentPermissionWhereInput[]
    NOT?: DepartmentPermissionWhereInput | DepartmentPermissionWhereInput[]
    id?: StringFilter<"DepartmentPermission"> | string
    departmentId?: StringFilter<"DepartmentPermission"> | string
    permissionId?: StringFilter<"DepartmentPermission"> | string
    createdAt?: DateTimeFilter<"DepartmentPermission"> | Date | string
    createdById?: StringNullableFilter<"DepartmentPermission"> | string | null
    updatedById?: StringNullableFilter<"DepartmentPermission"> | string | null
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
    permission?: XOR<PermissionScalarRelationFilter, PermissionWhereInput>
  }

  export type DepartmentPermissionOrderByWithRelationInput = {
    id?: SortOrder
    departmentId?: SortOrder
    permissionId?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
    department?: DepartmentOrderByWithRelationInput
    permission?: PermissionOrderByWithRelationInput
  }

  export type DepartmentPermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    departmentId_permissionId?: DepartmentPermissionDepartmentIdPermissionIdCompoundUniqueInput
    AND?: DepartmentPermissionWhereInput | DepartmentPermissionWhereInput[]
    OR?: DepartmentPermissionWhereInput[]
    NOT?: DepartmentPermissionWhereInput | DepartmentPermissionWhereInput[]
    departmentId?: StringFilter<"DepartmentPermission"> | string
    permissionId?: StringFilter<"DepartmentPermission"> | string
    createdAt?: DateTimeFilter<"DepartmentPermission"> | Date | string
    createdById?: StringNullableFilter<"DepartmentPermission"> | string | null
    updatedById?: StringNullableFilter<"DepartmentPermission"> | string | null
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    department?: XOR<DepartmentScalarRelationFilter, DepartmentWhereInput>
    permission?: XOR<PermissionScalarRelationFilter, PermissionWhereInput>
  }, "id" | "departmentId_permissionId">

  export type DepartmentPermissionOrderByWithAggregationInput = {
    id?: SortOrder
    departmentId?: SortOrder
    permissionId?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    _count?: DepartmentPermissionCountOrderByAggregateInput
    _max?: DepartmentPermissionMaxOrderByAggregateInput
    _min?: DepartmentPermissionMinOrderByAggregateInput
  }

  export type DepartmentPermissionScalarWhereWithAggregatesInput = {
    AND?: DepartmentPermissionScalarWhereWithAggregatesInput | DepartmentPermissionScalarWhereWithAggregatesInput[]
    OR?: DepartmentPermissionScalarWhereWithAggregatesInput[]
    NOT?: DepartmentPermissionScalarWhereWithAggregatesInput | DepartmentPermissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"DepartmentPermission"> | string
    departmentId?: StringWithAggregatesFilter<"DepartmentPermission"> | string
    permissionId?: StringWithAggregatesFilter<"DepartmentPermission"> | string
    createdAt?: DateTimeWithAggregatesFilter<"DepartmentPermission"> | Date | string
    createdById?: StringNullableWithAggregatesFilter<"DepartmentPermission"> | string | null
    updatedById?: StringNullableWithAggregatesFilter<"DepartmentPermission"> | string | null
  }

  export type UserPermissionWhereInput = {
    AND?: UserPermissionWhereInput | UserPermissionWhereInput[]
    OR?: UserPermissionWhereInput[]
    NOT?: UserPermissionWhereInput | UserPermissionWhereInput[]
    id?: StringFilter<"UserPermission"> | string
    userId?: StringFilter<"UserPermission"> | string
    permissionId?: StringFilter<"UserPermission"> | string
    createdAt?: DateTimeFilter<"UserPermission"> | Date | string
    createdById?: StringNullableFilter<"UserPermission"> | string | null
    updatedById?: StringNullableFilter<"UserPermission"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    permission?: XOR<PermissionScalarRelationFilter, PermissionWhereInput>
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }

  export type UserPermissionOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    permissionId?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    permission?: PermissionOrderByWithRelationInput
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
  }

  export type UserPermissionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserPermissionWhereInput | UserPermissionWhereInput[]
    OR?: UserPermissionWhereInput[]
    NOT?: UserPermissionWhereInput | UserPermissionWhereInput[]
    userId?: StringFilter<"UserPermission"> | string
    permissionId?: StringFilter<"UserPermission"> | string
    createdAt?: DateTimeFilter<"UserPermission"> | Date | string
    createdById?: StringNullableFilter<"UserPermission"> | string | null
    updatedById?: StringNullableFilter<"UserPermission"> | string | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
    permission?: XOR<PermissionScalarRelationFilter, PermissionWhereInput>
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
  }, "id">

  export type UserPermissionOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    permissionId?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    _count?: UserPermissionCountOrderByAggregateInput
    _max?: UserPermissionMaxOrderByAggregateInput
    _min?: UserPermissionMinOrderByAggregateInput
  }

  export type UserPermissionScalarWhereWithAggregatesInput = {
    AND?: UserPermissionScalarWhereWithAggregatesInput | UserPermissionScalarWhereWithAggregatesInput[]
    OR?: UserPermissionScalarWhereWithAggregatesInput[]
    NOT?: UserPermissionScalarWhereWithAggregatesInput | UserPermissionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"UserPermission"> | string
    userId?: StringWithAggregatesFilter<"UserPermission"> | string
    permissionId?: StringWithAggregatesFilter<"UserPermission"> | string
    createdAt?: DateTimeWithAggregatesFilter<"UserPermission"> | Date | string
    createdById?: StringNullableWithAggregatesFilter<"UserPermission"> | string | null
    updatedById?: StringNullableWithAggregatesFilter<"UserPermission"> | string | null
  }

  export type ProfileWhereInput = {
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    id?: StringFilter<"Profile"> | string
    name?: StringNullableFilter<"Profile"> | string | null
    department?: StringNullableFilter<"Profile"> | string | null
    position?: StringNullableFilter<"Profile"> | string | null
    joinDate?: DateTimeNullableFilter<"Profile"> | Date | string | null
    createdAt?: DateTimeNullableFilter<"Profile"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Profile"> | Date | string | null
    createdById?: StringNullableFilter<"Profile"> | string | null
    updatedById?: StringNullableFilter<"Profile"> | string | null
    userId?: StringFilter<"Profile"> | string
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }

  export type ProfileOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    department?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    joinDate?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdBy?: UserOrderByWithRelationInput
    updatedBy?: UserOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type ProfileWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    userId?: string
    AND?: ProfileWhereInput | ProfileWhereInput[]
    OR?: ProfileWhereInput[]
    NOT?: ProfileWhereInput | ProfileWhereInput[]
    name?: StringNullableFilter<"Profile"> | string | null
    department?: StringNullableFilter<"Profile"> | string | null
    position?: StringNullableFilter<"Profile"> | string | null
    joinDate?: DateTimeNullableFilter<"Profile"> | Date | string | null
    createdAt?: DateTimeNullableFilter<"Profile"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Profile"> | Date | string | null
    createdById?: StringNullableFilter<"Profile"> | string | null
    updatedById?: StringNullableFilter<"Profile"> | string | null
    createdBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    updatedBy?: XOR<UserNullableScalarRelationFilter, UserWhereInput> | null
    user?: XOR<UserScalarRelationFilter, UserWhereInput>
  }, "id" | "userId">

  export type ProfileOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    department?: SortOrderInput | SortOrder
    position?: SortOrderInput | SortOrder
    joinDate?: SortOrderInput | SortOrder
    createdAt?: SortOrderInput | SortOrder
    updatedAt?: SortOrderInput | SortOrder
    createdById?: SortOrderInput | SortOrder
    updatedById?: SortOrderInput | SortOrder
    userId?: SortOrder
    _count?: ProfileCountOrderByAggregateInput
    _max?: ProfileMaxOrderByAggregateInput
    _min?: ProfileMinOrderByAggregateInput
  }

  export type ProfileScalarWhereWithAggregatesInput = {
    AND?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    OR?: ProfileScalarWhereWithAggregatesInput[]
    NOT?: ProfileScalarWhereWithAggregatesInput | ProfileScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Profile"> | string
    name?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    department?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    position?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    joinDate?: DateTimeNullableWithAggregatesFilter<"Profile"> | Date | string | null
    createdAt?: DateTimeNullableWithAggregatesFilter<"Profile"> | Date | string | null
    updatedAt?: DateTimeNullableWithAggregatesFilter<"Profile"> | Date | string | null
    createdById?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    updatedById?: StringNullableWithAggregatesFilter<"Profile"> | string | null
    userId?: StringWithAggregatesFilter<"Profile"> | string
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    sid?: StringFilter<"Session"> | string
    sess?: JsonFilter<"Session">
    expire?: DateTimeFilter<"Session"> | Date | string
  }

  export type SessionOrderByWithRelationInput = {
    sid?: SortOrder
    sess?: SortOrder
    expire?: SortOrder
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    sid?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    sess?: JsonFilter<"Session">
    expire?: DateTimeFilter<"Session"> | Date | string
  }, "sid">

  export type SessionOrderByWithAggregationInput = {
    sid?: SortOrder
    sess?: SortOrder
    expire?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    sid?: StringWithAggregatesFilter<"Session"> | string
    sess?: JsonWithAggregatesFilter<"Session">
    expire?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type ReportCategoryCreateInput = {
    id?: string
    name: string
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: ReportCategoryCreateNestedOneWithoutChildrenInput
    children?: ReportCategoryCreateNestedManyWithoutParentInput
    createdBy?: UserCreateNestedOneWithoutCreatorReportCategoryInput
    updatedBy?: UserCreateNestedOneWithoutUpdaterReportCategoryInput
    reports?: ReportCreateNestedManyWithoutCategoryInput
  }

  export type ReportCategoryUncheckedCreateInput = {
    id?: string
    name: string
    code: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    children?: ReportCategoryUncheckedCreateNestedManyWithoutParentInput
    reports?: ReportUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type ReportCategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: ReportCategoryUpdateOneWithoutChildrenNestedInput
    children?: ReportCategoryUpdateManyWithoutParentNestedInput
    createdBy?: UserUpdateOneWithoutCreatorReportCategoryNestedInput
    updatedBy?: UserUpdateOneWithoutUpdaterReportCategoryNestedInput
    reports?: ReportUpdateManyWithoutCategoryNestedInput
  }

  export type ReportCategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    children?: ReportCategoryUncheckedUpdateManyWithoutParentNestedInput
    reports?: ReportUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type ReportCategoryCreateManyInput = {
    id?: string
    name: string
    code: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type ReportCategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportCategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportCreateInput = {
    id?: string
    periodYear: string
    periodMonth: string
    periodDate?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    category: ReportCategoryCreateNestedOneWithoutReportsInput
    createdBy?: UserCreateNestedOneWithoutCreatorReportInput
    updatedBy?: UserCreateNestedOneWithoutUpdaterReportInput
    organization?: OrganizationCreateNestedOneWithoutReportInput
    notes?: NoteCreateNestedManyWithoutReportInput
    stages?: StageCreateNestedManyWithoutReportInput
    files?: FileCreateNestedManyWithoutReportInput
  }

  export type ReportUncheckedCreateInput = {
    id?: string
    categoryId: string
    periodYear: string
    periodMonth: string
    periodDate?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    organizationId?: string | null
    notes?: NoteUncheckedCreateNestedManyWithoutReportInput
    stages?: StageUncheckedCreateNestedManyWithoutReportInput
    files?: FileUncheckedCreateNestedManyWithoutReportInput
  }

  export type ReportUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    periodYear?: StringFieldUpdateOperationsInput | string
    periodMonth?: StringFieldUpdateOperationsInput | string
    periodDate?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: ReportCategoryUpdateOneRequiredWithoutReportsNestedInput
    createdBy?: UserUpdateOneWithoutCreatorReportNestedInput
    updatedBy?: UserUpdateOneWithoutUpdaterReportNestedInput
    organization?: OrganizationUpdateOneWithoutReportNestedInput
    notes?: NoteUpdateManyWithoutReportNestedInput
    stages?: StageUpdateManyWithoutReportNestedInput
    files?: FileUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    periodYear?: StringFieldUpdateOperationsInput | string
    periodMonth?: StringFieldUpdateOperationsInput | string
    periodDate?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NoteUncheckedUpdateManyWithoutReportNestedInput
    stages?: StageUncheckedUpdateManyWithoutReportNestedInput
    files?: FileUncheckedUpdateManyWithoutReportNestedInput
  }

  export type ReportCreateManyInput = {
    id?: string
    categoryId: string
    periodYear: string
    periodMonth: string
    periodDate?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    organizationId?: string | null
  }

  export type ReportUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    periodYear?: StringFieldUpdateOperationsInput | string
    periodMonth?: StringFieldUpdateOperationsInput | string
    periodDate?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type ReportUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    periodYear?: StringFieldUpdateOperationsInput | string
    periodMonth?: StringFieldUpdateOperationsInput | string
    periodDate?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FileCreateInput = {
    id?: string
    filename: string
    path: string
    mimeType?: string | null
    size?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    report?: ReportCreateNestedOneWithoutFilesInput
  }

  export type FileUncheckedCreateInput = {
    id?: string
    filename: string
    path: string
    mimeType?: string | null
    size?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reportId?: string | null
  }

  export type FileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    report?: ReportUpdateOneWithoutFilesNestedInput
  }

  export type FileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FileCreateManyInput = {
    id?: string
    filename: string
    path: string
    mimeType?: string | null
    size?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    reportId?: string | null
  }

  export type FileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NoteCreateInput = {
    id?: string
    description?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdBy?: UserCreateNestedOneWithoutCreatorNoteInput
    updatedBy?: UserCreateNestedOneWithoutUpdaterNoteInput
    report?: ReportCreateNestedOneWithoutNotesInput
  }

  export type NoteUncheckedCreateInput = {
    id?: string
    description?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdById?: string | null
    updatedById?: string | null
    reportId?: string | null
  }

  export type NoteUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneWithoutCreatorNoteNestedInput
    updatedBy?: UserUpdateOneWithoutUpdaterNoteNestedInput
    report?: ReportUpdateOneWithoutNotesNestedInput
  }

  export type NoteUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NoteCreateManyInput = {
    id?: string
    description?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdById?: string | null
    updatedById?: string | null
    reportId?: string | null
  }

  export type NoteUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type NoteUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StageCreateInput = {
    id?: string
    comment?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    type: StageTypeCreateNestedOneWithoutStagesInput
    createdBy?: UserCreateNestedOneWithoutCreatorStageInput
    updatedBy?: UserCreateNestedOneWithoutUpdaterStageInput
    report?: ReportCreateNestedOneWithoutStagesInput
  }

  export type StageUncheckedCreateInput = {
    id?: string
    stageTypeId: string
    comment?: string | null
    createdById?: string | null
    updatedById?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    reportId?: string | null
  }

  export type StageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: StageTypeUpdateOneRequiredWithoutStagesNestedInput
    createdBy?: UserUpdateOneWithoutCreatorStageNestedInput
    updatedBy?: UserUpdateOneWithoutUpdaterStageNestedInput
    report?: ReportUpdateOneWithoutStagesNestedInput
  }

  export type StageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    stageTypeId?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StageCreateManyInput = {
    id?: string
    stageTypeId: string
    comment?: string | null
    createdById?: string | null
    updatedById?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    reportId?: string | null
  }

  export type StageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    stageTypeId?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StageTypeCreateInput = {
    id?: string
    model: string
    order: number
    value: string
    label: string
    stages?: StageCreateNestedManyWithoutTypeInput
  }

  export type StageTypeUncheckedCreateInput = {
    id?: string
    model: string
    order: number
    value: string
    label: string
    stages?: StageUncheckedCreateNestedManyWithoutTypeInput
  }

  export type StageTypeUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    stages?: StageUpdateManyWithoutTypeNestedInput
  }

  export type StageTypeUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
    stages?: StageUncheckedUpdateManyWithoutTypeNestedInput
  }

  export type StageTypeCreateManyInput = {
    id?: string
    model: string
    order: number
    value: string
    label: string
  }

  export type StageTypeUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
  }

  export type StageTypeUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    role?: RoleCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    CreatorNote?: NoteCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    departmentId?: string | null
    organizationId?: string | null
    roleId?: string | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    CreatorNote?: NoteUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    role?: RoleUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    departmentId?: string | null
    organizationId?: string | null
    roleId?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type OrganizationCreateInput = {
    id?: string
    name: string
    code: string
    users?: UserCreateNestedManyWithoutOrganizationInput
    Report?: ReportCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateInput = {
    id?: string
    name: string
    code: string
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
    Report?: ReportUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutOrganizationNestedInput
    Report?: ReportUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
    Report?: ReportUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationCreateManyInput = {
    id?: string
    name: string
    code: string
  }

  export type OrganizationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
  }

  export type OrganizationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
  }

  export type RoleCreateInput = {
    id?: string
    name: string
    level: number
    users?: UserCreateNestedManyWithoutRoleInput
  }

  export type RoleUncheckedCreateInput = {
    id?: string
    name: string
    level: number
    users?: UserUncheckedCreateNestedManyWithoutRoleInput
  }

  export type RoleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    users?: UserUpdateManyWithoutRoleNestedInput
  }

  export type RoleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
    users?: UserUncheckedUpdateManyWithoutRoleNestedInput
  }

  export type RoleCreateManyInput = {
    id?: string
    name: string
    level: number
  }

  export type RoleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
  }

  export type RoleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
  }

  export type DepartmentCreateInput = {
    id?: string
    name: string
    code: string
    createdBy?: UserCreateNestedOneWithoutCreatorDepartmentInput
    updatedBy?: UserCreateNestedOneWithoutUpdaterDepartmentInput
    users?: UserCreateNestedManyWithoutDepartmentInput
    permissions?: DepartmentPermissionCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateInput = {
    id?: string
    name: string
    code: string
    createdById?: string | null
    updatedById?: string | null
    users?: UserUncheckedCreateNestedManyWithoutDepartmentInput
    permissions?: DepartmentPermissionUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdBy?: UserUpdateOneWithoutCreatorDepartmentNestedInput
    updatedBy?: UserUpdateOneWithoutUpdaterDepartmentNestedInput
    users?: UserUpdateManyWithoutDepartmentNestedInput
    permissions?: DepartmentPermissionUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutDepartmentNestedInput
    permissions?: DepartmentPermissionUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentCreateManyInput = {
    id?: string
    name: string
    code: string
    createdById?: string | null
    updatedById?: string | null
  }

  export type DepartmentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
  }

  export type DepartmentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PermissionCreateInput = {
    id?: string
    name: string
    resource: string
    action: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutCreatorPermissionInput
    updatedBy?: UserCreateNestedOneWithoutUpdaterPermissionInput
    dept?: DepartmentPermissionCreateNestedManyWithoutPermissionInput
    users?: UserPermissionCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUncheckedCreateInput = {
    id?: string
    name: string
    resource: string
    action: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    dept?: DepartmentPermissionUncheckedCreateNestedManyWithoutPermissionInput
    users?: UserPermissionUncheckedCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutCreatorPermissionNestedInput
    updatedBy?: UserUpdateOneWithoutUpdaterPermissionNestedInput
    dept?: DepartmentPermissionUpdateManyWithoutPermissionNestedInput
    users?: UserPermissionUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    dept?: DepartmentPermissionUncheckedUpdateManyWithoutPermissionNestedInput
    users?: UserPermissionUncheckedUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionCreateManyInput = {
    id?: string
    name: string
    resource: string
    action: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type PermissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PermissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DepartmentPermissionCreateInput = {
    id?: string
    createdAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutCreatorDepartmentPermissionInput
    updatedBy?: UserCreateNestedOneWithoutUpdaterDepartmentPermissionInput
    department: DepartmentCreateNestedOneWithoutPermissionsInput
    permission: PermissionCreateNestedOneWithoutDeptInput
  }

  export type DepartmentPermissionUncheckedCreateInput = {
    id?: string
    departmentId: string
    permissionId: string
    createdAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type DepartmentPermissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutCreatorDepartmentPermissionNestedInput
    updatedBy?: UserUpdateOneWithoutUpdaterDepartmentPermissionNestedInput
    department?: DepartmentUpdateOneRequiredWithoutPermissionsNestedInput
    permission?: PermissionUpdateOneRequiredWithoutDeptNestedInput
  }

  export type DepartmentPermissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DepartmentPermissionCreateManyInput = {
    id?: string
    departmentId: string
    permissionId: string
    createdAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type DepartmentPermissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type DepartmentPermissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserPermissionCreateInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutPermissionsInput
    permission: PermissionCreateNestedOneWithoutUsersInput
    createdBy?: UserCreateNestedOneWithoutCreatorUserPermissionInput
    updatedBy?: UserCreateNestedOneWithoutUpdaterUserPermissionInput
  }

  export type UserPermissionUncheckedCreateInput = {
    id?: string
    userId: string
    permissionId: string
    createdAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type UserPermissionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPermissionsNestedInput
    permission?: PermissionUpdateOneRequiredWithoutUsersNestedInput
    createdBy?: UserUpdateOneWithoutCreatorUserPermissionNestedInput
    updatedBy?: UserUpdateOneWithoutUpdaterUserPermissionNestedInput
  }

  export type UserPermissionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserPermissionCreateManyInput = {
    id?: string
    userId: string
    permissionId: string
    createdAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type UserPermissionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserPermissionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileCreateInput = {
    id?: string
    name?: string | null
    department?: string | null
    position?: string | null
    joinDate?: Date | string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdBy?: UserCreateNestedOneWithoutCreatorProfileInput
    updatedBy?: UserCreateNestedOneWithoutUpdaterProfileInput
    user: UserCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateInput = {
    id?: string
    name?: string | null
    department?: string | null
    position?: string | null
    joinDate?: Date | string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdById?: string | null
    updatedById?: string | null
    userId: string
  }

  export type ProfileUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneWithoutCreatorProfileNestedInput
    updatedBy?: UserUpdateOneWithoutUpdaterProfileNestedInput
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ProfileCreateManyInput = {
    id?: string
    name?: string | null
    department?: string | null
    position?: string | null
    joinDate?: Date | string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdById?: string | null
    updatedById?: string | null
    userId: string
  }

  export type ProfileUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type ProfileUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type SessionCreateInput = {
    sid: string
    sess: JsonNullValueInput | InputJsonValue
    expire: Date | string
  }

  export type SessionUncheckedCreateInput = {
    sid: string
    sess: JsonNullValueInput | InputJsonValue
    expire: Date | string
  }

  export type SessionUpdateInput = {
    sid?: StringFieldUpdateOperationsInput | string
    sess?: JsonNullValueInput | InputJsonValue
    expire?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateInput = {
    sid?: StringFieldUpdateOperationsInput | string
    sess?: JsonNullValueInput | InputJsonValue
    expire?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    sid: string
    sess: JsonNullValueInput | InputJsonValue
    expire: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    sid?: StringFieldUpdateOperationsInput | string
    sess?: JsonNullValueInput | InputJsonValue
    expire?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    sid?: StringFieldUpdateOperationsInput | string
    sess?: JsonNullValueInput | InputJsonValue
    expire?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type ReportCategoryNullableScalarRelationFilter = {
    is?: ReportCategoryWhereInput | null
    isNot?: ReportCategoryWhereInput | null
  }

  export type ReportCategoryListRelationFilter = {
    every?: ReportCategoryWhereInput
    some?: ReportCategoryWhereInput
    none?: ReportCategoryWhereInput
  }

  export type UserNullableScalarRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type ReportListRelationFilter = {
    every?: ReportWhereInput
    some?: ReportWhereInput
    none?: ReportWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type ReportCategoryOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReportOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReportCategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type ReportCategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type ReportCategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    parentId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type ReportCategoryScalarRelationFilter = {
    is?: ReportCategoryWhereInput
    isNot?: ReportCategoryWhereInput
  }

  export type OrganizationNullableScalarRelationFilter = {
    is?: OrganizationWhereInput | null
    isNot?: OrganizationWhereInput | null
  }

  export type NoteListRelationFilter = {
    every?: NoteWhereInput
    some?: NoteWhereInput
    none?: NoteWhereInput
  }

  export type StageListRelationFilter = {
    every?: StageWhereInput
    some?: StageWhereInput
    none?: StageWhereInput
  }

  export type FileListRelationFilter = {
    every?: FileWhereInput
    some?: FileWhereInput
    none?: FileWhereInput
  }

  export type NoteOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type StageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ReportCountOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    periodYear?: SortOrder
    periodMonth?: SortOrder
    periodDate?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    organizationId?: SortOrder
  }

  export type ReportAvgOrderByAggregateInput = {
    version?: SortOrder
  }

  export type ReportMaxOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    periodYear?: SortOrder
    periodMonth?: SortOrder
    periodDate?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    organizationId?: SortOrder
  }

  export type ReportMinOrderByAggregateInput = {
    id?: SortOrder
    categoryId?: SortOrder
    periodYear?: SortOrder
    periodMonth?: SortOrder
    periodDate?: SortOrder
    version?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    organizationId?: SortOrder
  }

  export type ReportSumOrderByAggregateInput = {
    version?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type ReportNullableScalarRelationFilter = {
    is?: ReportWhereInput | null
    isNot?: ReportWhereInput | null
  }

  export type FileCountOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    path?: SortOrder
    mimeType?: SortOrder
    size?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reportId?: SortOrder
  }

  export type FileAvgOrderByAggregateInput = {
    size?: SortOrder
  }

  export type FileMaxOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    path?: SortOrder
    mimeType?: SortOrder
    size?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reportId?: SortOrder
  }

  export type FileMinOrderByAggregateInput = {
    id?: SortOrder
    filename?: SortOrder
    path?: SortOrder
    mimeType?: SortOrder
    size?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reportId?: SortOrder
  }

  export type FileSumOrderByAggregateInput = {
    size?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NoteCountOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    reportId?: SortOrder
  }

  export type NoteMaxOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    reportId?: SortOrder
  }

  export type NoteMinOrderByAggregateInput = {
    id?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    reportId?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type StageTypeScalarRelationFilter = {
    is?: StageTypeWhereInput
    isNot?: StageTypeWhereInput
  }

  export type StageCountOrderByAggregateInput = {
    id?: SortOrder
    stageTypeId?: SortOrder
    comment?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reportId?: SortOrder
  }

  export type StageMaxOrderByAggregateInput = {
    id?: SortOrder
    stageTypeId?: SortOrder
    comment?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reportId?: SortOrder
  }

  export type StageMinOrderByAggregateInput = {
    id?: SortOrder
    stageTypeId?: SortOrder
    comment?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    reportId?: SortOrder
  }

  export type StageTypeCountOrderByAggregateInput = {
    id?: SortOrder
    model?: SortOrder
    order?: SortOrder
    value?: SortOrder
    label?: SortOrder
  }

  export type StageTypeAvgOrderByAggregateInput = {
    order?: SortOrder
  }

  export type StageTypeMaxOrderByAggregateInput = {
    id?: SortOrder
    model?: SortOrder
    order?: SortOrder
    value?: SortOrder
    label?: SortOrder
  }

  export type StageTypeMinOrderByAggregateInput = {
    id?: SortOrder
    model?: SortOrder
    order?: SortOrder
    value?: SortOrder
    label?: SortOrder
  }

  export type StageTypeSumOrderByAggregateInput = {
    order?: SortOrder
  }

  export type EnumUserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusFilter<$PrismaModel> | $Enums.UserStatus
  }

  export type DepartmentNullableScalarRelationFilter = {
    is?: DepartmentWhereInput | null
    isNot?: DepartmentWhereInput | null
  }

  export type RoleNullableScalarRelationFilter = {
    is?: RoleWhereInput | null
    isNot?: RoleWhereInput | null
  }

  export type UserPermissionListRelationFilter = {
    every?: UserPermissionWhereInput
    some?: UserPermissionWhereInput
    none?: UserPermissionWhereInput
  }

  export type ProfileNullableScalarRelationFilter = {
    is?: ProfileWhereInput | null
    isNot?: ProfileWhereInput | null
  }

  export type DepartmentListRelationFilter = {
    every?: DepartmentWhereInput
    some?: DepartmentWhereInput
    none?: DepartmentWhereInput
  }

  export type PermissionListRelationFilter = {
    every?: PermissionWhereInput
    some?: PermissionWhereInput
    none?: PermissionWhereInput
  }

  export type DepartmentPermissionListRelationFilter = {
    every?: DepartmentPermissionWhereInput
    some?: DepartmentPermissionWhereInput
    none?: DepartmentPermissionWhereInput
  }

  export type ProfileListRelationFilter = {
    every?: ProfileWhereInput
    some?: ProfileWhereInput
    none?: ProfileWhereInput
  }

  export type UserPermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartmentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type DepartmentPermissionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProfileOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    departmentId?: SortOrder
    organizationId?: SortOrder
    roleId?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    departmentId?: SortOrder
    organizationId?: SortOrder
    roleId?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    password?: SortOrder
    status?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    departmentId?: SortOrder
    organizationId?: SortOrder
    roleId?: SortOrder
  }

  export type EnumUserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusWithAggregatesFilter<$PrismaModel> | $Enums.UserStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserStatusFilter<$PrismaModel>
    _max?: NestedEnumUserStatusFilter<$PrismaModel>
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OrganizationCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
  }

  export type OrganizationMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
  }

  export type OrganizationMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
  }

  export type RoleCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    level?: SortOrder
  }

  export type RoleAvgOrderByAggregateInput = {
    level?: SortOrder
  }

  export type RoleMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    level?: SortOrder
  }

  export type RoleMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    level?: SortOrder
  }

  export type RoleSumOrderByAggregateInput = {
    level?: SortOrder
  }

  export type DepartmentCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type DepartmentMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type DepartmentMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    code?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PermissionResourceActionCompoundUniqueInput = {
    resource: string
    action: string
  }

  export type PermissionCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    resource?: SortOrder
    action?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    resource?: SortOrder
    action?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type PermissionMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    resource?: SortOrder
    action?: SortOrder
    description?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type DepartmentScalarRelationFilter = {
    is?: DepartmentWhereInput
    isNot?: DepartmentWhereInput
  }

  export type PermissionScalarRelationFilter = {
    is?: PermissionWhereInput
    isNot?: PermissionWhereInput
  }

  export type DepartmentPermissionDepartmentIdPermissionIdCompoundUniqueInput = {
    departmentId: string
    permissionId: string
  }

  export type DepartmentPermissionCountOrderByAggregateInput = {
    id?: SortOrder
    departmentId?: SortOrder
    permissionId?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type DepartmentPermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    departmentId?: SortOrder
    permissionId?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type DepartmentPermissionMinOrderByAggregateInput = {
    id?: SortOrder
    departmentId?: SortOrder
    permissionId?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type UserScalarRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type UserPermissionCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    permissionId?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type UserPermissionMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    permissionId?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type UserPermissionMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    permissionId?: SortOrder
    createdAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
  }

  export type ProfileCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    department?: SortOrder
    position?: SortOrder
    joinDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    userId?: SortOrder
  }

  export type ProfileMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    department?: SortOrder
    position?: SortOrder
    joinDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    userId?: SortOrder
  }

  export type ProfileMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    department?: SortOrder
    position?: SortOrder
    joinDate?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    createdById?: SortOrder
    updatedById?: SortOrder
    userId?: SortOrder
  }
  export type JsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonFilterBase<$PrismaModel>>, 'path'>>

  export type JsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type SessionCountOrderByAggregateInput = {
    sid?: SortOrder
    sess?: SortOrder
    expire?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    sid?: SortOrder
    expire?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    sid?: SortOrder
    expire?: SortOrder
  }
  export type JsonWithAggregatesFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, Exclude<keyof Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>,
        Required<JsonWithAggregatesFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<JsonWithAggregatesFilterBase<$PrismaModel>>, 'path'>>

  export type JsonWithAggregatesFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedJsonFilter<$PrismaModel>
    _max?: NestedJsonFilter<$PrismaModel>
  }

  export type ReportCategoryCreateNestedOneWithoutChildrenInput = {
    create?: XOR<ReportCategoryCreateWithoutChildrenInput, ReportCategoryUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: ReportCategoryCreateOrConnectWithoutChildrenInput
    connect?: ReportCategoryWhereUniqueInput
  }

  export type ReportCategoryCreateNestedManyWithoutParentInput = {
    create?: XOR<ReportCategoryCreateWithoutParentInput, ReportCategoryUncheckedCreateWithoutParentInput> | ReportCategoryCreateWithoutParentInput[] | ReportCategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: ReportCategoryCreateOrConnectWithoutParentInput | ReportCategoryCreateOrConnectWithoutParentInput[]
    createMany?: ReportCategoryCreateManyParentInputEnvelope
    connect?: ReportCategoryWhereUniqueInput | ReportCategoryWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutCreatorReportCategoryInput = {
    create?: XOR<UserCreateWithoutCreatorReportCategoryInput, UserUncheckedCreateWithoutCreatorReportCategoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatorReportCategoryInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdaterReportCategoryInput = {
    create?: XOR<UserCreateWithoutUpdaterReportCategoryInput, UserUncheckedCreateWithoutUpdaterReportCategoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdaterReportCategoryInput
    connect?: UserWhereUniqueInput
  }

  export type ReportCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ReportCreateWithoutCategoryInput, ReportUncheckedCreateWithoutCategoryInput> | ReportCreateWithoutCategoryInput[] | ReportUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutCategoryInput | ReportCreateOrConnectWithoutCategoryInput[]
    createMany?: ReportCreateManyCategoryInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type ReportCategoryUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<ReportCategoryCreateWithoutParentInput, ReportCategoryUncheckedCreateWithoutParentInput> | ReportCategoryCreateWithoutParentInput[] | ReportCategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: ReportCategoryCreateOrConnectWithoutParentInput | ReportCategoryCreateOrConnectWithoutParentInput[]
    createMany?: ReportCategoryCreateManyParentInputEnvelope
    connect?: ReportCategoryWhereUniqueInput | ReportCategoryWhereUniqueInput[]
  }

  export type ReportUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<ReportCreateWithoutCategoryInput, ReportUncheckedCreateWithoutCategoryInput> | ReportCreateWithoutCategoryInput[] | ReportUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutCategoryInput | ReportCreateOrConnectWithoutCategoryInput[]
    createMany?: ReportCreateManyCategoryInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type ReportCategoryUpdateOneWithoutChildrenNestedInput = {
    create?: XOR<ReportCategoryCreateWithoutChildrenInput, ReportCategoryUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: ReportCategoryCreateOrConnectWithoutChildrenInput
    upsert?: ReportCategoryUpsertWithoutChildrenInput
    disconnect?: ReportCategoryWhereInput | boolean
    delete?: ReportCategoryWhereInput | boolean
    connect?: ReportCategoryWhereUniqueInput
    update?: XOR<XOR<ReportCategoryUpdateToOneWithWhereWithoutChildrenInput, ReportCategoryUpdateWithoutChildrenInput>, ReportCategoryUncheckedUpdateWithoutChildrenInput>
  }

  export type ReportCategoryUpdateManyWithoutParentNestedInput = {
    create?: XOR<ReportCategoryCreateWithoutParentInput, ReportCategoryUncheckedCreateWithoutParentInput> | ReportCategoryCreateWithoutParentInput[] | ReportCategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: ReportCategoryCreateOrConnectWithoutParentInput | ReportCategoryCreateOrConnectWithoutParentInput[]
    upsert?: ReportCategoryUpsertWithWhereUniqueWithoutParentInput | ReportCategoryUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: ReportCategoryCreateManyParentInputEnvelope
    set?: ReportCategoryWhereUniqueInput | ReportCategoryWhereUniqueInput[]
    disconnect?: ReportCategoryWhereUniqueInput | ReportCategoryWhereUniqueInput[]
    delete?: ReportCategoryWhereUniqueInput | ReportCategoryWhereUniqueInput[]
    connect?: ReportCategoryWhereUniqueInput | ReportCategoryWhereUniqueInput[]
    update?: ReportCategoryUpdateWithWhereUniqueWithoutParentInput | ReportCategoryUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: ReportCategoryUpdateManyWithWhereWithoutParentInput | ReportCategoryUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: ReportCategoryScalarWhereInput | ReportCategoryScalarWhereInput[]
  }

  export type UserUpdateOneWithoutCreatorReportCategoryNestedInput = {
    create?: XOR<UserCreateWithoutCreatorReportCategoryInput, UserUncheckedCreateWithoutCreatorReportCategoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatorReportCategoryInput
    upsert?: UserUpsertWithoutCreatorReportCategoryInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatorReportCategoryInput, UserUpdateWithoutCreatorReportCategoryInput>, UserUncheckedUpdateWithoutCreatorReportCategoryInput>
  }

  export type UserUpdateOneWithoutUpdaterReportCategoryNestedInput = {
    create?: XOR<UserCreateWithoutUpdaterReportCategoryInput, UserUncheckedCreateWithoutUpdaterReportCategoryInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdaterReportCategoryInput
    upsert?: UserUpsertWithoutUpdaterReportCategoryInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdaterReportCategoryInput, UserUpdateWithoutUpdaterReportCategoryInput>, UserUncheckedUpdateWithoutUpdaterReportCategoryInput>
  }

  export type ReportUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ReportCreateWithoutCategoryInput, ReportUncheckedCreateWithoutCategoryInput> | ReportCreateWithoutCategoryInput[] | ReportUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutCategoryInput | ReportCreateOrConnectWithoutCategoryInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutCategoryInput | ReportUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ReportCreateManyCategoryInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutCategoryInput | ReportUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutCategoryInput | ReportUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type ReportCategoryUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<ReportCategoryCreateWithoutParentInput, ReportCategoryUncheckedCreateWithoutParentInput> | ReportCategoryCreateWithoutParentInput[] | ReportCategoryUncheckedCreateWithoutParentInput[]
    connectOrCreate?: ReportCategoryCreateOrConnectWithoutParentInput | ReportCategoryCreateOrConnectWithoutParentInput[]
    upsert?: ReportCategoryUpsertWithWhereUniqueWithoutParentInput | ReportCategoryUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: ReportCategoryCreateManyParentInputEnvelope
    set?: ReportCategoryWhereUniqueInput | ReportCategoryWhereUniqueInput[]
    disconnect?: ReportCategoryWhereUniqueInput | ReportCategoryWhereUniqueInput[]
    delete?: ReportCategoryWhereUniqueInput | ReportCategoryWhereUniqueInput[]
    connect?: ReportCategoryWhereUniqueInput | ReportCategoryWhereUniqueInput[]
    update?: ReportCategoryUpdateWithWhereUniqueWithoutParentInput | ReportCategoryUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: ReportCategoryUpdateManyWithWhereWithoutParentInput | ReportCategoryUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: ReportCategoryScalarWhereInput | ReportCategoryScalarWhereInput[]
  }

  export type ReportUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<ReportCreateWithoutCategoryInput, ReportUncheckedCreateWithoutCategoryInput> | ReportCreateWithoutCategoryInput[] | ReportUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutCategoryInput | ReportCreateOrConnectWithoutCategoryInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutCategoryInput | ReportUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: ReportCreateManyCategoryInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutCategoryInput | ReportUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutCategoryInput | ReportUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type ReportCategoryCreateNestedOneWithoutReportsInput = {
    create?: XOR<ReportCategoryCreateWithoutReportsInput, ReportCategoryUncheckedCreateWithoutReportsInput>
    connectOrCreate?: ReportCategoryCreateOrConnectWithoutReportsInput
    connect?: ReportCategoryWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatorReportInput = {
    create?: XOR<UserCreateWithoutCreatorReportInput, UserUncheckedCreateWithoutCreatorReportInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatorReportInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdaterReportInput = {
    create?: XOR<UserCreateWithoutUpdaterReportInput, UserUncheckedCreateWithoutUpdaterReportInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdaterReportInput
    connect?: UserWhereUniqueInput
  }

  export type OrganizationCreateNestedOneWithoutReportInput = {
    create?: XOR<OrganizationCreateWithoutReportInput, OrganizationUncheckedCreateWithoutReportInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutReportInput
    connect?: OrganizationWhereUniqueInput
  }

  export type NoteCreateNestedManyWithoutReportInput = {
    create?: XOR<NoteCreateWithoutReportInput, NoteUncheckedCreateWithoutReportInput> | NoteCreateWithoutReportInput[] | NoteUncheckedCreateWithoutReportInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutReportInput | NoteCreateOrConnectWithoutReportInput[]
    createMany?: NoteCreateManyReportInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type StageCreateNestedManyWithoutReportInput = {
    create?: XOR<StageCreateWithoutReportInput, StageUncheckedCreateWithoutReportInput> | StageCreateWithoutReportInput[] | StageUncheckedCreateWithoutReportInput[]
    connectOrCreate?: StageCreateOrConnectWithoutReportInput | StageCreateOrConnectWithoutReportInput[]
    createMany?: StageCreateManyReportInputEnvelope
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
  }

  export type FileCreateNestedManyWithoutReportInput = {
    create?: XOR<FileCreateWithoutReportInput, FileUncheckedCreateWithoutReportInput> | FileCreateWithoutReportInput[] | FileUncheckedCreateWithoutReportInput[]
    connectOrCreate?: FileCreateOrConnectWithoutReportInput | FileCreateOrConnectWithoutReportInput[]
    createMany?: FileCreateManyReportInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type NoteUncheckedCreateNestedManyWithoutReportInput = {
    create?: XOR<NoteCreateWithoutReportInput, NoteUncheckedCreateWithoutReportInput> | NoteCreateWithoutReportInput[] | NoteUncheckedCreateWithoutReportInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutReportInput | NoteCreateOrConnectWithoutReportInput[]
    createMany?: NoteCreateManyReportInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type StageUncheckedCreateNestedManyWithoutReportInput = {
    create?: XOR<StageCreateWithoutReportInput, StageUncheckedCreateWithoutReportInput> | StageCreateWithoutReportInput[] | StageUncheckedCreateWithoutReportInput[]
    connectOrCreate?: StageCreateOrConnectWithoutReportInput | StageCreateOrConnectWithoutReportInput[]
    createMany?: StageCreateManyReportInputEnvelope
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
  }

  export type FileUncheckedCreateNestedManyWithoutReportInput = {
    create?: XOR<FileCreateWithoutReportInput, FileUncheckedCreateWithoutReportInput> | FileCreateWithoutReportInput[] | FileUncheckedCreateWithoutReportInput[]
    connectOrCreate?: FileCreateOrConnectWithoutReportInput | FileCreateOrConnectWithoutReportInput[]
    createMany?: FileCreateManyReportInputEnvelope
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ReportCategoryUpdateOneRequiredWithoutReportsNestedInput = {
    create?: XOR<ReportCategoryCreateWithoutReportsInput, ReportCategoryUncheckedCreateWithoutReportsInput>
    connectOrCreate?: ReportCategoryCreateOrConnectWithoutReportsInput
    upsert?: ReportCategoryUpsertWithoutReportsInput
    connect?: ReportCategoryWhereUniqueInput
    update?: XOR<XOR<ReportCategoryUpdateToOneWithWhereWithoutReportsInput, ReportCategoryUpdateWithoutReportsInput>, ReportCategoryUncheckedUpdateWithoutReportsInput>
  }

  export type UserUpdateOneWithoutCreatorReportNestedInput = {
    create?: XOR<UserCreateWithoutCreatorReportInput, UserUncheckedCreateWithoutCreatorReportInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatorReportInput
    upsert?: UserUpsertWithoutCreatorReportInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatorReportInput, UserUpdateWithoutCreatorReportInput>, UserUncheckedUpdateWithoutCreatorReportInput>
  }

  export type UserUpdateOneWithoutUpdaterReportNestedInput = {
    create?: XOR<UserCreateWithoutUpdaterReportInput, UserUncheckedCreateWithoutUpdaterReportInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdaterReportInput
    upsert?: UserUpsertWithoutUpdaterReportInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdaterReportInput, UserUpdateWithoutUpdaterReportInput>, UserUncheckedUpdateWithoutUpdaterReportInput>
  }

  export type OrganizationUpdateOneWithoutReportNestedInput = {
    create?: XOR<OrganizationCreateWithoutReportInput, OrganizationUncheckedCreateWithoutReportInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutReportInput
    upsert?: OrganizationUpsertWithoutReportInput
    disconnect?: OrganizationWhereInput | boolean
    delete?: OrganizationWhereInput | boolean
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutReportInput, OrganizationUpdateWithoutReportInput>, OrganizationUncheckedUpdateWithoutReportInput>
  }

  export type NoteUpdateManyWithoutReportNestedInput = {
    create?: XOR<NoteCreateWithoutReportInput, NoteUncheckedCreateWithoutReportInput> | NoteCreateWithoutReportInput[] | NoteUncheckedCreateWithoutReportInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutReportInput | NoteCreateOrConnectWithoutReportInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutReportInput | NoteUpsertWithWhereUniqueWithoutReportInput[]
    createMany?: NoteCreateManyReportInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutReportInput | NoteUpdateWithWhereUniqueWithoutReportInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutReportInput | NoteUpdateManyWithWhereWithoutReportInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type StageUpdateManyWithoutReportNestedInput = {
    create?: XOR<StageCreateWithoutReportInput, StageUncheckedCreateWithoutReportInput> | StageCreateWithoutReportInput[] | StageUncheckedCreateWithoutReportInput[]
    connectOrCreate?: StageCreateOrConnectWithoutReportInput | StageCreateOrConnectWithoutReportInput[]
    upsert?: StageUpsertWithWhereUniqueWithoutReportInput | StageUpsertWithWhereUniqueWithoutReportInput[]
    createMany?: StageCreateManyReportInputEnvelope
    set?: StageWhereUniqueInput | StageWhereUniqueInput[]
    disconnect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    delete?: StageWhereUniqueInput | StageWhereUniqueInput[]
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    update?: StageUpdateWithWhereUniqueWithoutReportInput | StageUpdateWithWhereUniqueWithoutReportInput[]
    updateMany?: StageUpdateManyWithWhereWithoutReportInput | StageUpdateManyWithWhereWithoutReportInput[]
    deleteMany?: StageScalarWhereInput | StageScalarWhereInput[]
  }

  export type FileUpdateManyWithoutReportNestedInput = {
    create?: XOR<FileCreateWithoutReportInput, FileUncheckedCreateWithoutReportInput> | FileCreateWithoutReportInput[] | FileUncheckedCreateWithoutReportInput[]
    connectOrCreate?: FileCreateOrConnectWithoutReportInput | FileCreateOrConnectWithoutReportInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutReportInput | FileUpsertWithWhereUniqueWithoutReportInput[]
    createMany?: FileCreateManyReportInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutReportInput | FileUpdateWithWhereUniqueWithoutReportInput[]
    updateMany?: FileUpdateManyWithWhereWithoutReportInput | FileUpdateManyWithWhereWithoutReportInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type NoteUncheckedUpdateManyWithoutReportNestedInput = {
    create?: XOR<NoteCreateWithoutReportInput, NoteUncheckedCreateWithoutReportInput> | NoteCreateWithoutReportInput[] | NoteUncheckedCreateWithoutReportInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutReportInput | NoteCreateOrConnectWithoutReportInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutReportInput | NoteUpsertWithWhereUniqueWithoutReportInput[]
    createMany?: NoteCreateManyReportInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutReportInput | NoteUpdateWithWhereUniqueWithoutReportInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutReportInput | NoteUpdateManyWithWhereWithoutReportInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type StageUncheckedUpdateManyWithoutReportNestedInput = {
    create?: XOR<StageCreateWithoutReportInput, StageUncheckedCreateWithoutReportInput> | StageCreateWithoutReportInput[] | StageUncheckedCreateWithoutReportInput[]
    connectOrCreate?: StageCreateOrConnectWithoutReportInput | StageCreateOrConnectWithoutReportInput[]
    upsert?: StageUpsertWithWhereUniqueWithoutReportInput | StageUpsertWithWhereUniqueWithoutReportInput[]
    createMany?: StageCreateManyReportInputEnvelope
    set?: StageWhereUniqueInput | StageWhereUniqueInput[]
    disconnect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    delete?: StageWhereUniqueInput | StageWhereUniqueInput[]
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    update?: StageUpdateWithWhereUniqueWithoutReportInput | StageUpdateWithWhereUniqueWithoutReportInput[]
    updateMany?: StageUpdateManyWithWhereWithoutReportInput | StageUpdateManyWithWhereWithoutReportInput[]
    deleteMany?: StageScalarWhereInput | StageScalarWhereInput[]
  }

  export type FileUncheckedUpdateManyWithoutReportNestedInput = {
    create?: XOR<FileCreateWithoutReportInput, FileUncheckedCreateWithoutReportInput> | FileCreateWithoutReportInput[] | FileUncheckedCreateWithoutReportInput[]
    connectOrCreate?: FileCreateOrConnectWithoutReportInput | FileCreateOrConnectWithoutReportInput[]
    upsert?: FileUpsertWithWhereUniqueWithoutReportInput | FileUpsertWithWhereUniqueWithoutReportInput[]
    createMany?: FileCreateManyReportInputEnvelope
    set?: FileWhereUniqueInput | FileWhereUniqueInput[]
    disconnect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    delete?: FileWhereUniqueInput | FileWhereUniqueInput[]
    connect?: FileWhereUniqueInput | FileWhereUniqueInput[]
    update?: FileUpdateWithWhereUniqueWithoutReportInput | FileUpdateWithWhereUniqueWithoutReportInput[]
    updateMany?: FileUpdateManyWithWhereWithoutReportInput | FileUpdateManyWithWhereWithoutReportInput[]
    deleteMany?: FileScalarWhereInput | FileScalarWhereInput[]
  }

  export type ReportCreateNestedOneWithoutFilesInput = {
    create?: XOR<ReportCreateWithoutFilesInput, ReportUncheckedCreateWithoutFilesInput>
    connectOrCreate?: ReportCreateOrConnectWithoutFilesInput
    connect?: ReportWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type ReportUpdateOneWithoutFilesNestedInput = {
    create?: XOR<ReportCreateWithoutFilesInput, ReportUncheckedCreateWithoutFilesInput>
    connectOrCreate?: ReportCreateOrConnectWithoutFilesInput
    upsert?: ReportUpsertWithoutFilesInput
    disconnect?: ReportWhereInput | boolean
    delete?: ReportWhereInput | boolean
    connect?: ReportWhereUniqueInput
    update?: XOR<XOR<ReportUpdateToOneWithWhereWithoutFilesInput, ReportUpdateWithoutFilesInput>, ReportUncheckedUpdateWithoutFilesInput>
  }

  export type UserCreateNestedOneWithoutCreatorNoteInput = {
    create?: XOR<UserCreateWithoutCreatorNoteInput, UserUncheckedCreateWithoutCreatorNoteInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatorNoteInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdaterNoteInput = {
    create?: XOR<UserCreateWithoutUpdaterNoteInput, UserUncheckedCreateWithoutUpdaterNoteInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdaterNoteInput
    connect?: UserWhereUniqueInput
  }

  export type ReportCreateNestedOneWithoutNotesInput = {
    create?: XOR<ReportCreateWithoutNotesInput, ReportUncheckedCreateWithoutNotesInput>
    connectOrCreate?: ReportCreateOrConnectWithoutNotesInput
    connect?: ReportWhereUniqueInput
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type UserUpdateOneWithoutCreatorNoteNestedInput = {
    create?: XOR<UserCreateWithoutCreatorNoteInput, UserUncheckedCreateWithoutCreatorNoteInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatorNoteInput
    upsert?: UserUpsertWithoutCreatorNoteInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatorNoteInput, UserUpdateWithoutCreatorNoteInput>, UserUncheckedUpdateWithoutCreatorNoteInput>
  }

  export type UserUpdateOneWithoutUpdaterNoteNestedInput = {
    create?: XOR<UserCreateWithoutUpdaterNoteInput, UserUncheckedCreateWithoutUpdaterNoteInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdaterNoteInput
    upsert?: UserUpsertWithoutUpdaterNoteInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdaterNoteInput, UserUpdateWithoutUpdaterNoteInput>, UserUncheckedUpdateWithoutUpdaterNoteInput>
  }

  export type ReportUpdateOneWithoutNotesNestedInput = {
    create?: XOR<ReportCreateWithoutNotesInput, ReportUncheckedCreateWithoutNotesInput>
    connectOrCreate?: ReportCreateOrConnectWithoutNotesInput
    upsert?: ReportUpsertWithoutNotesInput
    disconnect?: ReportWhereInput | boolean
    delete?: ReportWhereInput | boolean
    connect?: ReportWhereUniqueInput
    update?: XOR<XOR<ReportUpdateToOneWithWhereWithoutNotesInput, ReportUpdateWithoutNotesInput>, ReportUncheckedUpdateWithoutNotesInput>
  }

  export type StageTypeCreateNestedOneWithoutStagesInput = {
    create?: XOR<StageTypeCreateWithoutStagesInput, StageTypeUncheckedCreateWithoutStagesInput>
    connectOrCreate?: StageTypeCreateOrConnectWithoutStagesInput
    connect?: StageTypeWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatorStageInput = {
    create?: XOR<UserCreateWithoutCreatorStageInput, UserUncheckedCreateWithoutCreatorStageInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatorStageInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdaterStageInput = {
    create?: XOR<UserCreateWithoutUpdaterStageInput, UserUncheckedCreateWithoutUpdaterStageInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdaterStageInput
    connect?: UserWhereUniqueInput
  }

  export type ReportCreateNestedOneWithoutStagesInput = {
    create?: XOR<ReportCreateWithoutStagesInput, ReportUncheckedCreateWithoutStagesInput>
    connectOrCreate?: ReportCreateOrConnectWithoutStagesInput
    connect?: ReportWhereUniqueInput
  }

  export type StageTypeUpdateOneRequiredWithoutStagesNestedInput = {
    create?: XOR<StageTypeCreateWithoutStagesInput, StageTypeUncheckedCreateWithoutStagesInput>
    connectOrCreate?: StageTypeCreateOrConnectWithoutStagesInput
    upsert?: StageTypeUpsertWithoutStagesInput
    connect?: StageTypeWhereUniqueInput
    update?: XOR<XOR<StageTypeUpdateToOneWithWhereWithoutStagesInput, StageTypeUpdateWithoutStagesInput>, StageTypeUncheckedUpdateWithoutStagesInput>
  }

  export type UserUpdateOneWithoutCreatorStageNestedInput = {
    create?: XOR<UserCreateWithoutCreatorStageInput, UserUncheckedCreateWithoutCreatorStageInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatorStageInput
    upsert?: UserUpsertWithoutCreatorStageInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatorStageInput, UserUpdateWithoutCreatorStageInput>, UserUncheckedUpdateWithoutCreatorStageInput>
  }

  export type UserUpdateOneWithoutUpdaterStageNestedInput = {
    create?: XOR<UserCreateWithoutUpdaterStageInput, UserUncheckedCreateWithoutUpdaterStageInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdaterStageInput
    upsert?: UserUpsertWithoutUpdaterStageInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdaterStageInput, UserUpdateWithoutUpdaterStageInput>, UserUncheckedUpdateWithoutUpdaterStageInput>
  }

  export type ReportUpdateOneWithoutStagesNestedInput = {
    create?: XOR<ReportCreateWithoutStagesInput, ReportUncheckedCreateWithoutStagesInput>
    connectOrCreate?: ReportCreateOrConnectWithoutStagesInput
    upsert?: ReportUpsertWithoutStagesInput
    disconnect?: ReportWhereInput | boolean
    delete?: ReportWhereInput | boolean
    connect?: ReportWhereUniqueInput
    update?: XOR<XOR<ReportUpdateToOneWithWhereWithoutStagesInput, ReportUpdateWithoutStagesInput>, ReportUncheckedUpdateWithoutStagesInput>
  }

  export type StageCreateNestedManyWithoutTypeInput = {
    create?: XOR<StageCreateWithoutTypeInput, StageUncheckedCreateWithoutTypeInput> | StageCreateWithoutTypeInput[] | StageUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: StageCreateOrConnectWithoutTypeInput | StageCreateOrConnectWithoutTypeInput[]
    createMany?: StageCreateManyTypeInputEnvelope
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
  }

  export type StageUncheckedCreateNestedManyWithoutTypeInput = {
    create?: XOR<StageCreateWithoutTypeInput, StageUncheckedCreateWithoutTypeInput> | StageCreateWithoutTypeInput[] | StageUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: StageCreateOrConnectWithoutTypeInput | StageCreateOrConnectWithoutTypeInput[]
    createMany?: StageCreateManyTypeInputEnvelope
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
  }

  export type StageUpdateManyWithoutTypeNestedInput = {
    create?: XOR<StageCreateWithoutTypeInput, StageUncheckedCreateWithoutTypeInput> | StageCreateWithoutTypeInput[] | StageUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: StageCreateOrConnectWithoutTypeInput | StageCreateOrConnectWithoutTypeInput[]
    upsert?: StageUpsertWithWhereUniqueWithoutTypeInput | StageUpsertWithWhereUniqueWithoutTypeInput[]
    createMany?: StageCreateManyTypeInputEnvelope
    set?: StageWhereUniqueInput | StageWhereUniqueInput[]
    disconnect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    delete?: StageWhereUniqueInput | StageWhereUniqueInput[]
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    update?: StageUpdateWithWhereUniqueWithoutTypeInput | StageUpdateWithWhereUniqueWithoutTypeInput[]
    updateMany?: StageUpdateManyWithWhereWithoutTypeInput | StageUpdateManyWithWhereWithoutTypeInput[]
    deleteMany?: StageScalarWhereInput | StageScalarWhereInput[]
  }

  export type StageUncheckedUpdateManyWithoutTypeNestedInput = {
    create?: XOR<StageCreateWithoutTypeInput, StageUncheckedCreateWithoutTypeInput> | StageCreateWithoutTypeInput[] | StageUncheckedCreateWithoutTypeInput[]
    connectOrCreate?: StageCreateOrConnectWithoutTypeInput | StageCreateOrConnectWithoutTypeInput[]
    upsert?: StageUpsertWithWhereUniqueWithoutTypeInput | StageUpsertWithWhereUniqueWithoutTypeInput[]
    createMany?: StageCreateManyTypeInputEnvelope
    set?: StageWhereUniqueInput | StageWhereUniqueInput[]
    disconnect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    delete?: StageWhereUniqueInput | StageWhereUniqueInput[]
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    update?: StageUpdateWithWhereUniqueWithoutTypeInput | StageUpdateWithWhereUniqueWithoutTypeInput[]
    updateMany?: StageUpdateManyWithWhereWithoutTypeInput | StageUpdateManyWithWhereWithoutTypeInput[]
    deleteMany?: StageScalarWhereInput | StageScalarWhereInput[]
  }

  export type DepartmentCreateNestedOneWithoutUsersInput = {
    create?: XOR<DepartmentCreateWithoutUsersInput, DepartmentUncheckedCreateWithoutUsersInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutUsersInput
    connect?: DepartmentWhereUniqueInput
  }

  export type OrganizationCreateNestedOneWithoutUsersInput = {
    create?: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutUsersInput
    connect?: OrganizationWhereUniqueInput
  }

  export type RoleCreateNestedOneWithoutUsersInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput
    connect?: RoleWhereUniqueInput
  }

  export type UserPermissionCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type ProfileCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type NoteCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<NoteCreateWithoutCreatedByInput, NoteUncheckedCreateWithoutCreatedByInput> | NoteCreateWithoutCreatedByInput[] | NoteUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutCreatedByInput | NoteCreateOrConnectWithoutCreatedByInput[]
    createMany?: NoteCreateManyCreatedByInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type NoteCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<NoteCreateWithoutUpdatedByInput, NoteUncheckedCreateWithoutUpdatedByInput> | NoteCreateWithoutUpdatedByInput[] | NoteUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutUpdatedByInput | NoteCreateOrConnectWithoutUpdatedByInput[]
    createMany?: NoteCreateManyUpdatedByInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type StageCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<StageCreateWithoutCreatedByInput, StageUncheckedCreateWithoutCreatedByInput> | StageCreateWithoutCreatedByInput[] | StageUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: StageCreateOrConnectWithoutCreatedByInput | StageCreateOrConnectWithoutCreatedByInput[]
    createMany?: StageCreateManyCreatedByInputEnvelope
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
  }

  export type StageCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<StageCreateWithoutUpdatedByInput, StageUncheckedCreateWithoutUpdatedByInput> | StageCreateWithoutUpdatedByInput[] | StageUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: StageCreateOrConnectWithoutUpdatedByInput | StageCreateOrConnectWithoutUpdatedByInput[]
    createMany?: StageCreateManyUpdatedByInputEnvelope
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
  }

  export type ReportCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ReportCreateWithoutCreatedByInput, ReportUncheckedCreateWithoutCreatedByInput> | ReportCreateWithoutCreatedByInput[] | ReportUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutCreatedByInput | ReportCreateOrConnectWithoutCreatedByInput[]
    createMany?: ReportCreateManyCreatedByInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type ReportCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<ReportCreateWithoutUpdatedByInput, ReportUncheckedCreateWithoutUpdatedByInput> | ReportCreateWithoutUpdatedByInput[] | ReportUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutUpdatedByInput | ReportCreateOrConnectWithoutUpdatedByInput[]
    createMany?: ReportCreateManyUpdatedByInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type ReportCategoryCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ReportCategoryCreateWithoutCreatedByInput, ReportCategoryUncheckedCreateWithoutCreatedByInput> | ReportCategoryCreateWithoutCreatedByInput[] | ReportCategoryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ReportCategoryCreateOrConnectWithoutCreatedByInput | ReportCategoryCreateOrConnectWithoutCreatedByInput[]
    createMany?: ReportCategoryCreateManyCreatedByInputEnvelope
    connect?: ReportCategoryWhereUniqueInput | ReportCategoryWhereUniqueInput[]
  }

  export type ReportCategoryCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<ReportCategoryCreateWithoutUpdatedByInput, ReportCategoryUncheckedCreateWithoutUpdatedByInput> | ReportCategoryCreateWithoutUpdatedByInput[] | ReportCategoryUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ReportCategoryCreateOrConnectWithoutUpdatedByInput | ReportCategoryCreateOrConnectWithoutUpdatedByInput[]
    createMany?: ReportCategoryCreateManyUpdatedByInputEnvelope
    connect?: ReportCategoryWhereUniqueInput | ReportCategoryWhereUniqueInput[]
  }

  export type DepartmentCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<DepartmentCreateWithoutCreatedByInput, DepartmentUncheckedCreateWithoutCreatedByInput> | DepartmentCreateWithoutCreatedByInput[] | DepartmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutCreatedByInput | DepartmentCreateOrConnectWithoutCreatedByInput[]
    createMany?: DepartmentCreateManyCreatedByInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type DepartmentCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<DepartmentCreateWithoutUpdatedByInput, DepartmentUncheckedCreateWithoutUpdatedByInput> | DepartmentCreateWithoutUpdatedByInput[] | DepartmentUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutUpdatedByInput | DepartmentCreateOrConnectWithoutUpdatedByInput[]
    createMany?: DepartmentCreateManyUpdatedByInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type PermissionCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PermissionCreateWithoutCreatedByInput, PermissionUncheckedCreateWithoutCreatedByInput> | PermissionCreateWithoutCreatedByInput[] | PermissionUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PermissionCreateOrConnectWithoutCreatedByInput | PermissionCreateOrConnectWithoutCreatedByInput[]
    createMany?: PermissionCreateManyCreatedByInputEnvelope
    connect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
  }

  export type PermissionCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<PermissionCreateWithoutUpdatedByInput, PermissionUncheckedCreateWithoutUpdatedByInput> | PermissionCreateWithoutUpdatedByInput[] | PermissionUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PermissionCreateOrConnectWithoutUpdatedByInput | PermissionCreateOrConnectWithoutUpdatedByInput[]
    createMany?: PermissionCreateManyUpdatedByInputEnvelope
    connect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
  }

  export type DepartmentPermissionCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<DepartmentPermissionCreateWithoutCreatedByInput, DepartmentPermissionUncheckedCreateWithoutCreatedByInput> | DepartmentPermissionCreateWithoutCreatedByInput[] | DepartmentPermissionUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DepartmentPermissionCreateOrConnectWithoutCreatedByInput | DepartmentPermissionCreateOrConnectWithoutCreatedByInput[]
    createMany?: DepartmentPermissionCreateManyCreatedByInputEnvelope
    connect?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
  }

  export type DepartmentPermissionCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<DepartmentPermissionCreateWithoutUpdatedByInput, DepartmentPermissionUncheckedCreateWithoutUpdatedByInput> | DepartmentPermissionCreateWithoutUpdatedByInput[] | DepartmentPermissionUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: DepartmentPermissionCreateOrConnectWithoutUpdatedByInput | DepartmentPermissionCreateOrConnectWithoutUpdatedByInput[]
    createMany?: DepartmentPermissionCreateManyUpdatedByInputEnvelope
    connect?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
  }

  export type UserPermissionCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<UserPermissionCreateWithoutCreatedByInput, UserPermissionUncheckedCreateWithoutCreatedByInput> | UserPermissionCreateWithoutCreatedByInput[] | UserPermissionUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutCreatedByInput | UserPermissionCreateOrConnectWithoutCreatedByInput[]
    createMany?: UserPermissionCreateManyCreatedByInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type UserPermissionCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<UserPermissionCreateWithoutUpdatedByInput, UserPermissionUncheckedCreateWithoutUpdatedByInput> | UserPermissionCreateWithoutUpdatedByInput[] | UserPermissionUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUpdatedByInput | UserPermissionCreateOrConnectWithoutUpdatedByInput[]
    createMany?: UserPermissionCreateManyUpdatedByInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type ProfileCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ProfileCreateWithoutCreatedByInput, ProfileUncheckedCreateWithoutCreatedByInput> | ProfileCreateWithoutCreatedByInput[] | ProfileUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutCreatedByInput | ProfileCreateOrConnectWithoutCreatedByInput[]
    createMany?: ProfileCreateManyCreatedByInputEnvelope
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
  }

  export type ProfileCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<ProfileCreateWithoutUpdatedByInput, ProfileUncheckedCreateWithoutUpdatedByInput> | ProfileCreateWithoutUpdatedByInput[] | ProfileUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutUpdatedByInput | ProfileCreateOrConnectWithoutUpdatedByInput[]
    createMany?: ProfileCreateManyUpdatedByInputEnvelope
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
  }

  export type UserPermissionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type ProfileUncheckedCreateNestedOneWithoutUserInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    connect?: ProfileWhereUniqueInput
  }

  export type NoteUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<NoteCreateWithoutCreatedByInput, NoteUncheckedCreateWithoutCreatedByInput> | NoteCreateWithoutCreatedByInput[] | NoteUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutCreatedByInput | NoteCreateOrConnectWithoutCreatedByInput[]
    createMany?: NoteCreateManyCreatedByInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type NoteUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<NoteCreateWithoutUpdatedByInput, NoteUncheckedCreateWithoutUpdatedByInput> | NoteCreateWithoutUpdatedByInput[] | NoteUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutUpdatedByInput | NoteCreateOrConnectWithoutUpdatedByInput[]
    createMany?: NoteCreateManyUpdatedByInputEnvelope
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
  }

  export type StageUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<StageCreateWithoutCreatedByInput, StageUncheckedCreateWithoutCreatedByInput> | StageCreateWithoutCreatedByInput[] | StageUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: StageCreateOrConnectWithoutCreatedByInput | StageCreateOrConnectWithoutCreatedByInput[]
    createMany?: StageCreateManyCreatedByInputEnvelope
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
  }

  export type StageUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<StageCreateWithoutUpdatedByInput, StageUncheckedCreateWithoutUpdatedByInput> | StageCreateWithoutUpdatedByInput[] | StageUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: StageCreateOrConnectWithoutUpdatedByInput | StageCreateOrConnectWithoutUpdatedByInput[]
    createMany?: StageCreateManyUpdatedByInputEnvelope
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
  }

  export type ReportUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ReportCreateWithoutCreatedByInput, ReportUncheckedCreateWithoutCreatedByInput> | ReportCreateWithoutCreatedByInput[] | ReportUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutCreatedByInput | ReportCreateOrConnectWithoutCreatedByInput[]
    createMany?: ReportCreateManyCreatedByInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type ReportUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<ReportCreateWithoutUpdatedByInput, ReportUncheckedCreateWithoutUpdatedByInput> | ReportCreateWithoutUpdatedByInput[] | ReportUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutUpdatedByInput | ReportCreateOrConnectWithoutUpdatedByInput[]
    createMany?: ReportCreateManyUpdatedByInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type ReportCategoryUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ReportCategoryCreateWithoutCreatedByInput, ReportCategoryUncheckedCreateWithoutCreatedByInput> | ReportCategoryCreateWithoutCreatedByInput[] | ReportCategoryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ReportCategoryCreateOrConnectWithoutCreatedByInput | ReportCategoryCreateOrConnectWithoutCreatedByInput[]
    createMany?: ReportCategoryCreateManyCreatedByInputEnvelope
    connect?: ReportCategoryWhereUniqueInput | ReportCategoryWhereUniqueInput[]
  }

  export type ReportCategoryUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<ReportCategoryCreateWithoutUpdatedByInput, ReportCategoryUncheckedCreateWithoutUpdatedByInput> | ReportCategoryCreateWithoutUpdatedByInput[] | ReportCategoryUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ReportCategoryCreateOrConnectWithoutUpdatedByInput | ReportCategoryCreateOrConnectWithoutUpdatedByInput[]
    createMany?: ReportCategoryCreateManyUpdatedByInputEnvelope
    connect?: ReportCategoryWhereUniqueInput | ReportCategoryWhereUniqueInput[]
  }

  export type DepartmentUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<DepartmentCreateWithoutCreatedByInput, DepartmentUncheckedCreateWithoutCreatedByInput> | DepartmentCreateWithoutCreatedByInput[] | DepartmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutCreatedByInput | DepartmentCreateOrConnectWithoutCreatedByInput[]
    createMany?: DepartmentCreateManyCreatedByInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type DepartmentUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<DepartmentCreateWithoutUpdatedByInput, DepartmentUncheckedCreateWithoutUpdatedByInput> | DepartmentCreateWithoutUpdatedByInput[] | DepartmentUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutUpdatedByInput | DepartmentCreateOrConnectWithoutUpdatedByInput[]
    createMany?: DepartmentCreateManyUpdatedByInputEnvelope
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
  }

  export type PermissionUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<PermissionCreateWithoutCreatedByInput, PermissionUncheckedCreateWithoutCreatedByInput> | PermissionCreateWithoutCreatedByInput[] | PermissionUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PermissionCreateOrConnectWithoutCreatedByInput | PermissionCreateOrConnectWithoutCreatedByInput[]
    createMany?: PermissionCreateManyCreatedByInputEnvelope
    connect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
  }

  export type PermissionUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<PermissionCreateWithoutUpdatedByInput, PermissionUncheckedCreateWithoutUpdatedByInput> | PermissionCreateWithoutUpdatedByInput[] | PermissionUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PermissionCreateOrConnectWithoutUpdatedByInput | PermissionCreateOrConnectWithoutUpdatedByInput[]
    createMany?: PermissionCreateManyUpdatedByInputEnvelope
    connect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
  }

  export type DepartmentPermissionUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<DepartmentPermissionCreateWithoutCreatedByInput, DepartmentPermissionUncheckedCreateWithoutCreatedByInput> | DepartmentPermissionCreateWithoutCreatedByInput[] | DepartmentPermissionUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DepartmentPermissionCreateOrConnectWithoutCreatedByInput | DepartmentPermissionCreateOrConnectWithoutCreatedByInput[]
    createMany?: DepartmentPermissionCreateManyCreatedByInputEnvelope
    connect?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
  }

  export type DepartmentPermissionUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<DepartmentPermissionCreateWithoutUpdatedByInput, DepartmentPermissionUncheckedCreateWithoutUpdatedByInput> | DepartmentPermissionCreateWithoutUpdatedByInput[] | DepartmentPermissionUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: DepartmentPermissionCreateOrConnectWithoutUpdatedByInput | DepartmentPermissionCreateOrConnectWithoutUpdatedByInput[]
    createMany?: DepartmentPermissionCreateManyUpdatedByInputEnvelope
    connect?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
  }

  export type UserPermissionUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<UserPermissionCreateWithoutCreatedByInput, UserPermissionUncheckedCreateWithoutCreatedByInput> | UserPermissionCreateWithoutCreatedByInput[] | UserPermissionUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutCreatedByInput | UserPermissionCreateOrConnectWithoutCreatedByInput[]
    createMany?: UserPermissionCreateManyCreatedByInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type UserPermissionUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<UserPermissionCreateWithoutUpdatedByInput, UserPermissionUncheckedCreateWithoutUpdatedByInput> | UserPermissionCreateWithoutUpdatedByInput[] | UserPermissionUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUpdatedByInput | UserPermissionCreateOrConnectWithoutUpdatedByInput[]
    createMany?: UserPermissionCreateManyUpdatedByInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type ProfileUncheckedCreateNestedManyWithoutCreatedByInput = {
    create?: XOR<ProfileCreateWithoutCreatedByInput, ProfileUncheckedCreateWithoutCreatedByInput> | ProfileCreateWithoutCreatedByInput[] | ProfileUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutCreatedByInput | ProfileCreateOrConnectWithoutCreatedByInput[]
    createMany?: ProfileCreateManyCreatedByInputEnvelope
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
  }

  export type ProfileUncheckedCreateNestedManyWithoutUpdatedByInput = {
    create?: XOR<ProfileCreateWithoutUpdatedByInput, ProfileUncheckedCreateWithoutUpdatedByInput> | ProfileCreateWithoutUpdatedByInput[] | ProfileUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutUpdatedByInput | ProfileCreateOrConnectWithoutUpdatedByInput[]
    createMany?: ProfileCreateManyUpdatedByInputEnvelope
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
  }

  export type EnumUserStatusFieldUpdateOperationsInput = {
    set?: $Enums.UserStatus
  }

  export type DepartmentUpdateOneWithoutUsersNestedInput = {
    create?: XOR<DepartmentCreateWithoutUsersInput, DepartmentUncheckedCreateWithoutUsersInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutUsersInput
    upsert?: DepartmentUpsertWithoutUsersInput
    disconnect?: DepartmentWhereInput | boolean
    delete?: DepartmentWhereInput | boolean
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutUsersInput, DepartmentUpdateWithoutUsersInput>, DepartmentUncheckedUpdateWithoutUsersInput>
  }

  export type OrganizationUpdateOneWithoutUsersNestedInput = {
    create?: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
    connectOrCreate?: OrganizationCreateOrConnectWithoutUsersInput
    upsert?: OrganizationUpsertWithoutUsersInput
    disconnect?: OrganizationWhereInput | boolean
    delete?: OrganizationWhereInput | boolean
    connect?: OrganizationWhereUniqueInput
    update?: XOR<XOR<OrganizationUpdateToOneWithWhereWithoutUsersInput, OrganizationUpdateWithoutUsersInput>, OrganizationUncheckedUpdateWithoutUsersInput>
  }

  export type RoleUpdateOneWithoutUsersNestedInput = {
    create?: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    connectOrCreate?: RoleCreateOrConnectWithoutUsersInput
    upsert?: RoleUpsertWithoutUsersInput
    disconnect?: RoleWhereInput | boolean
    delete?: RoleWhereInput | boolean
    connect?: RoleWhereUniqueInput
    update?: XOR<XOR<RoleUpdateToOneWithWhereWithoutUsersInput, RoleUpdateWithoutUsersInput>, RoleUncheckedUpdateWithoutUsersInput>
  }

  export type UserPermissionUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutUserInput | UserPermissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutUserInput | UserPermissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutUserInput | UserPermissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type ProfileUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    disconnect?: ProfileWhereInput | boolean
    delete?: ProfileWhereInput | boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutUserInput, ProfileUpdateWithoutUserInput>, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type NoteUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<NoteCreateWithoutCreatedByInput, NoteUncheckedCreateWithoutCreatedByInput> | NoteCreateWithoutCreatedByInput[] | NoteUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutCreatedByInput | NoteCreateOrConnectWithoutCreatedByInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutCreatedByInput | NoteUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: NoteCreateManyCreatedByInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutCreatedByInput | NoteUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutCreatedByInput | NoteUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type NoteUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<NoteCreateWithoutUpdatedByInput, NoteUncheckedCreateWithoutUpdatedByInput> | NoteCreateWithoutUpdatedByInput[] | NoteUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutUpdatedByInput | NoteCreateOrConnectWithoutUpdatedByInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutUpdatedByInput | NoteUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: NoteCreateManyUpdatedByInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutUpdatedByInput | NoteUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutUpdatedByInput | NoteUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type StageUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<StageCreateWithoutCreatedByInput, StageUncheckedCreateWithoutCreatedByInput> | StageCreateWithoutCreatedByInput[] | StageUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: StageCreateOrConnectWithoutCreatedByInput | StageCreateOrConnectWithoutCreatedByInput[]
    upsert?: StageUpsertWithWhereUniqueWithoutCreatedByInput | StageUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: StageCreateManyCreatedByInputEnvelope
    set?: StageWhereUniqueInput | StageWhereUniqueInput[]
    disconnect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    delete?: StageWhereUniqueInput | StageWhereUniqueInput[]
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    update?: StageUpdateWithWhereUniqueWithoutCreatedByInput | StageUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: StageUpdateManyWithWhereWithoutCreatedByInput | StageUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: StageScalarWhereInput | StageScalarWhereInput[]
  }

  export type StageUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<StageCreateWithoutUpdatedByInput, StageUncheckedCreateWithoutUpdatedByInput> | StageCreateWithoutUpdatedByInput[] | StageUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: StageCreateOrConnectWithoutUpdatedByInput | StageCreateOrConnectWithoutUpdatedByInput[]
    upsert?: StageUpsertWithWhereUniqueWithoutUpdatedByInput | StageUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: StageCreateManyUpdatedByInputEnvelope
    set?: StageWhereUniqueInput | StageWhereUniqueInput[]
    disconnect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    delete?: StageWhereUniqueInput | StageWhereUniqueInput[]
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    update?: StageUpdateWithWhereUniqueWithoutUpdatedByInput | StageUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: StageUpdateManyWithWhereWithoutUpdatedByInput | StageUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: StageScalarWhereInput | StageScalarWhereInput[]
  }

  export type ReportUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ReportCreateWithoutCreatedByInput, ReportUncheckedCreateWithoutCreatedByInput> | ReportCreateWithoutCreatedByInput[] | ReportUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutCreatedByInput | ReportCreateOrConnectWithoutCreatedByInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutCreatedByInput | ReportUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ReportCreateManyCreatedByInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutCreatedByInput | ReportUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutCreatedByInput | ReportUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type ReportUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<ReportCreateWithoutUpdatedByInput, ReportUncheckedCreateWithoutUpdatedByInput> | ReportCreateWithoutUpdatedByInput[] | ReportUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutUpdatedByInput | ReportCreateOrConnectWithoutUpdatedByInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutUpdatedByInput | ReportUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: ReportCreateManyUpdatedByInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutUpdatedByInput | ReportUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutUpdatedByInput | ReportUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type ReportCategoryUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ReportCategoryCreateWithoutCreatedByInput, ReportCategoryUncheckedCreateWithoutCreatedByInput> | ReportCategoryCreateWithoutCreatedByInput[] | ReportCategoryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ReportCategoryCreateOrConnectWithoutCreatedByInput | ReportCategoryCreateOrConnectWithoutCreatedByInput[]
    upsert?: ReportCategoryUpsertWithWhereUniqueWithoutCreatedByInput | ReportCategoryUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ReportCategoryCreateManyCreatedByInputEnvelope
    set?: ReportCategoryWhereUniqueInput | ReportCategoryWhereUniqueInput[]
    disconnect?: ReportCategoryWhereUniqueInput | ReportCategoryWhereUniqueInput[]
    delete?: ReportCategoryWhereUniqueInput | ReportCategoryWhereUniqueInput[]
    connect?: ReportCategoryWhereUniqueInput | ReportCategoryWhereUniqueInput[]
    update?: ReportCategoryUpdateWithWhereUniqueWithoutCreatedByInput | ReportCategoryUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ReportCategoryUpdateManyWithWhereWithoutCreatedByInput | ReportCategoryUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ReportCategoryScalarWhereInput | ReportCategoryScalarWhereInput[]
  }

  export type ReportCategoryUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<ReportCategoryCreateWithoutUpdatedByInput, ReportCategoryUncheckedCreateWithoutUpdatedByInput> | ReportCategoryCreateWithoutUpdatedByInput[] | ReportCategoryUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ReportCategoryCreateOrConnectWithoutUpdatedByInput | ReportCategoryCreateOrConnectWithoutUpdatedByInput[]
    upsert?: ReportCategoryUpsertWithWhereUniqueWithoutUpdatedByInput | ReportCategoryUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: ReportCategoryCreateManyUpdatedByInputEnvelope
    set?: ReportCategoryWhereUniqueInput | ReportCategoryWhereUniqueInput[]
    disconnect?: ReportCategoryWhereUniqueInput | ReportCategoryWhereUniqueInput[]
    delete?: ReportCategoryWhereUniqueInput | ReportCategoryWhereUniqueInput[]
    connect?: ReportCategoryWhereUniqueInput | ReportCategoryWhereUniqueInput[]
    update?: ReportCategoryUpdateWithWhereUniqueWithoutUpdatedByInput | ReportCategoryUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: ReportCategoryUpdateManyWithWhereWithoutUpdatedByInput | ReportCategoryUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: ReportCategoryScalarWhereInput | ReportCategoryScalarWhereInput[]
  }

  export type DepartmentUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<DepartmentCreateWithoutCreatedByInput, DepartmentUncheckedCreateWithoutCreatedByInput> | DepartmentCreateWithoutCreatedByInput[] | DepartmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutCreatedByInput | DepartmentCreateOrConnectWithoutCreatedByInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutCreatedByInput | DepartmentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: DepartmentCreateManyCreatedByInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutCreatedByInput | DepartmentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutCreatedByInput | DepartmentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type DepartmentUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<DepartmentCreateWithoutUpdatedByInput, DepartmentUncheckedCreateWithoutUpdatedByInput> | DepartmentCreateWithoutUpdatedByInput[] | DepartmentUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutUpdatedByInput | DepartmentCreateOrConnectWithoutUpdatedByInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutUpdatedByInput | DepartmentUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: DepartmentCreateManyUpdatedByInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutUpdatedByInput | DepartmentUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutUpdatedByInput | DepartmentUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type PermissionUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PermissionCreateWithoutCreatedByInput, PermissionUncheckedCreateWithoutCreatedByInput> | PermissionCreateWithoutCreatedByInput[] | PermissionUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PermissionCreateOrConnectWithoutCreatedByInput | PermissionCreateOrConnectWithoutCreatedByInput[]
    upsert?: PermissionUpsertWithWhereUniqueWithoutCreatedByInput | PermissionUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PermissionCreateManyCreatedByInputEnvelope
    set?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    disconnect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    delete?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    connect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    update?: PermissionUpdateWithWhereUniqueWithoutCreatedByInput | PermissionUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PermissionUpdateManyWithWhereWithoutCreatedByInput | PermissionUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PermissionScalarWhereInput | PermissionScalarWhereInput[]
  }

  export type PermissionUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<PermissionCreateWithoutUpdatedByInput, PermissionUncheckedCreateWithoutUpdatedByInput> | PermissionCreateWithoutUpdatedByInput[] | PermissionUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PermissionCreateOrConnectWithoutUpdatedByInput | PermissionCreateOrConnectWithoutUpdatedByInput[]
    upsert?: PermissionUpsertWithWhereUniqueWithoutUpdatedByInput | PermissionUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: PermissionCreateManyUpdatedByInputEnvelope
    set?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    disconnect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    delete?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    connect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    update?: PermissionUpdateWithWhereUniqueWithoutUpdatedByInput | PermissionUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: PermissionUpdateManyWithWhereWithoutUpdatedByInput | PermissionUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: PermissionScalarWhereInput | PermissionScalarWhereInput[]
  }

  export type DepartmentPermissionUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<DepartmentPermissionCreateWithoutCreatedByInput, DepartmentPermissionUncheckedCreateWithoutCreatedByInput> | DepartmentPermissionCreateWithoutCreatedByInput[] | DepartmentPermissionUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DepartmentPermissionCreateOrConnectWithoutCreatedByInput | DepartmentPermissionCreateOrConnectWithoutCreatedByInput[]
    upsert?: DepartmentPermissionUpsertWithWhereUniqueWithoutCreatedByInput | DepartmentPermissionUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: DepartmentPermissionCreateManyCreatedByInputEnvelope
    set?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
    disconnect?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
    delete?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
    connect?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
    update?: DepartmentPermissionUpdateWithWhereUniqueWithoutCreatedByInput | DepartmentPermissionUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: DepartmentPermissionUpdateManyWithWhereWithoutCreatedByInput | DepartmentPermissionUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: DepartmentPermissionScalarWhereInput | DepartmentPermissionScalarWhereInput[]
  }

  export type DepartmentPermissionUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<DepartmentPermissionCreateWithoutUpdatedByInput, DepartmentPermissionUncheckedCreateWithoutUpdatedByInput> | DepartmentPermissionCreateWithoutUpdatedByInput[] | DepartmentPermissionUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: DepartmentPermissionCreateOrConnectWithoutUpdatedByInput | DepartmentPermissionCreateOrConnectWithoutUpdatedByInput[]
    upsert?: DepartmentPermissionUpsertWithWhereUniqueWithoutUpdatedByInput | DepartmentPermissionUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: DepartmentPermissionCreateManyUpdatedByInputEnvelope
    set?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
    disconnect?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
    delete?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
    connect?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
    update?: DepartmentPermissionUpdateWithWhereUniqueWithoutUpdatedByInput | DepartmentPermissionUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: DepartmentPermissionUpdateManyWithWhereWithoutUpdatedByInput | DepartmentPermissionUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: DepartmentPermissionScalarWhereInput | DepartmentPermissionScalarWhereInput[]
  }

  export type UserPermissionUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<UserPermissionCreateWithoutCreatedByInput, UserPermissionUncheckedCreateWithoutCreatedByInput> | UserPermissionCreateWithoutCreatedByInput[] | UserPermissionUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutCreatedByInput | UserPermissionCreateOrConnectWithoutCreatedByInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutCreatedByInput | UserPermissionUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: UserPermissionCreateManyCreatedByInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutCreatedByInput | UserPermissionUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutCreatedByInput | UserPermissionUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type UserPermissionUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<UserPermissionCreateWithoutUpdatedByInput, UserPermissionUncheckedCreateWithoutUpdatedByInput> | UserPermissionCreateWithoutUpdatedByInput[] | UserPermissionUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUpdatedByInput | UserPermissionCreateOrConnectWithoutUpdatedByInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutUpdatedByInput | UserPermissionUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: UserPermissionCreateManyUpdatedByInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutUpdatedByInput | UserPermissionUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutUpdatedByInput | UserPermissionUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type ProfileUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ProfileCreateWithoutCreatedByInput, ProfileUncheckedCreateWithoutCreatedByInput> | ProfileCreateWithoutCreatedByInput[] | ProfileUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutCreatedByInput | ProfileCreateOrConnectWithoutCreatedByInput[]
    upsert?: ProfileUpsertWithWhereUniqueWithoutCreatedByInput | ProfileUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ProfileCreateManyCreatedByInputEnvelope
    set?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    disconnect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    delete?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    update?: ProfileUpdateWithWhereUniqueWithoutCreatedByInput | ProfileUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ProfileUpdateManyWithWhereWithoutCreatedByInput | ProfileUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
  }

  export type ProfileUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<ProfileCreateWithoutUpdatedByInput, ProfileUncheckedCreateWithoutUpdatedByInput> | ProfileCreateWithoutUpdatedByInput[] | ProfileUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutUpdatedByInput | ProfileCreateOrConnectWithoutUpdatedByInput[]
    upsert?: ProfileUpsertWithWhereUniqueWithoutUpdatedByInput | ProfileUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: ProfileCreateManyUpdatedByInputEnvelope
    set?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    disconnect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    delete?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    update?: ProfileUpdateWithWhereUniqueWithoutUpdatedByInput | ProfileUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: ProfileUpdateManyWithWhereWithoutUpdatedByInput | ProfileUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
  }

  export type UserPermissionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput> | UserPermissionCreateWithoutUserInput[] | UserPermissionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUserInput | UserPermissionCreateOrConnectWithoutUserInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutUserInput | UserPermissionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserPermissionCreateManyUserInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutUserInput | UserPermissionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutUserInput | UserPermissionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type ProfileUncheckedUpdateOneWithoutUserNestedInput = {
    create?: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    connectOrCreate?: ProfileCreateOrConnectWithoutUserInput
    upsert?: ProfileUpsertWithoutUserInput
    disconnect?: ProfileWhereInput | boolean
    delete?: ProfileWhereInput | boolean
    connect?: ProfileWhereUniqueInput
    update?: XOR<XOR<ProfileUpdateToOneWithWhereWithoutUserInput, ProfileUpdateWithoutUserInput>, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type NoteUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<NoteCreateWithoutCreatedByInput, NoteUncheckedCreateWithoutCreatedByInput> | NoteCreateWithoutCreatedByInput[] | NoteUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutCreatedByInput | NoteCreateOrConnectWithoutCreatedByInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutCreatedByInput | NoteUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: NoteCreateManyCreatedByInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutCreatedByInput | NoteUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutCreatedByInput | NoteUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type NoteUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<NoteCreateWithoutUpdatedByInput, NoteUncheckedCreateWithoutUpdatedByInput> | NoteCreateWithoutUpdatedByInput[] | NoteUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: NoteCreateOrConnectWithoutUpdatedByInput | NoteCreateOrConnectWithoutUpdatedByInput[]
    upsert?: NoteUpsertWithWhereUniqueWithoutUpdatedByInput | NoteUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: NoteCreateManyUpdatedByInputEnvelope
    set?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    disconnect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    delete?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    connect?: NoteWhereUniqueInput | NoteWhereUniqueInput[]
    update?: NoteUpdateWithWhereUniqueWithoutUpdatedByInput | NoteUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: NoteUpdateManyWithWhereWithoutUpdatedByInput | NoteUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: NoteScalarWhereInput | NoteScalarWhereInput[]
  }

  export type StageUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<StageCreateWithoutCreatedByInput, StageUncheckedCreateWithoutCreatedByInput> | StageCreateWithoutCreatedByInput[] | StageUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: StageCreateOrConnectWithoutCreatedByInput | StageCreateOrConnectWithoutCreatedByInput[]
    upsert?: StageUpsertWithWhereUniqueWithoutCreatedByInput | StageUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: StageCreateManyCreatedByInputEnvelope
    set?: StageWhereUniqueInput | StageWhereUniqueInput[]
    disconnect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    delete?: StageWhereUniqueInput | StageWhereUniqueInput[]
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    update?: StageUpdateWithWhereUniqueWithoutCreatedByInput | StageUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: StageUpdateManyWithWhereWithoutCreatedByInput | StageUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: StageScalarWhereInput | StageScalarWhereInput[]
  }

  export type StageUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<StageCreateWithoutUpdatedByInput, StageUncheckedCreateWithoutUpdatedByInput> | StageCreateWithoutUpdatedByInput[] | StageUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: StageCreateOrConnectWithoutUpdatedByInput | StageCreateOrConnectWithoutUpdatedByInput[]
    upsert?: StageUpsertWithWhereUniqueWithoutUpdatedByInput | StageUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: StageCreateManyUpdatedByInputEnvelope
    set?: StageWhereUniqueInput | StageWhereUniqueInput[]
    disconnect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    delete?: StageWhereUniqueInput | StageWhereUniqueInput[]
    connect?: StageWhereUniqueInput | StageWhereUniqueInput[]
    update?: StageUpdateWithWhereUniqueWithoutUpdatedByInput | StageUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: StageUpdateManyWithWhereWithoutUpdatedByInput | StageUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: StageScalarWhereInput | StageScalarWhereInput[]
  }

  export type ReportUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ReportCreateWithoutCreatedByInput, ReportUncheckedCreateWithoutCreatedByInput> | ReportCreateWithoutCreatedByInput[] | ReportUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutCreatedByInput | ReportCreateOrConnectWithoutCreatedByInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutCreatedByInput | ReportUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ReportCreateManyCreatedByInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutCreatedByInput | ReportUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutCreatedByInput | ReportUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type ReportUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<ReportCreateWithoutUpdatedByInput, ReportUncheckedCreateWithoutUpdatedByInput> | ReportCreateWithoutUpdatedByInput[] | ReportUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutUpdatedByInput | ReportCreateOrConnectWithoutUpdatedByInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutUpdatedByInput | ReportUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: ReportCreateManyUpdatedByInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutUpdatedByInput | ReportUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutUpdatedByInput | ReportUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type ReportCategoryUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ReportCategoryCreateWithoutCreatedByInput, ReportCategoryUncheckedCreateWithoutCreatedByInput> | ReportCategoryCreateWithoutCreatedByInput[] | ReportCategoryUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ReportCategoryCreateOrConnectWithoutCreatedByInput | ReportCategoryCreateOrConnectWithoutCreatedByInput[]
    upsert?: ReportCategoryUpsertWithWhereUniqueWithoutCreatedByInput | ReportCategoryUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ReportCategoryCreateManyCreatedByInputEnvelope
    set?: ReportCategoryWhereUniqueInput | ReportCategoryWhereUniqueInput[]
    disconnect?: ReportCategoryWhereUniqueInput | ReportCategoryWhereUniqueInput[]
    delete?: ReportCategoryWhereUniqueInput | ReportCategoryWhereUniqueInput[]
    connect?: ReportCategoryWhereUniqueInput | ReportCategoryWhereUniqueInput[]
    update?: ReportCategoryUpdateWithWhereUniqueWithoutCreatedByInput | ReportCategoryUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ReportCategoryUpdateManyWithWhereWithoutCreatedByInput | ReportCategoryUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ReportCategoryScalarWhereInput | ReportCategoryScalarWhereInput[]
  }

  export type ReportCategoryUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<ReportCategoryCreateWithoutUpdatedByInput, ReportCategoryUncheckedCreateWithoutUpdatedByInput> | ReportCategoryCreateWithoutUpdatedByInput[] | ReportCategoryUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ReportCategoryCreateOrConnectWithoutUpdatedByInput | ReportCategoryCreateOrConnectWithoutUpdatedByInput[]
    upsert?: ReportCategoryUpsertWithWhereUniqueWithoutUpdatedByInput | ReportCategoryUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: ReportCategoryCreateManyUpdatedByInputEnvelope
    set?: ReportCategoryWhereUniqueInput | ReportCategoryWhereUniqueInput[]
    disconnect?: ReportCategoryWhereUniqueInput | ReportCategoryWhereUniqueInput[]
    delete?: ReportCategoryWhereUniqueInput | ReportCategoryWhereUniqueInput[]
    connect?: ReportCategoryWhereUniqueInput | ReportCategoryWhereUniqueInput[]
    update?: ReportCategoryUpdateWithWhereUniqueWithoutUpdatedByInput | ReportCategoryUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: ReportCategoryUpdateManyWithWhereWithoutUpdatedByInput | ReportCategoryUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: ReportCategoryScalarWhereInput | ReportCategoryScalarWhereInput[]
  }

  export type DepartmentUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<DepartmentCreateWithoutCreatedByInput, DepartmentUncheckedCreateWithoutCreatedByInput> | DepartmentCreateWithoutCreatedByInput[] | DepartmentUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutCreatedByInput | DepartmentCreateOrConnectWithoutCreatedByInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutCreatedByInput | DepartmentUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: DepartmentCreateManyCreatedByInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutCreatedByInput | DepartmentUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutCreatedByInput | DepartmentUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type DepartmentUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<DepartmentCreateWithoutUpdatedByInput, DepartmentUncheckedCreateWithoutUpdatedByInput> | DepartmentCreateWithoutUpdatedByInput[] | DepartmentUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: DepartmentCreateOrConnectWithoutUpdatedByInput | DepartmentCreateOrConnectWithoutUpdatedByInput[]
    upsert?: DepartmentUpsertWithWhereUniqueWithoutUpdatedByInput | DepartmentUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: DepartmentCreateManyUpdatedByInputEnvelope
    set?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    disconnect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    delete?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    connect?: DepartmentWhereUniqueInput | DepartmentWhereUniqueInput[]
    update?: DepartmentUpdateWithWhereUniqueWithoutUpdatedByInput | DepartmentUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: DepartmentUpdateManyWithWhereWithoutUpdatedByInput | DepartmentUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
  }

  export type PermissionUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<PermissionCreateWithoutCreatedByInput, PermissionUncheckedCreateWithoutCreatedByInput> | PermissionCreateWithoutCreatedByInput[] | PermissionUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: PermissionCreateOrConnectWithoutCreatedByInput | PermissionCreateOrConnectWithoutCreatedByInput[]
    upsert?: PermissionUpsertWithWhereUniqueWithoutCreatedByInput | PermissionUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: PermissionCreateManyCreatedByInputEnvelope
    set?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    disconnect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    delete?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    connect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    update?: PermissionUpdateWithWhereUniqueWithoutCreatedByInput | PermissionUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: PermissionUpdateManyWithWhereWithoutCreatedByInput | PermissionUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: PermissionScalarWhereInput | PermissionScalarWhereInput[]
  }

  export type PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<PermissionCreateWithoutUpdatedByInput, PermissionUncheckedCreateWithoutUpdatedByInput> | PermissionCreateWithoutUpdatedByInput[] | PermissionUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: PermissionCreateOrConnectWithoutUpdatedByInput | PermissionCreateOrConnectWithoutUpdatedByInput[]
    upsert?: PermissionUpsertWithWhereUniqueWithoutUpdatedByInput | PermissionUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: PermissionCreateManyUpdatedByInputEnvelope
    set?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    disconnect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    delete?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    connect?: PermissionWhereUniqueInput | PermissionWhereUniqueInput[]
    update?: PermissionUpdateWithWhereUniqueWithoutUpdatedByInput | PermissionUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: PermissionUpdateManyWithWhereWithoutUpdatedByInput | PermissionUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: PermissionScalarWhereInput | PermissionScalarWhereInput[]
  }

  export type DepartmentPermissionUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<DepartmentPermissionCreateWithoutCreatedByInput, DepartmentPermissionUncheckedCreateWithoutCreatedByInput> | DepartmentPermissionCreateWithoutCreatedByInput[] | DepartmentPermissionUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: DepartmentPermissionCreateOrConnectWithoutCreatedByInput | DepartmentPermissionCreateOrConnectWithoutCreatedByInput[]
    upsert?: DepartmentPermissionUpsertWithWhereUniqueWithoutCreatedByInput | DepartmentPermissionUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: DepartmentPermissionCreateManyCreatedByInputEnvelope
    set?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
    disconnect?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
    delete?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
    connect?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
    update?: DepartmentPermissionUpdateWithWhereUniqueWithoutCreatedByInput | DepartmentPermissionUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: DepartmentPermissionUpdateManyWithWhereWithoutCreatedByInput | DepartmentPermissionUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: DepartmentPermissionScalarWhereInput | DepartmentPermissionScalarWhereInput[]
  }

  export type DepartmentPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<DepartmentPermissionCreateWithoutUpdatedByInput, DepartmentPermissionUncheckedCreateWithoutUpdatedByInput> | DepartmentPermissionCreateWithoutUpdatedByInput[] | DepartmentPermissionUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: DepartmentPermissionCreateOrConnectWithoutUpdatedByInput | DepartmentPermissionCreateOrConnectWithoutUpdatedByInput[]
    upsert?: DepartmentPermissionUpsertWithWhereUniqueWithoutUpdatedByInput | DepartmentPermissionUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: DepartmentPermissionCreateManyUpdatedByInputEnvelope
    set?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
    disconnect?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
    delete?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
    connect?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
    update?: DepartmentPermissionUpdateWithWhereUniqueWithoutUpdatedByInput | DepartmentPermissionUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: DepartmentPermissionUpdateManyWithWhereWithoutUpdatedByInput | DepartmentPermissionUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: DepartmentPermissionScalarWhereInput | DepartmentPermissionScalarWhereInput[]
  }

  export type UserPermissionUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<UserPermissionCreateWithoutCreatedByInput, UserPermissionUncheckedCreateWithoutCreatedByInput> | UserPermissionCreateWithoutCreatedByInput[] | UserPermissionUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutCreatedByInput | UserPermissionCreateOrConnectWithoutCreatedByInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutCreatedByInput | UserPermissionUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: UserPermissionCreateManyCreatedByInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutCreatedByInput | UserPermissionUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutCreatedByInput | UserPermissionUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type UserPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<UserPermissionCreateWithoutUpdatedByInput, UserPermissionUncheckedCreateWithoutUpdatedByInput> | UserPermissionCreateWithoutUpdatedByInput[] | UserPermissionUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutUpdatedByInput | UserPermissionCreateOrConnectWithoutUpdatedByInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutUpdatedByInput | UserPermissionUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: UserPermissionCreateManyUpdatedByInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutUpdatedByInput | UserPermissionUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutUpdatedByInput | UserPermissionUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type ProfileUncheckedUpdateManyWithoutCreatedByNestedInput = {
    create?: XOR<ProfileCreateWithoutCreatedByInput, ProfileUncheckedCreateWithoutCreatedByInput> | ProfileCreateWithoutCreatedByInput[] | ProfileUncheckedCreateWithoutCreatedByInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutCreatedByInput | ProfileCreateOrConnectWithoutCreatedByInput[]
    upsert?: ProfileUpsertWithWhereUniqueWithoutCreatedByInput | ProfileUpsertWithWhereUniqueWithoutCreatedByInput[]
    createMany?: ProfileCreateManyCreatedByInputEnvelope
    set?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    disconnect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    delete?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    update?: ProfileUpdateWithWhereUniqueWithoutCreatedByInput | ProfileUpdateWithWhereUniqueWithoutCreatedByInput[]
    updateMany?: ProfileUpdateManyWithWhereWithoutCreatedByInput | ProfileUpdateManyWithWhereWithoutCreatedByInput[]
    deleteMany?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
  }

  export type ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput = {
    create?: XOR<ProfileCreateWithoutUpdatedByInput, ProfileUncheckedCreateWithoutUpdatedByInput> | ProfileCreateWithoutUpdatedByInput[] | ProfileUncheckedCreateWithoutUpdatedByInput[]
    connectOrCreate?: ProfileCreateOrConnectWithoutUpdatedByInput | ProfileCreateOrConnectWithoutUpdatedByInput[]
    upsert?: ProfileUpsertWithWhereUniqueWithoutUpdatedByInput | ProfileUpsertWithWhereUniqueWithoutUpdatedByInput[]
    createMany?: ProfileCreateManyUpdatedByInputEnvelope
    set?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    disconnect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    delete?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    connect?: ProfileWhereUniqueInput | ProfileWhereUniqueInput[]
    update?: ProfileUpdateWithWhereUniqueWithoutUpdatedByInput | ProfileUpdateWithWhereUniqueWithoutUpdatedByInput[]
    updateMany?: ProfileUpdateManyWithWhereWithoutUpdatedByInput | ProfileUpdateManyWithWhereWithoutUpdatedByInput[]
    deleteMany?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput> | UserCreateWithoutOrganizationInput[] | UserUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput | UserCreateOrConnectWithoutOrganizationInput[]
    createMany?: UserCreateManyOrganizationInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ReportCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<ReportCreateWithoutOrganizationInput, ReportUncheckedCreateWithoutOrganizationInput> | ReportCreateWithoutOrganizationInput[] | ReportUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutOrganizationInput | ReportCreateOrConnectWithoutOrganizationInput[]
    createMany?: ReportCreateManyOrganizationInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput> | UserCreateWithoutOrganizationInput[] | UserUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput | UserCreateOrConnectWithoutOrganizationInput[]
    createMany?: UserCreateManyOrganizationInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type ReportUncheckedCreateNestedManyWithoutOrganizationInput = {
    create?: XOR<ReportCreateWithoutOrganizationInput, ReportUncheckedCreateWithoutOrganizationInput> | ReportCreateWithoutOrganizationInput[] | ReportUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutOrganizationInput | ReportCreateOrConnectWithoutOrganizationInput[]
    createMany?: ReportCreateManyOrganizationInputEnvelope
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput> | UserCreateWithoutOrganizationInput[] | UserUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput | UserCreateOrConnectWithoutOrganizationInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutOrganizationInput | UserUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: UserCreateManyOrganizationInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutOrganizationInput | UserUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: UserUpdateManyWithWhereWithoutOrganizationInput | UserUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ReportUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<ReportCreateWithoutOrganizationInput, ReportUncheckedCreateWithoutOrganizationInput> | ReportCreateWithoutOrganizationInput[] | ReportUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutOrganizationInput | ReportCreateOrConnectWithoutOrganizationInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutOrganizationInput | ReportUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: ReportCreateManyOrganizationInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutOrganizationInput | ReportUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutOrganizationInput | ReportUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput> | UserCreateWithoutOrganizationInput[] | UserUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: UserCreateOrConnectWithoutOrganizationInput | UserCreateOrConnectWithoutOrganizationInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutOrganizationInput | UserUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: UserCreateManyOrganizationInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutOrganizationInput | UserUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: UserUpdateManyWithWhereWithoutOrganizationInput | UserUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type ReportUncheckedUpdateManyWithoutOrganizationNestedInput = {
    create?: XOR<ReportCreateWithoutOrganizationInput, ReportUncheckedCreateWithoutOrganizationInput> | ReportCreateWithoutOrganizationInput[] | ReportUncheckedCreateWithoutOrganizationInput[]
    connectOrCreate?: ReportCreateOrConnectWithoutOrganizationInput | ReportCreateOrConnectWithoutOrganizationInput[]
    upsert?: ReportUpsertWithWhereUniqueWithoutOrganizationInput | ReportUpsertWithWhereUniqueWithoutOrganizationInput[]
    createMany?: ReportCreateManyOrganizationInputEnvelope
    set?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    disconnect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    delete?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    connect?: ReportWhereUniqueInput | ReportWhereUniqueInput[]
    update?: ReportUpdateWithWhereUniqueWithoutOrganizationInput | ReportUpdateWithWhereUniqueWithoutOrganizationInput[]
    updateMany?: ReportUpdateManyWithWhereWithoutOrganizationInput | ReportUpdateManyWithWhereWithoutOrganizationInput[]
    deleteMany?: ReportScalarWhereInput | ReportScalarWhereInput[]
  }

  export type UserCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutRoleInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRoleInput | UserUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRoleInput | UserUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRoleInput | UserUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutRoleNestedInput = {
    create?: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput> | UserCreateWithoutRoleInput[] | UserUncheckedCreateWithoutRoleInput[]
    connectOrCreate?: UserCreateOrConnectWithoutRoleInput | UserCreateOrConnectWithoutRoleInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutRoleInput | UserUpsertWithWhereUniqueWithoutRoleInput[]
    createMany?: UserCreateManyRoleInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutRoleInput | UserUpdateWithWhereUniqueWithoutRoleInput[]
    updateMany?: UserUpdateManyWithWhereWithoutRoleInput | UserUpdateManyWithWhereWithoutRoleInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCreatorDepartmentInput = {
    create?: XOR<UserCreateWithoutCreatorDepartmentInput, UserUncheckedCreateWithoutCreatorDepartmentInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatorDepartmentInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdaterDepartmentInput = {
    create?: XOR<UserCreateWithoutUpdaterDepartmentInput, UserUncheckedCreateWithoutUpdaterDepartmentInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdaterDepartmentInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput> | UserCreateWithoutDepartmentInput[] | UserUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentInput | UserCreateOrConnectWithoutDepartmentInput[]
    createMany?: UserCreateManyDepartmentInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type DepartmentPermissionCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<DepartmentPermissionCreateWithoutDepartmentInput, DepartmentPermissionUncheckedCreateWithoutDepartmentInput> | DepartmentPermissionCreateWithoutDepartmentInput[] | DepartmentPermissionUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: DepartmentPermissionCreateOrConnectWithoutDepartmentInput | DepartmentPermissionCreateOrConnectWithoutDepartmentInput[]
    createMany?: DepartmentPermissionCreateManyDepartmentInputEnvelope
    connect?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput> | UserCreateWithoutDepartmentInput[] | UserUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentInput | UserCreateOrConnectWithoutDepartmentInput[]
    createMany?: UserCreateManyDepartmentInputEnvelope
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type DepartmentPermissionUncheckedCreateNestedManyWithoutDepartmentInput = {
    create?: XOR<DepartmentPermissionCreateWithoutDepartmentInput, DepartmentPermissionUncheckedCreateWithoutDepartmentInput> | DepartmentPermissionCreateWithoutDepartmentInput[] | DepartmentPermissionUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: DepartmentPermissionCreateOrConnectWithoutDepartmentInput | DepartmentPermissionCreateOrConnectWithoutDepartmentInput[]
    createMany?: DepartmentPermissionCreateManyDepartmentInputEnvelope
    connect?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutCreatorDepartmentNestedInput = {
    create?: XOR<UserCreateWithoutCreatorDepartmentInput, UserUncheckedCreateWithoutCreatorDepartmentInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatorDepartmentInput
    upsert?: UserUpsertWithoutCreatorDepartmentInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatorDepartmentInput, UserUpdateWithoutCreatorDepartmentInput>, UserUncheckedUpdateWithoutCreatorDepartmentInput>
  }

  export type UserUpdateOneWithoutUpdaterDepartmentNestedInput = {
    create?: XOR<UserCreateWithoutUpdaterDepartmentInput, UserUncheckedCreateWithoutUpdaterDepartmentInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdaterDepartmentInput
    upsert?: UserUpsertWithoutUpdaterDepartmentInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdaterDepartmentInput, UserUpdateWithoutUpdaterDepartmentInput>, UserUncheckedUpdateWithoutUpdaterDepartmentInput>
  }

  export type UserUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput> | UserCreateWithoutDepartmentInput[] | UserUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentInput | UserCreateOrConnectWithoutDepartmentInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutDepartmentInput | UserUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: UserCreateManyDepartmentInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutDepartmentInput | UserUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: UserUpdateManyWithWhereWithoutDepartmentInput | UserUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type DepartmentPermissionUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<DepartmentPermissionCreateWithoutDepartmentInput, DepartmentPermissionUncheckedCreateWithoutDepartmentInput> | DepartmentPermissionCreateWithoutDepartmentInput[] | DepartmentPermissionUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: DepartmentPermissionCreateOrConnectWithoutDepartmentInput | DepartmentPermissionCreateOrConnectWithoutDepartmentInput[]
    upsert?: DepartmentPermissionUpsertWithWhereUniqueWithoutDepartmentInput | DepartmentPermissionUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: DepartmentPermissionCreateManyDepartmentInputEnvelope
    set?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
    disconnect?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
    delete?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
    connect?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
    update?: DepartmentPermissionUpdateWithWhereUniqueWithoutDepartmentInput | DepartmentPermissionUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: DepartmentPermissionUpdateManyWithWhereWithoutDepartmentInput | DepartmentPermissionUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: DepartmentPermissionScalarWhereInput | DepartmentPermissionScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput> | UserCreateWithoutDepartmentInput[] | UserUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: UserCreateOrConnectWithoutDepartmentInput | UserCreateOrConnectWithoutDepartmentInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutDepartmentInput | UserUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: UserCreateManyDepartmentInputEnvelope
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutDepartmentInput | UserUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: UserUpdateManyWithWhereWithoutDepartmentInput | UserUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type DepartmentPermissionUncheckedUpdateManyWithoutDepartmentNestedInput = {
    create?: XOR<DepartmentPermissionCreateWithoutDepartmentInput, DepartmentPermissionUncheckedCreateWithoutDepartmentInput> | DepartmentPermissionCreateWithoutDepartmentInput[] | DepartmentPermissionUncheckedCreateWithoutDepartmentInput[]
    connectOrCreate?: DepartmentPermissionCreateOrConnectWithoutDepartmentInput | DepartmentPermissionCreateOrConnectWithoutDepartmentInput[]
    upsert?: DepartmentPermissionUpsertWithWhereUniqueWithoutDepartmentInput | DepartmentPermissionUpsertWithWhereUniqueWithoutDepartmentInput[]
    createMany?: DepartmentPermissionCreateManyDepartmentInputEnvelope
    set?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
    disconnect?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
    delete?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
    connect?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
    update?: DepartmentPermissionUpdateWithWhereUniqueWithoutDepartmentInput | DepartmentPermissionUpdateWithWhereUniqueWithoutDepartmentInput[]
    updateMany?: DepartmentPermissionUpdateManyWithWhereWithoutDepartmentInput | DepartmentPermissionUpdateManyWithWhereWithoutDepartmentInput[]
    deleteMany?: DepartmentPermissionScalarWhereInput | DepartmentPermissionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCreatorPermissionInput = {
    create?: XOR<UserCreateWithoutCreatorPermissionInput, UserUncheckedCreateWithoutCreatorPermissionInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatorPermissionInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdaterPermissionInput = {
    create?: XOR<UserCreateWithoutUpdaterPermissionInput, UserUncheckedCreateWithoutUpdaterPermissionInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdaterPermissionInput
    connect?: UserWhereUniqueInput
  }

  export type DepartmentPermissionCreateNestedManyWithoutPermissionInput = {
    create?: XOR<DepartmentPermissionCreateWithoutPermissionInput, DepartmentPermissionUncheckedCreateWithoutPermissionInput> | DepartmentPermissionCreateWithoutPermissionInput[] | DepartmentPermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: DepartmentPermissionCreateOrConnectWithoutPermissionInput | DepartmentPermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: DepartmentPermissionCreateManyPermissionInputEnvelope
    connect?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
  }

  export type UserPermissionCreateNestedManyWithoutPermissionInput = {
    create?: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput> | UserPermissionCreateWithoutPermissionInput[] | UserPermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutPermissionInput | UserPermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: UserPermissionCreateManyPermissionInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type DepartmentPermissionUncheckedCreateNestedManyWithoutPermissionInput = {
    create?: XOR<DepartmentPermissionCreateWithoutPermissionInput, DepartmentPermissionUncheckedCreateWithoutPermissionInput> | DepartmentPermissionCreateWithoutPermissionInput[] | DepartmentPermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: DepartmentPermissionCreateOrConnectWithoutPermissionInput | DepartmentPermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: DepartmentPermissionCreateManyPermissionInputEnvelope
    connect?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
  }

  export type UserPermissionUncheckedCreateNestedManyWithoutPermissionInput = {
    create?: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput> | UserPermissionCreateWithoutPermissionInput[] | UserPermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutPermissionInput | UserPermissionCreateOrConnectWithoutPermissionInput[]
    createMany?: UserPermissionCreateManyPermissionInputEnvelope
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
  }

  export type UserUpdateOneWithoutCreatorPermissionNestedInput = {
    create?: XOR<UserCreateWithoutCreatorPermissionInput, UserUncheckedCreateWithoutCreatorPermissionInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatorPermissionInput
    upsert?: UserUpsertWithoutCreatorPermissionInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatorPermissionInput, UserUpdateWithoutCreatorPermissionInput>, UserUncheckedUpdateWithoutCreatorPermissionInput>
  }

  export type UserUpdateOneWithoutUpdaterPermissionNestedInput = {
    create?: XOR<UserCreateWithoutUpdaterPermissionInput, UserUncheckedCreateWithoutUpdaterPermissionInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdaterPermissionInput
    upsert?: UserUpsertWithoutUpdaterPermissionInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdaterPermissionInput, UserUpdateWithoutUpdaterPermissionInput>, UserUncheckedUpdateWithoutUpdaterPermissionInput>
  }

  export type DepartmentPermissionUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<DepartmentPermissionCreateWithoutPermissionInput, DepartmentPermissionUncheckedCreateWithoutPermissionInput> | DepartmentPermissionCreateWithoutPermissionInput[] | DepartmentPermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: DepartmentPermissionCreateOrConnectWithoutPermissionInput | DepartmentPermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: DepartmentPermissionUpsertWithWhereUniqueWithoutPermissionInput | DepartmentPermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: DepartmentPermissionCreateManyPermissionInputEnvelope
    set?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
    disconnect?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
    delete?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
    connect?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
    update?: DepartmentPermissionUpdateWithWhereUniqueWithoutPermissionInput | DepartmentPermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: DepartmentPermissionUpdateManyWithWhereWithoutPermissionInput | DepartmentPermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: DepartmentPermissionScalarWhereInput | DepartmentPermissionScalarWhereInput[]
  }

  export type UserPermissionUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput> | UserPermissionCreateWithoutPermissionInput[] | UserPermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutPermissionInput | UserPermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutPermissionInput | UserPermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: UserPermissionCreateManyPermissionInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutPermissionInput | UserPermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutPermissionInput | UserPermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type DepartmentPermissionUncheckedUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<DepartmentPermissionCreateWithoutPermissionInput, DepartmentPermissionUncheckedCreateWithoutPermissionInput> | DepartmentPermissionCreateWithoutPermissionInput[] | DepartmentPermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: DepartmentPermissionCreateOrConnectWithoutPermissionInput | DepartmentPermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: DepartmentPermissionUpsertWithWhereUniqueWithoutPermissionInput | DepartmentPermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: DepartmentPermissionCreateManyPermissionInputEnvelope
    set?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
    disconnect?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
    delete?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
    connect?: DepartmentPermissionWhereUniqueInput | DepartmentPermissionWhereUniqueInput[]
    update?: DepartmentPermissionUpdateWithWhereUniqueWithoutPermissionInput | DepartmentPermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: DepartmentPermissionUpdateManyWithWhereWithoutPermissionInput | DepartmentPermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: DepartmentPermissionScalarWhereInput | DepartmentPermissionScalarWhereInput[]
  }

  export type UserPermissionUncheckedUpdateManyWithoutPermissionNestedInput = {
    create?: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput> | UserPermissionCreateWithoutPermissionInput[] | UserPermissionUncheckedCreateWithoutPermissionInput[]
    connectOrCreate?: UserPermissionCreateOrConnectWithoutPermissionInput | UserPermissionCreateOrConnectWithoutPermissionInput[]
    upsert?: UserPermissionUpsertWithWhereUniqueWithoutPermissionInput | UserPermissionUpsertWithWhereUniqueWithoutPermissionInput[]
    createMany?: UserPermissionCreateManyPermissionInputEnvelope
    set?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    disconnect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    delete?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    connect?: UserPermissionWhereUniqueInput | UserPermissionWhereUniqueInput[]
    update?: UserPermissionUpdateWithWhereUniqueWithoutPermissionInput | UserPermissionUpdateWithWhereUniqueWithoutPermissionInput[]
    updateMany?: UserPermissionUpdateManyWithWhereWithoutPermissionInput | UserPermissionUpdateManyWithWhereWithoutPermissionInput[]
    deleteMany?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCreatorDepartmentPermissionInput = {
    create?: XOR<UserCreateWithoutCreatorDepartmentPermissionInput, UserUncheckedCreateWithoutCreatorDepartmentPermissionInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatorDepartmentPermissionInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdaterDepartmentPermissionInput = {
    create?: XOR<UserCreateWithoutUpdaterDepartmentPermissionInput, UserUncheckedCreateWithoutUpdaterDepartmentPermissionInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdaterDepartmentPermissionInput
    connect?: UserWhereUniqueInput
  }

  export type DepartmentCreateNestedOneWithoutPermissionsInput = {
    create?: XOR<DepartmentCreateWithoutPermissionsInput, DepartmentUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutPermissionsInput
    connect?: DepartmentWhereUniqueInput
  }

  export type PermissionCreateNestedOneWithoutDeptInput = {
    create?: XOR<PermissionCreateWithoutDeptInput, PermissionUncheckedCreateWithoutDeptInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutDeptInput
    connect?: PermissionWhereUniqueInput
  }

  export type UserUpdateOneWithoutCreatorDepartmentPermissionNestedInput = {
    create?: XOR<UserCreateWithoutCreatorDepartmentPermissionInput, UserUncheckedCreateWithoutCreatorDepartmentPermissionInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatorDepartmentPermissionInput
    upsert?: UserUpsertWithoutCreatorDepartmentPermissionInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatorDepartmentPermissionInput, UserUpdateWithoutCreatorDepartmentPermissionInput>, UserUncheckedUpdateWithoutCreatorDepartmentPermissionInput>
  }

  export type UserUpdateOneWithoutUpdaterDepartmentPermissionNestedInput = {
    create?: XOR<UserCreateWithoutUpdaterDepartmentPermissionInput, UserUncheckedCreateWithoutUpdaterDepartmentPermissionInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdaterDepartmentPermissionInput
    upsert?: UserUpsertWithoutUpdaterDepartmentPermissionInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdaterDepartmentPermissionInput, UserUpdateWithoutUpdaterDepartmentPermissionInput>, UserUncheckedUpdateWithoutUpdaterDepartmentPermissionInput>
  }

  export type DepartmentUpdateOneRequiredWithoutPermissionsNestedInput = {
    create?: XOR<DepartmentCreateWithoutPermissionsInput, DepartmentUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: DepartmentCreateOrConnectWithoutPermissionsInput
    upsert?: DepartmentUpsertWithoutPermissionsInput
    connect?: DepartmentWhereUniqueInput
    update?: XOR<XOR<DepartmentUpdateToOneWithWhereWithoutPermissionsInput, DepartmentUpdateWithoutPermissionsInput>, DepartmentUncheckedUpdateWithoutPermissionsInput>
  }

  export type PermissionUpdateOneRequiredWithoutDeptNestedInput = {
    create?: XOR<PermissionCreateWithoutDeptInput, PermissionUncheckedCreateWithoutDeptInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutDeptInput
    upsert?: PermissionUpsertWithoutDeptInput
    connect?: PermissionWhereUniqueInput
    update?: XOR<XOR<PermissionUpdateToOneWithWhereWithoutDeptInput, PermissionUpdateWithoutDeptInput>, PermissionUncheckedUpdateWithoutDeptInput>
  }

  export type UserCreateNestedOneWithoutPermissionsInput = {
    create?: XOR<UserCreateWithoutPermissionsInput, UserUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPermissionsInput
    connect?: UserWhereUniqueInput
  }

  export type PermissionCreateNestedOneWithoutUsersInput = {
    create?: XOR<PermissionCreateWithoutUsersInput, PermissionUncheckedCreateWithoutUsersInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutUsersInput
    connect?: PermissionWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCreatorUserPermissionInput = {
    create?: XOR<UserCreateWithoutCreatorUserPermissionInput, UserUncheckedCreateWithoutCreatorUserPermissionInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatorUserPermissionInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdaterUserPermissionInput = {
    create?: XOR<UserCreateWithoutUpdaterUserPermissionInput, UserUncheckedCreateWithoutUpdaterUserPermissionInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdaterUserPermissionInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutPermissionsNestedInput = {
    create?: XOR<UserCreateWithoutPermissionsInput, UserUncheckedCreateWithoutPermissionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPermissionsInput
    upsert?: UserUpsertWithoutPermissionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPermissionsInput, UserUpdateWithoutPermissionsInput>, UserUncheckedUpdateWithoutPermissionsInput>
  }

  export type PermissionUpdateOneRequiredWithoutUsersNestedInput = {
    create?: XOR<PermissionCreateWithoutUsersInput, PermissionUncheckedCreateWithoutUsersInput>
    connectOrCreate?: PermissionCreateOrConnectWithoutUsersInput
    upsert?: PermissionUpsertWithoutUsersInput
    connect?: PermissionWhereUniqueInput
    update?: XOR<XOR<PermissionUpdateToOneWithWhereWithoutUsersInput, PermissionUpdateWithoutUsersInput>, PermissionUncheckedUpdateWithoutUsersInput>
  }

  export type UserUpdateOneWithoutCreatorUserPermissionNestedInput = {
    create?: XOR<UserCreateWithoutCreatorUserPermissionInput, UserUncheckedCreateWithoutCreatorUserPermissionInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatorUserPermissionInput
    upsert?: UserUpsertWithoutCreatorUserPermissionInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatorUserPermissionInput, UserUpdateWithoutCreatorUserPermissionInput>, UserUncheckedUpdateWithoutCreatorUserPermissionInput>
  }

  export type UserUpdateOneWithoutUpdaterUserPermissionNestedInput = {
    create?: XOR<UserCreateWithoutUpdaterUserPermissionInput, UserUncheckedCreateWithoutUpdaterUserPermissionInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdaterUserPermissionInput
    upsert?: UserUpsertWithoutUpdaterUserPermissionInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdaterUserPermissionInput, UserUpdateWithoutUpdaterUserPermissionInput>, UserUncheckedUpdateWithoutUpdaterUserPermissionInput>
  }

  export type UserCreateNestedOneWithoutCreatorProfileInput = {
    create?: XOR<UserCreateWithoutCreatorProfileInput, UserUncheckedCreateWithoutCreatorProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatorProfileInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutUpdaterProfileInput = {
    create?: XOR<UserCreateWithoutUpdaterProfileInput, UserUncheckedCreateWithoutUpdaterProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdaterProfileInput
    connect?: UserWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutProfileInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneWithoutCreatorProfileNestedInput = {
    create?: XOR<UserCreateWithoutCreatorProfileInput, UserUncheckedCreateWithoutCreatorProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutCreatorProfileInput
    upsert?: UserUpsertWithoutCreatorProfileInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCreatorProfileInput, UserUpdateWithoutCreatorProfileInput>, UserUncheckedUpdateWithoutCreatorProfileInput>
  }

  export type UserUpdateOneWithoutUpdaterProfileNestedInput = {
    create?: XOR<UserCreateWithoutUpdaterProfileInput, UserUncheckedCreateWithoutUpdaterProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutUpdaterProfileInput
    upsert?: UserUpsertWithoutUpdaterProfileInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutUpdaterProfileInput, UserUpdateWithoutUpdaterProfileInput>, UserUncheckedUpdateWithoutUpdaterProfileInput>
  }

  export type UserUpdateOneRequiredWithoutProfileNestedInput = {
    create?: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    connectOrCreate?: UserCreateOrConnectWithoutProfileInput
    upsert?: UserUpsertWithoutProfileInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProfileInput, UserUpdateWithoutProfileInput>, UserUncheckedUpdateWithoutProfileInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel> | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedEnumUserStatusFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusFilter<$PrismaModel> | $Enums.UserStatus
  }

  export type NestedEnumUserStatusWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.UserStatus | EnumUserStatusFieldRefInput<$PrismaModel>
    in?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    notIn?: $Enums.UserStatus[] | ListEnumUserStatusFieldRefInput<$PrismaModel>
    not?: NestedEnumUserStatusWithAggregatesFilter<$PrismaModel> | $Enums.UserStatus
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumUserStatusFilter<$PrismaModel>
    _max?: NestedEnumUserStatusFilter<$PrismaModel>
  }
  export type NestedJsonFilter<$PrismaModel = never> =
    | PatchUndefined<
        Either<Required<NestedJsonFilterBase<$PrismaModel>>, Exclude<keyof Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>,
        Required<NestedJsonFilterBase<$PrismaModel>>
      >
    | OptionalFlat<Omit<Required<NestedJsonFilterBase<$PrismaModel>>, 'path'>>

  export type NestedJsonFilterBase<$PrismaModel = never> = {
    equals?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
    path?: string[]
    mode?: QueryMode | EnumQueryModeFieldRefInput<$PrismaModel>
    string_contains?: string | StringFieldRefInput<$PrismaModel>
    string_starts_with?: string | StringFieldRefInput<$PrismaModel>
    string_ends_with?: string | StringFieldRefInput<$PrismaModel>
    array_starts_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_ends_with?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    array_contains?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | null
    lt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    lte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gt?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    gte?: InputJsonValue | JsonFieldRefInput<$PrismaModel>
    not?: InputJsonValue | JsonFieldRefInput<$PrismaModel> | JsonNullValueFilter
  }

  export type ReportCategoryCreateWithoutChildrenInput = {
    id?: string
    name: string
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: ReportCategoryCreateNestedOneWithoutChildrenInput
    createdBy?: UserCreateNestedOneWithoutCreatorReportCategoryInput
    updatedBy?: UserCreateNestedOneWithoutUpdaterReportCategoryInput
    reports?: ReportCreateNestedManyWithoutCategoryInput
  }

  export type ReportCategoryUncheckedCreateWithoutChildrenInput = {
    id?: string
    name: string
    code: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    reports?: ReportUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type ReportCategoryCreateOrConnectWithoutChildrenInput = {
    where: ReportCategoryWhereUniqueInput
    create: XOR<ReportCategoryCreateWithoutChildrenInput, ReportCategoryUncheckedCreateWithoutChildrenInput>
  }

  export type ReportCategoryCreateWithoutParentInput = {
    id?: string
    name: string
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    children?: ReportCategoryCreateNestedManyWithoutParentInput
    createdBy?: UserCreateNestedOneWithoutCreatorReportCategoryInput
    updatedBy?: UserCreateNestedOneWithoutUpdaterReportCategoryInput
    reports?: ReportCreateNestedManyWithoutCategoryInput
  }

  export type ReportCategoryUncheckedCreateWithoutParentInput = {
    id?: string
    name: string
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    children?: ReportCategoryUncheckedCreateNestedManyWithoutParentInput
    reports?: ReportUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type ReportCategoryCreateOrConnectWithoutParentInput = {
    where: ReportCategoryWhereUniqueInput
    create: XOR<ReportCategoryCreateWithoutParentInput, ReportCategoryUncheckedCreateWithoutParentInput>
  }

  export type ReportCategoryCreateManyParentInputEnvelope = {
    data: ReportCategoryCreateManyParentInput | ReportCategoryCreateManyParentInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutCreatorReportCategoryInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    role?: RoleCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    CreatorNote?: NoteCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportCreateNestedManyWithoutUpdatedByInput
    UpdaterReportCategory?: ReportCategoryCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutCreatorReportCategoryInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    departmentId?: string | null
    organizationId?: string | null
    roleId?: string | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    CreatorNote?: NoteUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportUncheckedCreateNestedManyWithoutUpdatedByInput
    UpdaterReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutCreatorReportCategoryInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatorReportCategoryInput, UserUncheckedCreateWithoutCreatorReportCategoryInput>
  }

  export type UserCreateWithoutUpdaterReportCategoryInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    role?: RoleCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    CreatorNote?: NoteCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryCreateNestedManyWithoutCreatedByInput
    CreatorDepartment?: DepartmentCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutUpdaterReportCategoryInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    departmentId?: string | null
    organizationId?: string | null
    roleId?: string | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    CreatorNote?: NoteUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutCreatedByInput
    CreatorDepartment?: DepartmentUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutUpdaterReportCategoryInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdaterReportCategoryInput, UserUncheckedCreateWithoutUpdaterReportCategoryInput>
  }

  export type ReportCreateWithoutCategoryInput = {
    id?: string
    periodYear: string
    periodMonth: string
    periodDate?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutCreatorReportInput
    updatedBy?: UserCreateNestedOneWithoutUpdaterReportInput
    organization?: OrganizationCreateNestedOneWithoutReportInput
    notes?: NoteCreateNestedManyWithoutReportInput
    stages?: StageCreateNestedManyWithoutReportInput
    files?: FileCreateNestedManyWithoutReportInput
  }

  export type ReportUncheckedCreateWithoutCategoryInput = {
    id?: string
    periodYear: string
    periodMonth: string
    periodDate?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    organizationId?: string | null
    notes?: NoteUncheckedCreateNestedManyWithoutReportInput
    stages?: StageUncheckedCreateNestedManyWithoutReportInput
    files?: FileUncheckedCreateNestedManyWithoutReportInput
  }

  export type ReportCreateOrConnectWithoutCategoryInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutCategoryInput, ReportUncheckedCreateWithoutCategoryInput>
  }

  export type ReportCreateManyCategoryInputEnvelope = {
    data: ReportCreateManyCategoryInput | ReportCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type ReportCategoryUpsertWithoutChildrenInput = {
    update: XOR<ReportCategoryUpdateWithoutChildrenInput, ReportCategoryUncheckedUpdateWithoutChildrenInput>
    create: XOR<ReportCategoryCreateWithoutChildrenInput, ReportCategoryUncheckedCreateWithoutChildrenInput>
    where?: ReportCategoryWhereInput
  }

  export type ReportCategoryUpdateToOneWithWhereWithoutChildrenInput = {
    where?: ReportCategoryWhereInput
    data: XOR<ReportCategoryUpdateWithoutChildrenInput, ReportCategoryUncheckedUpdateWithoutChildrenInput>
  }

  export type ReportCategoryUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: ReportCategoryUpdateOneWithoutChildrenNestedInput
    createdBy?: UserUpdateOneWithoutCreatorReportCategoryNestedInput
    updatedBy?: UserUpdateOneWithoutUpdaterReportCategoryNestedInput
    reports?: ReportUpdateManyWithoutCategoryNestedInput
  }

  export type ReportCategoryUncheckedUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    reports?: ReportUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type ReportCategoryUpsertWithWhereUniqueWithoutParentInput = {
    where: ReportCategoryWhereUniqueInput
    update: XOR<ReportCategoryUpdateWithoutParentInput, ReportCategoryUncheckedUpdateWithoutParentInput>
    create: XOR<ReportCategoryCreateWithoutParentInput, ReportCategoryUncheckedCreateWithoutParentInput>
  }

  export type ReportCategoryUpdateWithWhereUniqueWithoutParentInput = {
    where: ReportCategoryWhereUniqueInput
    data: XOR<ReportCategoryUpdateWithoutParentInput, ReportCategoryUncheckedUpdateWithoutParentInput>
  }

  export type ReportCategoryUpdateManyWithWhereWithoutParentInput = {
    where: ReportCategoryScalarWhereInput
    data: XOR<ReportCategoryUpdateManyMutationInput, ReportCategoryUncheckedUpdateManyWithoutParentInput>
  }

  export type ReportCategoryScalarWhereInput = {
    AND?: ReportCategoryScalarWhereInput | ReportCategoryScalarWhereInput[]
    OR?: ReportCategoryScalarWhereInput[]
    NOT?: ReportCategoryScalarWhereInput | ReportCategoryScalarWhereInput[]
    id?: StringFilter<"ReportCategory"> | string
    name?: StringFilter<"ReportCategory"> | string
    code?: StringFilter<"ReportCategory"> | string
    parentId?: StringNullableFilter<"ReportCategory"> | string | null
    createdAt?: DateTimeFilter<"ReportCategory"> | Date | string
    updatedAt?: DateTimeFilter<"ReportCategory"> | Date | string
    createdById?: StringNullableFilter<"ReportCategory"> | string | null
    updatedById?: StringNullableFilter<"ReportCategory"> | string | null
  }

  export type UserUpsertWithoutCreatorReportCategoryInput = {
    update: XOR<UserUpdateWithoutCreatorReportCategoryInput, UserUncheckedUpdateWithoutCreatorReportCategoryInput>
    create: XOR<UserCreateWithoutCreatorReportCategoryInput, UserUncheckedCreateWithoutCreatorReportCategoryInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatorReportCategoryInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatorReportCategoryInput, UserUncheckedUpdateWithoutCreatorReportCategoryInput>
  }

  export type UserUpdateWithoutCreatorReportCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    role?: RoleUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUpdateManyWithoutUpdatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatorReportCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUncheckedUpdateManyWithoutUpdatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUpsertWithoutUpdaterReportCategoryInput = {
    update: XOR<UserUpdateWithoutUpdaterReportCategoryInput, UserUncheckedUpdateWithoutUpdaterReportCategoryInput>
    create: XOR<UserCreateWithoutUpdaterReportCategoryInput, UserUncheckedCreateWithoutUpdaterReportCategoryInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdaterReportCategoryInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdaterReportCategoryInput, UserUncheckedUpdateWithoutUpdaterReportCategoryInput>
  }

  export type UserUpdateWithoutUpdaterReportCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    role?: RoleUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUpdateManyWithoutCreatedByNestedInput
    CreatorDepartment?: DepartmentUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdaterReportCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    CreatorDepartment?: DepartmentUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type ReportUpsertWithWhereUniqueWithoutCategoryInput = {
    where: ReportWhereUniqueInput
    update: XOR<ReportUpdateWithoutCategoryInput, ReportUncheckedUpdateWithoutCategoryInput>
    create: XOR<ReportCreateWithoutCategoryInput, ReportUncheckedCreateWithoutCategoryInput>
  }

  export type ReportUpdateWithWhereUniqueWithoutCategoryInput = {
    where: ReportWhereUniqueInput
    data: XOR<ReportUpdateWithoutCategoryInput, ReportUncheckedUpdateWithoutCategoryInput>
  }

  export type ReportUpdateManyWithWhereWithoutCategoryInput = {
    where: ReportScalarWhereInput
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyWithoutCategoryInput>
  }

  export type ReportScalarWhereInput = {
    AND?: ReportScalarWhereInput | ReportScalarWhereInput[]
    OR?: ReportScalarWhereInput[]
    NOT?: ReportScalarWhereInput | ReportScalarWhereInput[]
    id?: StringFilter<"Report"> | string
    categoryId?: StringFilter<"Report"> | string
    periodYear?: StringFilter<"Report"> | string
    periodMonth?: StringFilter<"Report"> | string
    periodDate?: StringNullableFilter<"Report"> | string | null
    version?: IntFilter<"Report"> | number
    createdAt?: DateTimeFilter<"Report"> | Date | string
    updatedAt?: DateTimeFilter<"Report"> | Date | string
    createdById?: StringNullableFilter<"Report"> | string | null
    updatedById?: StringNullableFilter<"Report"> | string | null
    organizationId?: StringNullableFilter<"Report"> | string | null
  }

  export type ReportCategoryCreateWithoutReportsInput = {
    id?: string
    name: string
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: ReportCategoryCreateNestedOneWithoutChildrenInput
    children?: ReportCategoryCreateNestedManyWithoutParentInput
    createdBy?: UserCreateNestedOneWithoutCreatorReportCategoryInput
    updatedBy?: UserCreateNestedOneWithoutUpdaterReportCategoryInput
  }

  export type ReportCategoryUncheckedCreateWithoutReportsInput = {
    id?: string
    name: string
    code: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    children?: ReportCategoryUncheckedCreateNestedManyWithoutParentInput
  }

  export type ReportCategoryCreateOrConnectWithoutReportsInput = {
    where: ReportCategoryWhereUniqueInput
    create: XOR<ReportCategoryCreateWithoutReportsInput, ReportCategoryUncheckedCreateWithoutReportsInput>
  }

  export type UserCreateWithoutCreatorReportInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    role?: RoleCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    CreatorNote?: NoteCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageCreateNestedManyWithoutUpdatedByInput
    UpdaterReport?: ReportCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutCreatorReportInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    departmentId?: string | null
    organizationId?: string | null
    roleId?: string | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    CreatorNote?: NoteUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageUncheckedCreateNestedManyWithoutUpdatedByInput
    UpdaterReport?: ReportUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutCreatorReportInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatorReportInput, UserUncheckedCreateWithoutCreatorReportInput>
  }

  export type UserCreateWithoutUpdaterReportInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    role?: RoleCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    CreatorNote?: NoteCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportCreateNestedManyWithoutCreatedByInput
    CreatorReportCategory?: ReportCategoryCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutUpdaterReportInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    departmentId?: string | null
    organizationId?: string | null
    roleId?: string | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    CreatorNote?: NoteUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportUncheckedCreateNestedManyWithoutCreatedByInput
    CreatorReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutUpdaterReportInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdaterReportInput, UserUncheckedCreateWithoutUpdaterReportInput>
  }

  export type OrganizationCreateWithoutReportInput = {
    id?: string
    name: string
    code: string
    users?: UserCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutReportInput = {
    id?: string
    name: string
    code: string
    users?: UserUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutReportInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutReportInput, OrganizationUncheckedCreateWithoutReportInput>
  }

  export type NoteCreateWithoutReportInput = {
    id?: string
    description?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdBy?: UserCreateNestedOneWithoutCreatorNoteInput
    updatedBy?: UserCreateNestedOneWithoutUpdaterNoteInput
  }

  export type NoteUncheckedCreateWithoutReportInput = {
    id?: string
    description?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdById?: string | null
    updatedById?: string | null
  }

  export type NoteCreateOrConnectWithoutReportInput = {
    where: NoteWhereUniqueInput
    create: XOR<NoteCreateWithoutReportInput, NoteUncheckedCreateWithoutReportInput>
  }

  export type NoteCreateManyReportInputEnvelope = {
    data: NoteCreateManyReportInput | NoteCreateManyReportInput[]
    skipDuplicates?: boolean
  }

  export type StageCreateWithoutReportInput = {
    id?: string
    comment?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    type: StageTypeCreateNestedOneWithoutStagesInput
    createdBy?: UserCreateNestedOneWithoutCreatorStageInput
    updatedBy?: UserCreateNestedOneWithoutUpdaterStageInput
  }

  export type StageUncheckedCreateWithoutReportInput = {
    id?: string
    stageTypeId: string
    comment?: string | null
    createdById?: string | null
    updatedById?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type StageCreateOrConnectWithoutReportInput = {
    where: StageWhereUniqueInput
    create: XOR<StageCreateWithoutReportInput, StageUncheckedCreateWithoutReportInput>
  }

  export type StageCreateManyReportInputEnvelope = {
    data: StageCreateManyReportInput | StageCreateManyReportInput[]
    skipDuplicates?: boolean
  }

  export type FileCreateWithoutReportInput = {
    id?: string
    filename: string
    path: string
    mimeType?: string | null
    size?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileUncheckedCreateWithoutReportInput = {
    id?: string
    filename: string
    path: string
    mimeType?: string | null
    size?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type FileCreateOrConnectWithoutReportInput = {
    where: FileWhereUniqueInput
    create: XOR<FileCreateWithoutReportInput, FileUncheckedCreateWithoutReportInput>
  }

  export type FileCreateManyReportInputEnvelope = {
    data: FileCreateManyReportInput | FileCreateManyReportInput[]
    skipDuplicates?: boolean
  }

  export type ReportCategoryUpsertWithoutReportsInput = {
    update: XOR<ReportCategoryUpdateWithoutReportsInput, ReportCategoryUncheckedUpdateWithoutReportsInput>
    create: XOR<ReportCategoryCreateWithoutReportsInput, ReportCategoryUncheckedCreateWithoutReportsInput>
    where?: ReportCategoryWhereInput
  }

  export type ReportCategoryUpdateToOneWithWhereWithoutReportsInput = {
    where?: ReportCategoryWhereInput
    data: XOR<ReportCategoryUpdateWithoutReportsInput, ReportCategoryUncheckedUpdateWithoutReportsInput>
  }

  export type ReportCategoryUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: ReportCategoryUpdateOneWithoutChildrenNestedInput
    children?: ReportCategoryUpdateManyWithoutParentNestedInput
    createdBy?: UserUpdateOneWithoutCreatorReportCategoryNestedInput
    updatedBy?: UserUpdateOneWithoutUpdaterReportCategoryNestedInput
  }

  export type ReportCategoryUncheckedUpdateWithoutReportsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    children?: ReportCategoryUncheckedUpdateManyWithoutParentNestedInput
  }

  export type UserUpsertWithoutCreatorReportInput = {
    update: XOR<UserUpdateWithoutCreatorReportInput, UserUncheckedUpdateWithoutCreatorReportInput>
    create: XOR<UserCreateWithoutCreatorReportInput, UserUncheckedCreateWithoutCreatorReportInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatorReportInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatorReportInput, UserUncheckedUpdateWithoutCreatorReportInput>
  }

  export type UserUpdateWithoutCreatorReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    role?: RoleUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUpdateManyWithoutUpdatedByNestedInput
    UpdaterReport?: ReportUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatorReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUncheckedUpdateManyWithoutUpdatedByNestedInput
    UpdaterReport?: ReportUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUpsertWithoutUpdaterReportInput = {
    update: XOR<UserUpdateWithoutUpdaterReportInput, UserUncheckedUpdateWithoutUpdaterReportInput>
    create: XOR<UserCreateWithoutUpdaterReportInput, UserUncheckedCreateWithoutUpdaterReportInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdaterReportInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdaterReportInput, UserUncheckedUpdateWithoutUpdaterReportInput>
  }

  export type UserUpdateWithoutUpdaterReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    role?: RoleUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUpdateManyWithoutCreatedByNestedInput
    CreatorReportCategory?: ReportCategoryUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdaterReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUncheckedUpdateManyWithoutCreatedByNestedInput
    CreatorReportCategory?: ReportCategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type OrganizationUpsertWithoutReportInput = {
    update: XOR<OrganizationUpdateWithoutReportInput, OrganizationUncheckedUpdateWithoutReportInput>
    create: XOR<OrganizationCreateWithoutReportInput, OrganizationUncheckedCreateWithoutReportInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutReportInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutReportInput, OrganizationUncheckedUpdateWithoutReportInput>
  }

  export type OrganizationUpdateWithoutReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    users?: UserUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    users?: UserUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type NoteUpsertWithWhereUniqueWithoutReportInput = {
    where: NoteWhereUniqueInput
    update: XOR<NoteUpdateWithoutReportInput, NoteUncheckedUpdateWithoutReportInput>
    create: XOR<NoteCreateWithoutReportInput, NoteUncheckedCreateWithoutReportInput>
  }

  export type NoteUpdateWithWhereUniqueWithoutReportInput = {
    where: NoteWhereUniqueInput
    data: XOR<NoteUpdateWithoutReportInput, NoteUncheckedUpdateWithoutReportInput>
  }

  export type NoteUpdateManyWithWhereWithoutReportInput = {
    where: NoteScalarWhereInput
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyWithoutReportInput>
  }

  export type NoteScalarWhereInput = {
    AND?: NoteScalarWhereInput | NoteScalarWhereInput[]
    OR?: NoteScalarWhereInput[]
    NOT?: NoteScalarWhereInput | NoteScalarWhereInput[]
    id?: StringFilter<"Note"> | string
    description?: StringNullableFilter<"Note"> | string | null
    createdAt?: DateTimeNullableFilter<"Note"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Note"> | Date | string | null
    createdById?: StringNullableFilter<"Note"> | string | null
    updatedById?: StringNullableFilter<"Note"> | string | null
    reportId?: StringNullableFilter<"Note"> | string | null
  }

  export type StageUpsertWithWhereUniqueWithoutReportInput = {
    where: StageWhereUniqueInput
    update: XOR<StageUpdateWithoutReportInput, StageUncheckedUpdateWithoutReportInput>
    create: XOR<StageCreateWithoutReportInput, StageUncheckedCreateWithoutReportInput>
  }

  export type StageUpdateWithWhereUniqueWithoutReportInput = {
    where: StageWhereUniqueInput
    data: XOR<StageUpdateWithoutReportInput, StageUncheckedUpdateWithoutReportInput>
  }

  export type StageUpdateManyWithWhereWithoutReportInput = {
    where: StageScalarWhereInput
    data: XOR<StageUpdateManyMutationInput, StageUncheckedUpdateManyWithoutReportInput>
  }

  export type StageScalarWhereInput = {
    AND?: StageScalarWhereInput | StageScalarWhereInput[]
    OR?: StageScalarWhereInput[]
    NOT?: StageScalarWhereInput | StageScalarWhereInput[]
    id?: StringFilter<"Stage"> | string
    stageTypeId?: StringFilter<"Stage"> | string
    comment?: StringNullableFilter<"Stage"> | string | null
    createdById?: StringNullableFilter<"Stage"> | string | null
    updatedById?: StringNullableFilter<"Stage"> | string | null
    createdAt?: DateTimeNullableFilter<"Stage"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Stage"> | Date | string | null
    reportId?: StringNullableFilter<"Stage"> | string | null
  }

  export type FileUpsertWithWhereUniqueWithoutReportInput = {
    where: FileWhereUniqueInput
    update: XOR<FileUpdateWithoutReportInput, FileUncheckedUpdateWithoutReportInput>
    create: XOR<FileCreateWithoutReportInput, FileUncheckedCreateWithoutReportInput>
  }

  export type FileUpdateWithWhereUniqueWithoutReportInput = {
    where: FileWhereUniqueInput
    data: XOR<FileUpdateWithoutReportInput, FileUncheckedUpdateWithoutReportInput>
  }

  export type FileUpdateManyWithWhereWithoutReportInput = {
    where: FileScalarWhereInput
    data: XOR<FileUpdateManyMutationInput, FileUncheckedUpdateManyWithoutReportInput>
  }

  export type FileScalarWhereInput = {
    AND?: FileScalarWhereInput | FileScalarWhereInput[]
    OR?: FileScalarWhereInput[]
    NOT?: FileScalarWhereInput | FileScalarWhereInput[]
    id?: StringFilter<"File"> | string
    filename?: StringFilter<"File"> | string
    path?: StringFilter<"File"> | string
    mimeType?: StringNullableFilter<"File"> | string | null
    size?: IntNullableFilter<"File"> | number | null
    createdAt?: DateTimeFilter<"File"> | Date | string
    updatedAt?: DateTimeFilter<"File"> | Date | string
    reportId?: StringNullableFilter<"File"> | string | null
  }

  export type ReportCreateWithoutFilesInput = {
    id?: string
    periodYear: string
    periodMonth: string
    periodDate?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    category: ReportCategoryCreateNestedOneWithoutReportsInput
    createdBy?: UserCreateNestedOneWithoutCreatorReportInput
    updatedBy?: UserCreateNestedOneWithoutUpdaterReportInput
    organization?: OrganizationCreateNestedOneWithoutReportInput
    notes?: NoteCreateNestedManyWithoutReportInput
    stages?: StageCreateNestedManyWithoutReportInput
  }

  export type ReportUncheckedCreateWithoutFilesInput = {
    id?: string
    categoryId: string
    periodYear: string
    periodMonth: string
    periodDate?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    organizationId?: string | null
    notes?: NoteUncheckedCreateNestedManyWithoutReportInput
    stages?: StageUncheckedCreateNestedManyWithoutReportInput
  }

  export type ReportCreateOrConnectWithoutFilesInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutFilesInput, ReportUncheckedCreateWithoutFilesInput>
  }

  export type ReportUpsertWithoutFilesInput = {
    update: XOR<ReportUpdateWithoutFilesInput, ReportUncheckedUpdateWithoutFilesInput>
    create: XOR<ReportCreateWithoutFilesInput, ReportUncheckedCreateWithoutFilesInput>
    where?: ReportWhereInput
  }

  export type ReportUpdateToOneWithWhereWithoutFilesInput = {
    where?: ReportWhereInput
    data: XOR<ReportUpdateWithoutFilesInput, ReportUncheckedUpdateWithoutFilesInput>
  }

  export type ReportUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    periodYear?: StringFieldUpdateOperationsInput | string
    periodMonth?: StringFieldUpdateOperationsInput | string
    periodDate?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: ReportCategoryUpdateOneRequiredWithoutReportsNestedInput
    createdBy?: UserUpdateOneWithoutCreatorReportNestedInput
    updatedBy?: UserUpdateOneWithoutUpdaterReportNestedInput
    organization?: OrganizationUpdateOneWithoutReportNestedInput
    notes?: NoteUpdateManyWithoutReportNestedInput
    stages?: StageUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateWithoutFilesInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    periodYear?: StringFieldUpdateOperationsInput | string
    periodMonth?: StringFieldUpdateOperationsInput | string
    periodDate?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NoteUncheckedUpdateManyWithoutReportNestedInput
    stages?: StageUncheckedUpdateManyWithoutReportNestedInput
  }

  export type UserCreateWithoutCreatorNoteInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    role?: RoleCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    UpdaterNote?: NoteCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutCreatorNoteInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    departmentId?: string | null
    organizationId?: string | null
    roleId?: string | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    UpdaterNote?: NoteUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutCreatorNoteInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatorNoteInput, UserUncheckedCreateWithoutCreatorNoteInput>
  }

  export type UserCreateWithoutUpdaterNoteInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    role?: RoleCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    CreatorNote?: NoteCreateNestedManyWithoutCreatedByInput
    CreatorStage?: StageCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutUpdaterNoteInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    departmentId?: string | null
    organizationId?: string | null
    roleId?: string | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    CreatorNote?: NoteUncheckedCreateNestedManyWithoutCreatedByInput
    CreatorStage?: StageUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutUpdaterNoteInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdaterNoteInput, UserUncheckedCreateWithoutUpdaterNoteInput>
  }

  export type ReportCreateWithoutNotesInput = {
    id?: string
    periodYear: string
    periodMonth: string
    periodDate?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    category: ReportCategoryCreateNestedOneWithoutReportsInput
    createdBy?: UserCreateNestedOneWithoutCreatorReportInput
    updatedBy?: UserCreateNestedOneWithoutUpdaterReportInput
    organization?: OrganizationCreateNestedOneWithoutReportInput
    stages?: StageCreateNestedManyWithoutReportInput
    files?: FileCreateNestedManyWithoutReportInput
  }

  export type ReportUncheckedCreateWithoutNotesInput = {
    id?: string
    categoryId: string
    periodYear: string
    periodMonth: string
    periodDate?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    organizationId?: string | null
    stages?: StageUncheckedCreateNestedManyWithoutReportInput
    files?: FileUncheckedCreateNestedManyWithoutReportInput
  }

  export type ReportCreateOrConnectWithoutNotesInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutNotesInput, ReportUncheckedCreateWithoutNotesInput>
  }

  export type UserUpsertWithoutCreatorNoteInput = {
    update: XOR<UserUpdateWithoutCreatorNoteInput, UserUncheckedUpdateWithoutCreatorNoteInput>
    create: XOR<UserCreateWithoutCreatorNoteInput, UserUncheckedCreateWithoutCreatorNoteInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatorNoteInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatorNoteInput, UserUncheckedUpdateWithoutCreatorNoteInput>
  }

  export type UserUpdateWithoutCreatorNoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    role?: RoleUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    UpdaterNote?: NoteUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatorNoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    UpdaterNote?: NoteUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUpsertWithoutUpdaterNoteInput = {
    update: XOR<UserUpdateWithoutUpdaterNoteInput, UserUncheckedUpdateWithoutUpdaterNoteInput>
    create: XOR<UserCreateWithoutUpdaterNoteInput, UserUncheckedCreateWithoutUpdaterNoteInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdaterNoteInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdaterNoteInput, UserUncheckedUpdateWithoutUpdaterNoteInput>
  }

  export type UserUpdateWithoutUpdaterNoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    role?: RoleUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUpdateManyWithoutCreatedByNestedInput
    CreatorStage?: StageUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdaterNoteInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUncheckedUpdateManyWithoutCreatedByNestedInput
    CreatorStage?: StageUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type ReportUpsertWithoutNotesInput = {
    update: XOR<ReportUpdateWithoutNotesInput, ReportUncheckedUpdateWithoutNotesInput>
    create: XOR<ReportCreateWithoutNotesInput, ReportUncheckedCreateWithoutNotesInput>
    where?: ReportWhereInput
  }

  export type ReportUpdateToOneWithWhereWithoutNotesInput = {
    where?: ReportWhereInput
    data: XOR<ReportUpdateWithoutNotesInput, ReportUncheckedUpdateWithoutNotesInput>
  }

  export type ReportUpdateWithoutNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    periodYear?: StringFieldUpdateOperationsInput | string
    periodMonth?: StringFieldUpdateOperationsInput | string
    periodDate?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: ReportCategoryUpdateOneRequiredWithoutReportsNestedInput
    createdBy?: UserUpdateOneWithoutCreatorReportNestedInput
    updatedBy?: UserUpdateOneWithoutUpdaterReportNestedInput
    organization?: OrganizationUpdateOneWithoutReportNestedInput
    stages?: StageUpdateManyWithoutReportNestedInput
    files?: FileUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateWithoutNotesInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    periodYear?: StringFieldUpdateOperationsInput | string
    periodMonth?: StringFieldUpdateOperationsInput | string
    periodDate?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    stages?: StageUncheckedUpdateManyWithoutReportNestedInput
    files?: FileUncheckedUpdateManyWithoutReportNestedInput
  }

  export type StageTypeCreateWithoutStagesInput = {
    id?: string
    model: string
    order: number
    value: string
    label: string
  }

  export type StageTypeUncheckedCreateWithoutStagesInput = {
    id?: string
    model: string
    order: number
    value: string
    label: string
  }

  export type StageTypeCreateOrConnectWithoutStagesInput = {
    where: StageTypeWhereUniqueInput
    create: XOR<StageTypeCreateWithoutStagesInput, StageTypeUncheckedCreateWithoutStagesInput>
  }

  export type UserCreateWithoutCreatorStageInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    role?: RoleCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    CreatorNote?: NoteCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteCreateNestedManyWithoutUpdatedByInput
    UpdaterStage?: StageCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutCreatorStageInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    departmentId?: string | null
    organizationId?: string | null
    roleId?: string | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    CreatorNote?: NoteUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteUncheckedCreateNestedManyWithoutUpdatedByInput
    UpdaterStage?: StageUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutCreatorStageInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatorStageInput, UserUncheckedCreateWithoutCreatorStageInput>
  }

  export type UserCreateWithoutUpdaterStageInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    role?: RoleCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    CreatorNote?: NoteCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageCreateNestedManyWithoutCreatedByInput
    CreatorReport?: ReportCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutUpdaterStageInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    departmentId?: string | null
    organizationId?: string | null
    roleId?: string | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    CreatorNote?: NoteUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageUncheckedCreateNestedManyWithoutCreatedByInput
    CreatorReport?: ReportUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutUpdaterStageInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdaterStageInput, UserUncheckedCreateWithoutUpdaterStageInput>
  }

  export type ReportCreateWithoutStagesInput = {
    id?: string
    periodYear: string
    periodMonth: string
    periodDate?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    category: ReportCategoryCreateNestedOneWithoutReportsInput
    createdBy?: UserCreateNestedOneWithoutCreatorReportInput
    updatedBy?: UserCreateNestedOneWithoutUpdaterReportInput
    organization?: OrganizationCreateNestedOneWithoutReportInput
    notes?: NoteCreateNestedManyWithoutReportInput
    files?: FileCreateNestedManyWithoutReportInput
  }

  export type ReportUncheckedCreateWithoutStagesInput = {
    id?: string
    categoryId: string
    periodYear: string
    periodMonth: string
    periodDate?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    organizationId?: string | null
    notes?: NoteUncheckedCreateNestedManyWithoutReportInput
    files?: FileUncheckedCreateNestedManyWithoutReportInput
  }

  export type ReportCreateOrConnectWithoutStagesInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutStagesInput, ReportUncheckedCreateWithoutStagesInput>
  }

  export type StageTypeUpsertWithoutStagesInput = {
    update: XOR<StageTypeUpdateWithoutStagesInput, StageTypeUncheckedUpdateWithoutStagesInput>
    create: XOR<StageTypeCreateWithoutStagesInput, StageTypeUncheckedCreateWithoutStagesInput>
    where?: StageTypeWhereInput
  }

  export type StageTypeUpdateToOneWithWhereWithoutStagesInput = {
    where?: StageTypeWhereInput
    data: XOR<StageTypeUpdateWithoutStagesInput, StageTypeUncheckedUpdateWithoutStagesInput>
  }

  export type StageTypeUpdateWithoutStagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
  }

  export type StageTypeUncheckedUpdateWithoutStagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    model?: StringFieldUpdateOperationsInput | string
    order?: IntFieldUpdateOperationsInput | number
    value?: StringFieldUpdateOperationsInput | string
    label?: StringFieldUpdateOperationsInput | string
  }

  export type UserUpsertWithoutCreatorStageInput = {
    update: XOR<UserUpdateWithoutCreatorStageInput, UserUncheckedUpdateWithoutCreatorStageInput>
    create: XOR<UserCreateWithoutCreatorStageInput, UserUncheckedCreateWithoutCreatorStageInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatorStageInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatorStageInput, UserUncheckedUpdateWithoutCreatorStageInput>
  }

  export type UserUpdateWithoutCreatorStageInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    role?: RoleUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUpdateManyWithoutUpdatedByNestedInput
    UpdaterStage?: StageUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatorStageInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUncheckedUpdateManyWithoutUpdatedByNestedInput
    UpdaterStage?: StageUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUpsertWithoutUpdaterStageInput = {
    update: XOR<UserUpdateWithoutUpdaterStageInput, UserUncheckedUpdateWithoutUpdaterStageInput>
    create: XOR<UserCreateWithoutUpdaterStageInput, UserUncheckedCreateWithoutUpdaterStageInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdaterStageInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdaterStageInput, UserUncheckedUpdateWithoutUpdaterStageInput>
  }

  export type UserUpdateWithoutUpdaterStageInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    role?: RoleUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUpdateManyWithoutCreatedByNestedInput
    CreatorReport?: ReportUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdaterStageInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUncheckedUpdateManyWithoutCreatedByNestedInput
    CreatorReport?: ReportUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type ReportUpsertWithoutStagesInput = {
    update: XOR<ReportUpdateWithoutStagesInput, ReportUncheckedUpdateWithoutStagesInput>
    create: XOR<ReportCreateWithoutStagesInput, ReportUncheckedCreateWithoutStagesInput>
    where?: ReportWhereInput
  }

  export type ReportUpdateToOneWithWhereWithoutStagesInput = {
    where?: ReportWhereInput
    data: XOR<ReportUpdateWithoutStagesInput, ReportUncheckedUpdateWithoutStagesInput>
  }

  export type ReportUpdateWithoutStagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    periodYear?: StringFieldUpdateOperationsInput | string
    periodMonth?: StringFieldUpdateOperationsInput | string
    periodDate?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: ReportCategoryUpdateOneRequiredWithoutReportsNestedInput
    createdBy?: UserUpdateOneWithoutCreatorReportNestedInput
    updatedBy?: UserUpdateOneWithoutUpdaterReportNestedInput
    organization?: OrganizationUpdateOneWithoutReportNestedInput
    notes?: NoteUpdateManyWithoutReportNestedInput
    files?: FileUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateWithoutStagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    periodYear?: StringFieldUpdateOperationsInput | string
    periodMonth?: StringFieldUpdateOperationsInput | string
    periodDate?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NoteUncheckedUpdateManyWithoutReportNestedInput
    files?: FileUncheckedUpdateManyWithoutReportNestedInput
  }

  export type StageCreateWithoutTypeInput = {
    id?: string
    comment?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdBy?: UserCreateNestedOneWithoutCreatorStageInput
    updatedBy?: UserCreateNestedOneWithoutUpdaterStageInput
    report?: ReportCreateNestedOneWithoutStagesInput
  }

  export type StageUncheckedCreateWithoutTypeInput = {
    id?: string
    comment?: string | null
    createdById?: string | null
    updatedById?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    reportId?: string | null
  }

  export type StageCreateOrConnectWithoutTypeInput = {
    where: StageWhereUniqueInput
    create: XOR<StageCreateWithoutTypeInput, StageUncheckedCreateWithoutTypeInput>
  }

  export type StageCreateManyTypeInputEnvelope = {
    data: StageCreateManyTypeInput | StageCreateManyTypeInput[]
    skipDuplicates?: boolean
  }

  export type StageUpsertWithWhereUniqueWithoutTypeInput = {
    where: StageWhereUniqueInput
    update: XOR<StageUpdateWithoutTypeInput, StageUncheckedUpdateWithoutTypeInput>
    create: XOR<StageCreateWithoutTypeInput, StageUncheckedCreateWithoutTypeInput>
  }

  export type StageUpdateWithWhereUniqueWithoutTypeInput = {
    where: StageWhereUniqueInput
    data: XOR<StageUpdateWithoutTypeInput, StageUncheckedUpdateWithoutTypeInput>
  }

  export type StageUpdateManyWithWhereWithoutTypeInput = {
    where: StageScalarWhereInput
    data: XOR<StageUpdateManyMutationInput, StageUncheckedUpdateManyWithoutTypeInput>
  }

  export type DepartmentCreateWithoutUsersInput = {
    id?: string
    name: string
    code: string
    createdBy?: UserCreateNestedOneWithoutCreatorDepartmentInput
    updatedBy?: UserCreateNestedOneWithoutUpdaterDepartmentInput
    permissions?: DepartmentPermissionCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    code: string
    createdById?: string | null
    updatedById?: string | null
    permissions?: DepartmentPermissionUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutUsersInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutUsersInput, DepartmentUncheckedCreateWithoutUsersInput>
  }

  export type OrganizationCreateWithoutUsersInput = {
    id?: string
    name: string
    code: string
    Report?: ReportCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    code: string
    Report?: ReportUncheckedCreateNestedManyWithoutOrganizationInput
  }

  export type OrganizationCreateOrConnectWithoutUsersInput = {
    where: OrganizationWhereUniqueInput
    create: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
  }

  export type RoleCreateWithoutUsersInput = {
    id?: string
    name: string
    level: number
  }

  export type RoleUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    level: number
  }

  export type RoleCreateOrConnectWithoutUsersInput = {
    where: RoleWhereUniqueInput
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
  }

  export type UserPermissionCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    permission: PermissionCreateNestedOneWithoutUsersInput
    createdBy?: UserCreateNestedOneWithoutCreatorUserPermissionInput
    updatedBy?: UserCreateNestedOneWithoutUpdaterUserPermissionInput
  }

  export type UserPermissionUncheckedCreateWithoutUserInput = {
    id?: string
    permissionId: string
    createdAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type UserPermissionCreateOrConnectWithoutUserInput = {
    where: UserPermissionWhereUniqueInput
    create: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput>
  }

  export type UserPermissionCreateManyUserInputEnvelope = {
    data: UserPermissionCreateManyUserInput | UserPermissionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProfileCreateWithoutUserInput = {
    id?: string
    name?: string | null
    department?: string | null
    position?: string | null
    joinDate?: Date | string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdBy?: UserCreateNestedOneWithoutCreatorProfileInput
    updatedBy?: UserCreateNestedOneWithoutUpdaterProfileInput
  }

  export type ProfileUncheckedCreateWithoutUserInput = {
    id?: string
    name?: string | null
    department?: string | null
    position?: string | null
    joinDate?: Date | string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdById?: string | null
    updatedById?: string | null
  }

  export type ProfileCreateOrConnectWithoutUserInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
  }

  export type NoteCreateWithoutCreatedByInput = {
    id?: string
    description?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: UserCreateNestedOneWithoutUpdaterNoteInput
    report?: ReportCreateNestedOneWithoutNotesInput
  }

  export type NoteUncheckedCreateWithoutCreatedByInput = {
    id?: string
    description?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedById?: string | null
    reportId?: string | null
  }

  export type NoteCreateOrConnectWithoutCreatedByInput = {
    where: NoteWhereUniqueInput
    create: XOR<NoteCreateWithoutCreatedByInput, NoteUncheckedCreateWithoutCreatedByInput>
  }

  export type NoteCreateManyCreatedByInputEnvelope = {
    data: NoteCreateManyCreatedByInput | NoteCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type NoteCreateWithoutUpdatedByInput = {
    id?: string
    description?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdBy?: UserCreateNestedOneWithoutCreatorNoteInput
    report?: ReportCreateNestedOneWithoutNotesInput
  }

  export type NoteUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    description?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdById?: string | null
    reportId?: string | null
  }

  export type NoteCreateOrConnectWithoutUpdatedByInput = {
    where: NoteWhereUniqueInput
    create: XOR<NoteCreateWithoutUpdatedByInput, NoteUncheckedCreateWithoutUpdatedByInput>
  }

  export type NoteCreateManyUpdatedByInputEnvelope = {
    data: NoteCreateManyUpdatedByInput | NoteCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type StageCreateWithoutCreatedByInput = {
    id?: string
    comment?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    type: StageTypeCreateNestedOneWithoutStagesInput
    updatedBy?: UserCreateNestedOneWithoutUpdaterStageInput
    report?: ReportCreateNestedOneWithoutStagesInput
  }

  export type StageUncheckedCreateWithoutCreatedByInput = {
    id?: string
    stageTypeId: string
    comment?: string | null
    updatedById?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    reportId?: string | null
  }

  export type StageCreateOrConnectWithoutCreatedByInput = {
    where: StageWhereUniqueInput
    create: XOR<StageCreateWithoutCreatedByInput, StageUncheckedCreateWithoutCreatedByInput>
  }

  export type StageCreateManyCreatedByInputEnvelope = {
    data: StageCreateManyCreatedByInput | StageCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type StageCreateWithoutUpdatedByInput = {
    id?: string
    comment?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    type: StageTypeCreateNestedOneWithoutStagesInput
    createdBy?: UserCreateNestedOneWithoutCreatorStageInput
    report?: ReportCreateNestedOneWithoutStagesInput
  }

  export type StageUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    stageTypeId: string
    comment?: string | null
    createdById?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    reportId?: string | null
  }

  export type StageCreateOrConnectWithoutUpdatedByInput = {
    where: StageWhereUniqueInput
    create: XOR<StageCreateWithoutUpdatedByInput, StageUncheckedCreateWithoutUpdatedByInput>
  }

  export type StageCreateManyUpdatedByInputEnvelope = {
    data: StageCreateManyUpdatedByInput | StageCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type ReportCreateWithoutCreatedByInput = {
    id?: string
    periodYear: string
    periodMonth: string
    periodDate?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    category: ReportCategoryCreateNestedOneWithoutReportsInput
    updatedBy?: UserCreateNestedOneWithoutUpdaterReportInput
    organization?: OrganizationCreateNestedOneWithoutReportInput
    notes?: NoteCreateNestedManyWithoutReportInput
    stages?: StageCreateNestedManyWithoutReportInput
    files?: FileCreateNestedManyWithoutReportInput
  }

  export type ReportUncheckedCreateWithoutCreatedByInput = {
    id?: string
    categoryId: string
    periodYear: string
    periodMonth: string
    periodDate?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById?: string | null
    organizationId?: string | null
    notes?: NoteUncheckedCreateNestedManyWithoutReportInput
    stages?: StageUncheckedCreateNestedManyWithoutReportInput
    files?: FileUncheckedCreateNestedManyWithoutReportInput
  }

  export type ReportCreateOrConnectWithoutCreatedByInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutCreatedByInput, ReportUncheckedCreateWithoutCreatedByInput>
  }

  export type ReportCreateManyCreatedByInputEnvelope = {
    data: ReportCreateManyCreatedByInput | ReportCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ReportCreateWithoutUpdatedByInput = {
    id?: string
    periodYear: string
    periodMonth: string
    periodDate?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    category: ReportCategoryCreateNestedOneWithoutReportsInput
    createdBy?: UserCreateNestedOneWithoutCreatorReportInput
    organization?: OrganizationCreateNestedOneWithoutReportInput
    notes?: NoteCreateNestedManyWithoutReportInput
    stages?: StageCreateNestedManyWithoutReportInput
    files?: FileCreateNestedManyWithoutReportInput
  }

  export type ReportUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    categoryId: string
    periodYear: string
    periodMonth: string
    periodDate?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    organizationId?: string | null
    notes?: NoteUncheckedCreateNestedManyWithoutReportInput
    stages?: StageUncheckedCreateNestedManyWithoutReportInput
    files?: FileUncheckedCreateNestedManyWithoutReportInput
  }

  export type ReportCreateOrConnectWithoutUpdatedByInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutUpdatedByInput, ReportUncheckedCreateWithoutUpdatedByInput>
  }

  export type ReportCreateManyUpdatedByInputEnvelope = {
    data: ReportCreateManyUpdatedByInput | ReportCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type ReportCategoryCreateWithoutCreatedByInput = {
    id?: string
    name: string
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: ReportCategoryCreateNestedOneWithoutChildrenInput
    children?: ReportCategoryCreateNestedManyWithoutParentInput
    updatedBy?: UserCreateNestedOneWithoutUpdaterReportCategoryInput
    reports?: ReportCreateNestedManyWithoutCategoryInput
  }

  export type ReportCategoryUncheckedCreateWithoutCreatedByInput = {
    id?: string
    name: string
    code: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById?: string | null
    children?: ReportCategoryUncheckedCreateNestedManyWithoutParentInput
    reports?: ReportUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type ReportCategoryCreateOrConnectWithoutCreatedByInput = {
    where: ReportCategoryWhereUniqueInput
    create: XOR<ReportCategoryCreateWithoutCreatedByInput, ReportCategoryUncheckedCreateWithoutCreatedByInput>
  }

  export type ReportCategoryCreateManyCreatedByInputEnvelope = {
    data: ReportCategoryCreateManyCreatedByInput | ReportCategoryCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ReportCategoryCreateWithoutUpdatedByInput = {
    id?: string
    name: string
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    parent?: ReportCategoryCreateNestedOneWithoutChildrenInput
    children?: ReportCategoryCreateNestedManyWithoutParentInput
    createdBy?: UserCreateNestedOneWithoutCreatorReportCategoryInput
    reports?: ReportCreateNestedManyWithoutCategoryInput
  }

  export type ReportCategoryUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    name: string
    code: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    children?: ReportCategoryUncheckedCreateNestedManyWithoutParentInput
    reports?: ReportUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type ReportCategoryCreateOrConnectWithoutUpdatedByInput = {
    where: ReportCategoryWhereUniqueInput
    create: XOR<ReportCategoryCreateWithoutUpdatedByInput, ReportCategoryUncheckedCreateWithoutUpdatedByInput>
  }

  export type ReportCategoryCreateManyUpdatedByInputEnvelope = {
    data: ReportCategoryCreateManyUpdatedByInput | ReportCategoryCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentCreateWithoutCreatedByInput = {
    id?: string
    name: string
    code: string
    updatedBy?: UserCreateNestedOneWithoutUpdaterDepartmentInput
    users?: UserCreateNestedManyWithoutDepartmentInput
    permissions?: DepartmentPermissionCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutCreatedByInput = {
    id?: string
    name: string
    code: string
    updatedById?: string | null
    users?: UserUncheckedCreateNestedManyWithoutDepartmentInput
    permissions?: DepartmentPermissionUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutCreatedByInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutCreatedByInput, DepartmentUncheckedCreateWithoutCreatedByInput>
  }

  export type DepartmentCreateManyCreatedByInputEnvelope = {
    data: DepartmentCreateManyCreatedByInput | DepartmentCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentCreateWithoutUpdatedByInput = {
    id?: string
    name: string
    code: string
    createdBy?: UserCreateNestedOneWithoutCreatorDepartmentInput
    users?: UserCreateNestedManyWithoutDepartmentInput
    permissions?: DepartmentPermissionCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    name: string
    code: string
    createdById?: string | null
    users?: UserUncheckedCreateNestedManyWithoutDepartmentInput
    permissions?: DepartmentPermissionUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutUpdatedByInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutUpdatedByInput, DepartmentUncheckedCreateWithoutUpdatedByInput>
  }

  export type DepartmentCreateManyUpdatedByInputEnvelope = {
    data: DepartmentCreateManyUpdatedByInput | DepartmentCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type PermissionCreateWithoutCreatedByInput = {
    id?: string
    name: string
    resource: string
    action: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedBy?: UserCreateNestedOneWithoutUpdaterPermissionInput
    dept?: DepartmentPermissionCreateNestedManyWithoutPermissionInput
    users?: UserPermissionCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUncheckedCreateWithoutCreatedByInput = {
    id?: string
    name: string
    resource: string
    action: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById?: string | null
    dept?: DepartmentPermissionUncheckedCreateNestedManyWithoutPermissionInput
    users?: UserPermissionUncheckedCreateNestedManyWithoutPermissionInput
  }

  export type PermissionCreateOrConnectWithoutCreatedByInput = {
    where: PermissionWhereUniqueInput
    create: XOR<PermissionCreateWithoutCreatedByInput, PermissionUncheckedCreateWithoutCreatedByInput>
  }

  export type PermissionCreateManyCreatedByInputEnvelope = {
    data: PermissionCreateManyCreatedByInput | PermissionCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type PermissionCreateWithoutUpdatedByInput = {
    id?: string
    name: string
    resource: string
    action: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutCreatorPermissionInput
    dept?: DepartmentPermissionCreateNestedManyWithoutPermissionInput
    users?: UserPermissionCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    name: string
    resource: string
    action: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    dept?: DepartmentPermissionUncheckedCreateNestedManyWithoutPermissionInput
    users?: UserPermissionUncheckedCreateNestedManyWithoutPermissionInput
  }

  export type PermissionCreateOrConnectWithoutUpdatedByInput = {
    where: PermissionWhereUniqueInput
    create: XOR<PermissionCreateWithoutUpdatedByInput, PermissionUncheckedCreateWithoutUpdatedByInput>
  }

  export type PermissionCreateManyUpdatedByInputEnvelope = {
    data: PermissionCreateManyUpdatedByInput | PermissionCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentPermissionCreateWithoutCreatedByInput = {
    id?: string
    createdAt?: Date | string
    updatedBy?: UserCreateNestedOneWithoutUpdaterDepartmentPermissionInput
    department: DepartmentCreateNestedOneWithoutPermissionsInput
    permission: PermissionCreateNestedOneWithoutDeptInput
  }

  export type DepartmentPermissionUncheckedCreateWithoutCreatedByInput = {
    id?: string
    departmentId: string
    permissionId: string
    createdAt?: Date | string
    updatedById?: string | null
  }

  export type DepartmentPermissionCreateOrConnectWithoutCreatedByInput = {
    where: DepartmentPermissionWhereUniqueInput
    create: XOR<DepartmentPermissionCreateWithoutCreatedByInput, DepartmentPermissionUncheckedCreateWithoutCreatedByInput>
  }

  export type DepartmentPermissionCreateManyCreatedByInputEnvelope = {
    data: DepartmentPermissionCreateManyCreatedByInput | DepartmentPermissionCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentPermissionCreateWithoutUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutCreatorDepartmentPermissionInput
    department: DepartmentCreateNestedOneWithoutPermissionsInput
    permission: PermissionCreateNestedOneWithoutDeptInput
  }

  export type DepartmentPermissionUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    departmentId: string
    permissionId: string
    createdAt?: Date | string
    createdById?: string | null
  }

  export type DepartmentPermissionCreateOrConnectWithoutUpdatedByInput = {
    where: DepartmentPermissionWhereUniqueInput
    create: XOR<DepartmentPermissionCreateWithoutUpdatedByInput, DepartmentPermissionUncheckedCreateWithoutUpdatedByInput>
  }

  export type DepartmentPermissionCreateManyUpdatedByInputEnvelope = {
    data: DepartmentPermissionCreateManyUpdatedByInput | DepartmentPermissionCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type UserPermissionCreateWithoutCreatedByInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutPermissionsInput
    permission: PermissionCreateNestedOneWithoutUsersInput
    updatedBy?: UserCreateNestedOneWithoutUpdaterUserPermissionInput
  }

  export type UserPermissionUncheckedCreateWithoutCreatedByInput = {
    id?: string
    userId: string
    permissionId: string
    createdAt?: Date | string
    updatedById?: string | null
  }

  export type UserPermissionCreateOrConnectWithoutCreatedByInput = {
    where: UserPermissionWhereUniqueInput
    create: XOR<UserPermissionCreateWithoutCreatedByInput, UserPermissionUncheckedCreateWithoutCreatedByInput>
  }

  export type UserPermissionCreateManyCreatedByInputEnvelope = {
    data: UserPermissionCreateManyCreatedByInput | UserPermissionCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type UserPermissionCreateWithoutUpdatedByInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutPermissionsInput
    permission: PermissionCreateNestedOneWithoutUsersInput
    createdBy?: UserCreateNestedOneWithoutCreatorUserPermissionInput
  }

  export type UserPermissionUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    userId: string
    permissionId: string
    createdAt?: Date | string
    createdById?: string | null
  }

  export type UserPermissionCreateOrConnectWithoutUpdatedByInput = {
    where: UserPermissionWhereUniqueInput
    create: XOR<UserPermissionCreateWithoutUpdatedByInput, UserPermissionUncheckedCreateWithoutUpdatedByInput>
  }

  export type UserPermissionCreateManyUpdatedByInputEnvelope = {
    data: UserPermissionCreateManyUpdatedByInput | UserPermissionCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type ProfileCreateWithoutCreatedByInput = {
    id?: string
    name?: string | null
    department?: string | null
    position?: string | null
    joinDate?: Date | string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedBy?: UserCreateNestedOneWithoutUpdaterProfileInput
    user: UserCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutCreatedByInput = {
    id?: string
    name?: string | null
    department?: string | null
    position?: string | null
    joinDate?: Date | string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedById?: string | null
    userId: string
  }

  export type ProfileCreateOrConnectWithoutCreatedByInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutCreatedByInput, ProfileUncheckedCreateWithoutCreatedByInput>
  }

  export type ProfileCreateManyCreatedByInputEnvelope = {
    data: ProfileCreateManyCreatedByInput | ProfileCreateManyCreatedByInput[]
    skipDuplicates?: boolean
  }

  export type ProfileCreateWithoutUpdatedByInput = {
    id?: string
    name?: string | null
    department?: string | null
    position?: string | null
    joinDate?: Date | string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdBy?: UserCreateNestedOneWithoutCreatorProfileInput
    user: UserCreateNestedOneWithoutProfileInput
  }

  export type ProfileUncheckedCreateWithoutUpdatedByInput = {
    id?: string
    name?: string | null
    department?: string | null
    position?: string | null
    joinDate?: Date | string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdById?: string | null
    userId: string
  }

  export type ProfileCreateOrConnectWithoutUpdatedByInput = {
    where: ProfileWhereUniqueInput
    create: XOR<ProfileCreateWithoutUpdatedByInput, ProfileUncheckedCreateWithoutUpdatedByInput>
  }

  export type ProfileCreateManyUpdatedByInputEnvelope = {
    data: ProfileCreateManyUpdatedByInput | ProfileCreateManyUpdatedByInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentUpsertWithoutUsersInput = {
    update: XOR<DepartmentUpdateWithoutUsersInput, DepartmentUncheckedUpdateWithoutUsersInput>
    create: XOR<DepartmentCreateWithoutUsersInput, DepartmentUncheckedCreateWithoutUsersInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutUsersInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutUsersInput, DepartmentUncheckedUpdateWithoutUsersInput>
  }

  export type DepartmentUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdBy?: UserUpdateOneWithoutCreatorDepartmentNestedInput
    updatedBy?: UserUpdateOneWithoutUpdaterDepartmentNestedInput
    permissions?: DepartmentPermissionUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: DepartmentPermissionUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type OrganizationUpsertWithoutUsersInput = {
    update: XOR<OrganizationUpdateWithoutUsersInput, OrganizationUncheckedUpdateWithoutUsersInput>
    create: XOR<OrganizationCreateWithoutUsersInput, OrganizationUncheckedCreateWithoutUsersInput>
    where?: OrganizationWhereInput
  }

  export type OrganizationUpdateToOneWithWhereWithoutUsersInput = {
    where?: OrganizationWhereInput
    data: XOR<OrganizationUpdateWithoutUsersInput, OrganizationUncheckedUpdateWithoutUsersInput>
  }

  export type OrganizationUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    Report?: ReportUpdateManyWithoutOrganizationNestedInput
  }

  export type OrganizationUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    Report?: ReportUncheckedUpdateManyWithoutOrganizationNestedInput
  }

  export type RoleUpsertWithoutUsersInput = {
    update: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
    create: XOR<RoleCreateWithoutUsersInput, RoleUncheckedCreateWithoutUsersInput>
    where?: RoleWhereInput
  }

  export type RoleUpdateToOneWithWhereWithoutUsersInput = {
    where?: RoleWhereInput
    data: XOR<RoleUpdateWithoutUsersInput, RoleUncheckedUpdateWithoutUsersInput>
  }

  export type RoleUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
  }

  export type RoleUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    level?: IntFieldUpdateOperationsInput | number
  }

  export type UserPermissionUpsertWithWhereUniqueWithoutUserInput = {
    where: UserPermissionWhereUniqueInput
    update: XOR<UserPermissionUpdateWithoutUserInput, UserPermissionUncheckedUpdateWithoutUserInput>
    create: XOR<UserPermissionCreateWithoutUserInput, UserPermissionUncheckedCreateWithoutUserInput>
  }

  export type UserPermissionUpdateWithWhereUniqueWithoutUserInput = {
    where: UserPermissionWhereUniqueInput
    data: XOR<UserPermissionUpdateWithoutUserInput, UserPermissionUncheckedUpdateWithoutUserInput>
  }

  export type UserPermissionUpdateManyWithWhereWithoutUserInput = {
    where: UserPermissionScalarWhereInput
    data: XOR<UserPermissionUpdateManyMutationInput, UserPermissionUncheckedUpdateManyWithoutUserInput>
  }

  export type UserPermissionScalarWhereInput = {
    AND?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
    OR?: UserPermissionScalarWhereInput[]
    NOT?: UserPermissionScalarWhereInput | UserPermissionScalarWhereInput[]
    id?: StringFilter<"UserPermission"> | string
    userId?: StringFilter<"UserPermission"> | string
    permissionId?: StringFilter<"UserPermission"> | string
    createdAt?: DateTimeFilter<"UserPermission"> | Date | string
    createdById?: StringNullableFilter<"UserPermission"> | string | null
    updatedById?: StringNullableFilter<"UserPermission"> | string | null
  }

  export type ProfileUpsertWithoutUserInput = {
    update: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
    create: XOR<ProfileCreateWithoutUserInput, ProfileUncheckedCreateWithoutUserInput>
    where?: ProfileWhereInput
  }

  export type ProfileUpdateToOneWithWhereWithoutUserInput = {
    where?: ProfileWhereInput
    data: XOR<ProfileUpdateWithoutUserInput, ProfileUncheckedUpdateWithoutUserInput>
  }

  export type ProfileUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneWithoutCreatorProfileNestedInput
    updatedBy?: UserUpdateOneWithoutUpdaterProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NoteUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: NoteWhereUniqueInput
    update: XOR<NoteUpdateWithoutCreatedByInput, NoteUncheckedUpdateWithoutCreatedByInput>
    create: XOR<NoteCreateWithoutCreatedByInput, NoteUncheckedCreateWithoutCreatedByInput>
  }

  export type NoteUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: NoteWhereUniqueInput
    data: XOR<NoteUpdateWithoutCreatedByInput, NoteUncheckedUpdateWithoutCreatedByInput>
  }

  export type NoteUpdateManyWithWhereWithoutCreatedByInput = {
    where: NoteScalarWhereInput
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type NoteUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: NoteWhereUniqueInput
    update: XOR<NoteUpdateWithoutUpdatedByInput, NoteUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<NoteCreateWithoutUpdatedByInput, NoteUncheckedCreateWithoutUpdatedByInput>
  }

  export type NoteUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: NoteWhereUniqueInput
    data: XOR<NoteUpdateWithoutUpdatedByInput, NoteUncheckedUpdateWithoutUpdatedByInput>
  }

  export type NoteUpdateManyWithWhereWithoutUpdatedByInput = {
    where: NoteScalarWhereInput
    data: XOR<NoteUpdateManyMutationInput, NoteUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type StageUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: StageWhereUniqueInput
    update: XOR<StageUpdateWithoutCreatedByInput, StageUncheckedUpdateWithoutCreatedByInput>
    create: XOR<StageCreateWithoutCreatedByInput, StageUncheckedCreateWithoutCreatedByInput>
  }

  export type StageUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: StageWhereUniqueInput
    data: XOR<StageUpdateWithoutCreatedByInput, StageUncheckedUpdateWithoutCreatedByInput>
  }

  export type StageUpdateManyWithWhereWithoutCreatedByInput = {
    where: StageScalarWhereInput
    data: XOR<StageUpdateManyMutationInput, StageUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type StageUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: StageWhereUniqueInput
    update: XOR<StageUpdateWithoutUpdatedByInput, StageUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<StageCreateWithoutUpdatedByInput, StageUncheckedCreateWithoutUpdatedByInput>
  }

  export type StageUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: StageWhereUniqueInput
    data: XOR<StageUpdateWithoutUpdatedByInput, StageUncheckedUpdateWithoutUpdatedByInput>
  }

  export type StageUpdateManyWithWhereWithoutUpdatedByInput = {
    where: StageScalarWhereInput
    data: XOR<StageUpdateManyMutationInput, StageUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type ReportUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ReportWhereUniqueInput
    update: XOR<ReportUpdateWithoutCreatedByInput, ReportUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ReportCreateWithoutCreatedByInput, ReportUncheckedCreateWithoutCreatedByInput>
  }

  export type ReportUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ReportWhereUniqueInput
    data: XOR<ReportUpdateWithoutCreatedByInput, ReportUncheckedUpdateWithoutCreatedByInput>
  }

  export type ReportUpdateManyWithWhereWithoutCreatedByInput = {
    where: ReportScalarWhereInput
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ReportUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: ReportWhereUniqueInput
    update: XOR<ReportUpdateWithoutUpdatedByInput, ReportUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<ReportCreateWithoutUpdatedByInput, ReportUncheckedCreateWithoutUpdatedByInput>
  }

  export type ReportUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: ReportWhereUniqueInput
    data: XOR<ReportUpdateWithoutUpdatedByInput, ReportUncheckedUpdateWithoutUpdatedByInput>
  }

  export type ReportUpdateManyWithWhereWithoutUpdatedByInput = {
    where: ReportScalarWhereInput
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type ReportCategoryUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ReportCategoryWhereUniqueInput
    update: XOR<ReportCategoryUpdateWithoutCreatedByInput, ReportCategoryUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ReportCategoryCreateWithoutCreatedByInput, ReportCategoryUncheckedCreateWithoutCreatedByInput>
  }

  export type ReportCategoryUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ReportCategoryWhereUniqueInput
    data: XOR<ReportCategoryUpdateWithoutCreatedByInput, ReportCategoryUncheckedUpdateWithoutCreatedByInput>
  }

  export type ReportCategoryUpdateManyWithWhereWithoutCreatedByInput = {
    where: ReportCategoryScalarWhereInput
    data: XOR<ReportCategoryUpdateManyMutationInput, ReportCategoryUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ReportCategoryUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: ReportCategoryWhereUniqueInput
    update: XOR<ReportCategoryUpdateWithoutUpdatedByInput, ReportCategoryUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<ReportCategoryCreateWithoutUpdatedByInput, ReportCategoryUncheckedCreateWithoutUpdatedByInput>
  }

  export type ReportCategoryUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: ReportCategoryWhereUniqueInput
    data: XOR<ReportCategoryUpdateWithoutUpdatedByInput, ReportCategoryUncheckedUpdateWithoutUpdatedByInput>
  }

  export type ReportCategoryUpdateManyWithWhereWithoutUpdatedByInput = {
    where: ReportCategoryScalarWhereInput
    data: XOR<ReportCategoryUpdateManyMutationInput, ReportCategoryUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type DepartmentUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: DepartmentWhereUniqueInput
    update: XOR<DepartmentUpdateWithoutCreatedByInput, DepartmentUncheckedUpdateWithoutCreatedByInput>
    create: XOR<DepartmentCreateWithoutCreatedByInput, DepartmentUncheckedCreateWithoutCreatedByInput>
  }

  export type DepartmentUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: DepartmentWhereUniqueInput
    data: XOR<DepartmentUpdateWithoutCreatedByInput, DepartmentUncheckedUpdateWithoutCreatedByInput>
  }

  export type DepartmentUpdateManyWithWhereWithoutCreatedByInput = {
    where: DepartmentScalarWhereInput
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type DepartmentScalarWhereInput = {
    AND?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
    OR?: DepartmentScalarWhereInput[]
    NOT?: DepartmentScalarWhereInput | DepartmentScalarWhereInput[]
    id?: StringFilter<"Department"> | string
    name?: StringFilter<"Department"> | string
    code?: StringFilter<"Department"> | string
    createdById?: StringNullableFilter<"Department"> | string | null
    updatedById?: StringNullableFilter<"Department"> | string | null
  }

  export type DepartmentUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: DepartmentWhereUniqueInput
    update: XOR<DepartmentUpdateWithoutUpdatedByInput, DepartmentUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<DepartmentCreateWithoutUpdatedByInput, DepartmentUncheckedCreateWithoutUpdatedByInput>
  }

  export type DepartmentUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: DepartmentWhereUniqueInput
    data: XOR<DepartmentUpdateWithoutUpdatedByInput, DepartmentUncheckedUpdateWithoutUpdatedByInput>
  }

  export type DepartmentUpdateManyWithWhereWithoutUpdatedByInput = {
    where: DepartmentScalarWhereInput
    data: XOR<DepartmentUpdateManyMutationInput, DepartmentUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type PermissionUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: PermissionWhereUniqueInput
    update: XOR<PermissionUpdateWithoutCreatedByInput, PermissionUncheckedUpdateWithoutCreatedByInput>
    create: XOR<PermissionCreateWithoutCreatedByInput, PermissionUncheckedCreateWithoutCreatedByInput>
  }

  export type PermissionUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: PermissionWhereUniqueInput
    data: XOR<PermissionUpdateWithoutCreatedByInput, PermissionUncheckedUpdateWithoutCreatedByInput>
  }

  export type PermissionUpdateManyWithWhereWithoutCreatedByInput = {
    where: PermissionScalarWhereInput
    data: XOR<PermissionUpdateManyMutationInput, PermissionUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type PermissionScalarWhereInput = {
    AND?: PermissionScalarWhereInput | PermissionScalarWhereInput[]
    OR?: PermissionScalarWhereInput[]
    NOT?: PermissionScalarWhereInput | PermissionScalarWhereInput[]
    id?: StringFilter<"Permission"> | string
    name?: StringFilter<"Permission"> | string
    resource?: StringFilter<"Permission"> | string
    action?: StringFilter<"Permission"> | string
    description?: StringNullableFilter<"Permission"> | string | null
    createdAt?: DateTimeFilter<"Permission"> | Date | string
    updatedAt?: DateTimeFilter<"Permission"> | Date | string
    createdById?: StringNullableFilter<"Permission"> | string | null
    updatedById?: StringNullableFilter<"Permission"> | string | null
  }

  export type PermissionUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: PermissionWhereUniqueInput
    update: XOR<PermissionUpdateWithoutUpdatedByInput, PermissionUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<PermissionCreateWithoutUpdatedByInput, PermissionUncheckedCreateWithoutUpdatedByInput>
  }

  export type PermissionUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: PermissionWhereUniqueInput
    data: XOR<PermissionUpdateWithoutUpdatedByInput, PermissionUncheckedUpdateWithoutUpdatedByInput>
  }

  export type PermissionUpdateManyWithWhereWithoutUpdatedByInput = {
    where: PermissionScalarWhereInput
    data: XOR<PermissionUpdateManyMutationInput, PermissionUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type DepartmentPermissionUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: DepartmentPermissionWhereUniqueInput
    update: XOR<DepartmentPermissionUpdateWithoutCreatedByInput, DepartmentPermissionUncheckedUpdateWithoutCreatedByInput>
    create: XOR<DepartmentPermissionCreateWithoutCreatedByInput, DepartmentPermissionUncheckedCreateWithoutCreatedByInput>
  }

  export type DepartmentPermissionUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: DepartmentPermissionWhereUniqueInput
    data: XOR<DepartmentPermissionUpdateWithoutCreatedByInput, DepartmentPermissionUncheckedUpdateWithoutCreatedByInput>
  }

  export type DepartmentPermissionUpdateManyWithWhereWithoutCreatedByInput = {
    where: DepartmentPermissionScalarWhereInput
    data: XOR<DepartmentPermissionUpdateManyMutationInput, DepartmentPermissionUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type DepartmentPermissionScalarWhereInput = {
    AND?: DepartmentPermissionScalarWhereInput | DepartmentPermissionScalarWhereInput[]
    OR?: DepartmentPermissionScalarWhereInput[]
    NOT?: DepartmentPermissionScalarWhereInput | DepartmentPermissionScalarWhereInput[]
    id?: StringFilter<"DepartmentPermission"> | string
    departmentId?: StringFilter<"DepartmentPermission"> | string
    permissionId?: StringFilter<"DepartmentPermission"> | string
    createdAt?: DateTimeFilter<"DepartmentPermission"> | Date | string
    createdById?: StringNullableFilter<"DepartmentPermission"> | string | null
    updatedById?: StringNullableFilter<"DepartmentPermission"> | string | null
  }

  export type DepartmentPermissionUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: DepartmentPermissionWhereUniqueInput
    update: XOR<DepartmentPermissionUpdateWithoutUpdatedByInput, DepartmentPermissionUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<DepartmentPermissionCreateWithoutUpdatedByInput, DepartmentPermissionUncheckedCreateWithoutUpdatedByInput>
  }

  export type DepartmentPermissionUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: DepartmentPermissionWhereUniqueInput
    data: XOR<DepartmentPermissionUpdateWithoutUpdatedByInput, DepartmentPermissionUncheckedUpdateWithoutUpdatedByInput>
  }

  export type DepartmentPermissionUpdateManyWithWhereWithoutUpdatedByInput = {
    where: DepartmentPermissionScalarWhereInput
    data: XOR<DepartmentPermissionUpdateManyMutationInput, DepartmentPermissionUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type UserPermissionUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: UserPermissionWhereUniqueInput
    update: XOR<UserPermissionUpdateWithoutCreatedByInput, UserPermissionUncheckedUpdateWithoutCreatedByInput>
    create: XOR<UserPermissionCreateWithoutCreatedByInput, UserPermissionUncheckedCreateWithoutCreatedByInput>
  }

  export type UserPermissionUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: UserPermissionWhereUniqueInput
    data: XOR<UserPermissionUpdateWithoutCreatedByInput, UserPermissionUncheckedUpdateWithoutCreatedByInput>
  }

  export type UserPermissionUpdateManyWithWhereWithoutCreatedByInput = {
    where: UserPermissionScalarWhereInput
    data: XOR<UserPermissionUpdateManyMutationInput, UserPermissionUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type UserPermissionUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: UserPermissionWhereUniqueInput
    update: XOR<UserPermissionUpdateWithoutUpdatedByInput, UserPermissionUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<UserPermissionCreateWithoutUpdatedByInput, UserPermissionUncheckedCreateWithoutUpdatedByInput>
  }

  export type UserPermissionUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: UserPermissionWhereUniqueInput
    data: XOR<UserPermissionUpdateWithoutUpdatedByInput, UserPermissionUncheckedUpdateWithoutUpdatedByInput>
  }

  export type UserPermissionUpdateManyWithWhereWithoutUpdatedByInput = {
    where: UserPermissionScalarWhereInput
    data: XOR<UserPermissionUpdateManyMutationInput, UserPermissionUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type ProfileUpsertWithWhereUniqueWithoutCreatedByInput = {
    where: ProfileWhereUniqueInput
    update: XOR<ProfileUpdateWithoutCreatedByInput, ProfileUncheckedUpdateWithoutCreatedByInput>
    create: XOR<ProfileCreateWithoutCreatedByInput, ProfileUncheckedCreateWithoutCreatedByInput>
  }

  export type ProfileUpdateWithWhereUniqueWithoutCreatedByInput = {
    where: ProfileWhereUniqueInput
    data: XOR<ProfileUpdateWithoutCreatedByInput, ProfileUncheckedUpdateWithoutCreatedByInput>
  }

  export type ProfileUpdateManyWithWhereWithoutCreatedByInput = {
    where: ProfileScalarWhereInput
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyWithoutCreatedByInput>
  }

  export type ProfileScalarWhereInput = {
    AND?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
    OR?: ProfileScalarWhereInput[]
    NOT?: ProfileScalarWhereInput | ProfileScalarWhereInput[]
    id?: StringFilter<"Profile"> | string
    name?: StringNullableFilter<"Profile"> | string | null
    department?: StringNullableFilter<"Profile"> | string | null
    position?: StringNullableFilter<"Profile"> | string | null
    joinDate?: DateTimeNullableFilter<"Profile"> | Date | string | null
    createdAt?: DateTimeNullableFilter<"Profile"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"Profile"> | Date | string | null
    createdById?: StringNullableFilter<"Profile"> | string | null
    updatedById?: StringNullableFilter<"Profile"> | string | null
    userId?: StringFilter<"Profile"> | string
  }

  export type ProfileUpsertWithWhereUniqueWithoutUpdatedByInput = {
    where: ProfileWhereUniqueInput
    update: XOR<ProfileUpdateWithoutUpdatedByInput, ProfileUncheckedUpdateWithoutUpdatedByInput>
    create: XOR<ProfileCreateWithoutUpdatedByInput, ProfileUncheckedCreateWithoutUpdatedByInput>
  }

  export type ProfileUpdateWithWhereUniqueWithoutUpdatedByInput = {
    where: ProfileWhereUniqueInput
    data: XOR<ProfileUpdateWithoutUpdatedByInput, ProfileUncheckedUpdateWithoutUpdatedByInput>
  }

  export type ProfileUpdateManyWithWhereWithoutUpdatedByInput = {
    where: ProfileScalarWhereInput
    data: XOR<ProfileUpdateManyMutationInput, ProfileUncheckedUpdateManyWithoutUpdatedByInput>
  }

  export type UserCreateWithoutOrganizationInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    department?: DepartmentCreateNestedOneWithoutUsersInput
    role?: RoleCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    CreatorNote?: NoteCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutOrganizationInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    departmentId?: string | null
    roleId?: string | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    CreatorNote?: NoteUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutOrganizationInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput>
  }

  export type UserCreateManyOrganizationInputEnvelope = {
    data: UserCreateManyOrganizationInput | UserCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type ReportCreateWithoutOrganizationInput = {
    id?: string
    periodYear: string
    periodMonth: string
    periodDate?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    category: ReportCategoryCreateNestedOneWithoutReportsInput
    createdBy?: UserCreateNestedOneWithoutCreatorReportInput
    updatedBy?: UserCreateNestedOneWithoutUpdaterReportInput
    notes?: NoteCreateNestedManyWithoutReportInput
    stages?: StageCreateNestedManyWithoutReportInput
    files?: FileCreateNestedManyWithoutReportInput
  }

  export type ReportUncheckedCreateWithoutOrganizationInput = {
    id?: string
    categoryId: string
    periodYear: string
    periodMonth: string
    periodDate?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    notes?: NoteUncheckedCreateNestedManyWithoutReportInput
    stages?: StageUncheckedCreateNestedManyWithoutReportInput
    files?: FileUncheckedCreateNestedManyWithoutReportInput
  }

  export type ReportCreateOrConnectWithoutOrganizationInput = {
    where: ReportWhereUniqueInput
    create: XOR<ReportCreateWithoutOrganizationInput, ReportUncheckedCreateWithoutOrganizationInput>
  }

  export type ReportCreateManyOrganizationInputEnvelope = {
    data: ReportCreateManyOrganizationInput | ReportCreateManyOrganizationInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutOrganizationInput, UserUncheckedUpdateWithoutOrganizationInput>
    create: XOR<UserCreateWithoutOrganizationInput, UserUncheckedCreateWithoutOrganizationInput>
  }

  export type UserUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutOrganizationInput, UserUncheckedUpdateWithoutOrganizationInput>
  }

  export type UserUpdateManyWithWhereWithoutOrganizationInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    status?: EnumUserStatusFilter<"User"> | $Enums.UserStatus
    createdAt?: DateTimeNullableFilter<"User"> | Date | string | null
    updatedAt?: DateTimeNullableFilter<"User"> | Date | string | null
    departmentId?: StringNullableFilter<"User"> | string | null
    organizationId?: StringNullableFilter<"User"> | string | null
    roleId?: StringNullableFilter<"User"> | string | null
  }

  export type ReportUpsertWithWhereUniqueWithoutOrganizationInput = {
    where: ReportWhereUniqueInput
    update: XOR<ReportUpdateWithoutOrganizationInput, ReportUncheckedUpdateWithoutOrganizationInput>
    create: XOR<ReportCreateWithoutOrganizationInput, ReportUncheckedCreateWithoutOrganizationInput>
  }

  export type ReportUpdateWithWhereUniqueWithoutOrganizationInput = {
    where: ReportWhereUniqueInput
    data: XOR<ReportUpdateWithoutOrganizationInput, ReportUncheckedUpdateWithoutOrganizationInput>
  }

  export type ReportUpdateManyWithWhereWithoutOrganizationInput = {
    where: ReportScalarWhereInput
    data: XOR<ReportUpdateManyMutationInput, ReportUncheckedUpdateManyWithoutOrganizationInput>
  }

  export type UserCreateWithoutRoleInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    CreatorNote?: NoteCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutRoleInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    departmentId?: string | null
    organizationId?: string | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    CreatorNote?: NoteUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutRoleInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput>
  }

  export type UserCreateManyRoleInputEnvelope = {
    data: UserCreateManyRoleInput | UserCreateManyRoleInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithWhereUniqueWithoutRoleInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutRoleInput, UserUncheckedUpdateWithoutRoleInput>
    create: XOR<UserCreateWithoutRoleInput, UserUncheckedCreateWithoutRoleInput>
  }

  export type UserUpdateWithWhereUniqueWithoutRoleInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutRoleInput, UserUncheckedUpdateWithoutRoleInput>
  }

  export type UserUpdateManyWithWhereWithoutRoleInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutRoleInput>
  }

  export type UserCreateWithoutCreatorDepartmentInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    role?: RoleCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    CreatorNote?: NoteCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryCreateNestedManyWithoutUpdatedByInput
    UpdaterDepartment?: DepartmentCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutCreatorDepartmentInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    departmentId?: string | null
    organizationId?: string | null
    roleId?: string | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    CreatorNote?: NoteUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    UpdaterDepartment?: DepartmentUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutCreatorDepartmentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatorDepartmentInput, UserUncheckedCreateWithoutCreatorDepartmentInput>
  }

  export type UserCreateWithoutUpdaterDepartmentInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    role?: RoleCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    CreatorNote?: NoteCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentCreateNestedManyWithoutCreatedByInput
    CreatorPermission?: PermissionCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutUpdaterDepartmentInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    departmentId?: string | null
    organizationId?: string | null
    roleId?: string | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    CreatorNote?: NoteUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentUncheckedCreateNestedManyWithoutCreatedByInput
    CreatorPermission?: PermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutUpdaterDepartmentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdaterDepartmentInput, UserUncheckedCreateWithoutUpdaterDepartmentInput>
  }

  export type UserCreateWithoutDepartmentInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    role?: RoleCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    CreatorNote?: NoteCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutDepartmentInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    organizationId?: string | null
    roleId?: string | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    CreatorNote?: NoteUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutDepartmentInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput>
  }

  export type UserCreateManyDepartmentInputEnvelope = {
    data: UserCreateManyDepartmentInput | UserCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type DepartmentPermissionCreateWithoutDepartmentInput = {
    id?: string
    createdAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutCreatorDepartmentPermissionInput
    updatedBy?: UserCreateNestedOneWithoutUpdaterDepartmentPermissionInput
    permission: PermissionCreateNestedOneWithoutDeptInput
  }

  export type DepartmentPermissionUncheckedCreateWithoutDepartmentInput = {
    id?: string
    permissionId: string
    createdAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type DepartmentPermissionCreateOrConnectWithoutDepartmentInput = {
    where: DepartmentPermissionWhereUniqueInput
    create: XOR<DepartmentPermissionCreateWithoutDepartmentInput, DepartmentPermissionUncheckedCreateWithoutDepartmentInput>
  }

  export type DepartmentPermissionCreateManyDepartmentInputEnvelope = {
    data: DepartmentPermissionCreateManyDepartmentInput | DepartmentPermissionCreateManyDepartmentInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatorDepartmentInput = {
    update: XOR<UserUpdateWithoutCreatorDepartmentInput, UserUncheckedUpdateWithoutCreatorDepartmentInput>
    create: XOR<UserCreateWithoutCreatorDepartmentInput, UserUncheckedCreateWithoutCreatorDepartmentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatorDepartmentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatorDepartmentInput, UserUncheckedUpdateWithoutCreatorDepartmentInput>
  }

  export type UserUpdateWithoutCreatorDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    role?: RoleUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUpdateManyWithoutUpdatedByNestedInput
    UpdaterDepartment?: DepartmentUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatorDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    UpdaterDepartment?: DepartmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUpsertWithoutUpdaterDepartmentInput = {
    update: XOR<UserUpdateWithoutUpdaterDepartmentInput, UserUncheckedUpdateWithoutUpdaterDepartmentInput>
    create: XOR<UserCreateWithoutUpdaterDepartmentInput, UserUncheckedCreateWithoutUpdaterDepartmentInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdaterDepartmentInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdaterDepartmentInput, UserUncheckedUpdateWithoutUpdaterDepartmentInput>
  }

  export type UserUpdateWithoutUpdaterDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    role?: RoleUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUpdateManyWithoutCreatedByNestedInput
    CreatorPermission?: PermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdaterDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUncheckedUpdateManyWithoutCreatedByNestedInput
    CreatorPermission?: PermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutDepartmentInput, UserUncheckedUpdateWithoutDepartmentInput>
    create: XOR<UserCreateWithoutDepartmentInput, UserUncheckedCreateWithoutDepartmentInput>
  }

  export type UserUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutDepartmentInput, UserUncheckedUpdateWithoutDepartmentInput>
  }

  export type UserUpdateManyWithWhereWithoutDepartmentInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type DepartmentPermissionUpsertWithWhereUniqueWithoutDepartmentInput = {
    where: DepartmentPermissionWhereUniqueInput
    update: XOR<DepartmentPermissionUpdateWithoutDepartmentInput, DepartmentPermissionUncheckedUpdateWithoutDepartmentInput>
    create: XOR<DepartmentPermissionCreateWithoutDepartmentInput, DepartmentPermissionUncheckedCreateWithoutDepartmentInput>
  }

  export type DepartmentPermissionUpdateWithWhereUniqueWithoutDepartmentInput = {
    where: DepartmentPermissionWhereUniqueInput
    data: XOR<DepartmentPermissionUpdateWithoutDepartmentInput, DepartmentPermissionUncheckedUpdateWithoutDepartmentInput>
  }

  export type DepartmentPermissionUpdateManyWithWhereWithoutDepartmentInput = {
    where: DepartmentPermissionScalarWhereInput
    data: XOR<DepartmentPermissionUpdateManyMutationInput, DepartmentPermissionUncheckedUpdateManyWithoutDepartmentInput>
  }

  export type UserCreateWithoutCreatorPermissionInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    role?: RoleCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    CreatorNote?: NoteCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentCreateNestedManyWithoutUpdatedByInput
    UpdaterPermission?: PermissionCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutCreatorPermissionInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    departmentId?: string | null
    organizationId?: string | null
    roleId?: string | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    CreatorNote?: NoteUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentUncheckedCreateNestedManyWithoutUpdatedByInput
    UpdaterPermission?: PermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutCreatorPermissionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatorPermissionInput, UserUncheckedCreateWithoutCreatorPermissionInput>
  }

  export type UserCreateWithoutUpdaterPermissionInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    role?: RoleCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    CreatorNote?: NoteCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionCreateNestedManyWithoutCreatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutUpdaterPermissionInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    departmentId?: string | null
    organizationId?: string | null
    roleId?: string | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    CreatorNote?: NoteUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionUncheckedCreateNestedManyWithoutCreatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutUpdaterPermissionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdaterPermissionInput, UserUncheckedCreateWithoutUpdaterPermissionInput>
  }

  export type DepartmentPermissionCreateWithoutPermissionInput = {
    id?: string
    createdAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutCreatorDepartmentPermissionInput
    updatedBy?: UserCreateNestedOneWithoutUpdaterDepartmentPermissionInput
    department: DepartmentCreateNestedOneWithoutPermissionsInput
  }

  export type DepartmentPermissionUncheckedCreateWithoutPermissionInput = {
    id?: string
    departmentId: string
    createdAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type DepartmentPermissionCreateOrConnectWithoutPermissionInput = {
    where: DepartmentPermissionWhereUniqueInput
    create: XOR<DepartmentPermissionCreateWithoutPermissionInput, DepartmentPermissionUncheckedCreateWithoutPermissionInput>
  }

  export type DepartmentPermissionCreateManyPermissionInputEnvelope = {
    data: DepartmentPermissionCreateManyPermissionInput | DepartmentPermissionCreateManyPermissionInput[]
    skipDuplicates?: boolean
  }

  export type UserPermissionCreateWithoutPermissionInput = {
    id?: string
    createdAt?: Date | string
    user: UserCreateNestedOneWithoutPermissionsInput
    createdBy?: UserCreateNestedOneWithoutCreatorUserPermissionInput
    updatedBy?: UserCreateNestedOneWithoutUpdaterUserPermissionInput
  }

  export type UserPermissionUncheckedCreateWithoutPermissionInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type UserPermissionCreateOrConnectWithoutPermissionInput = {
    where: UserPermissionWhereUniqueInput
    create: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput>
  }

  export type UserPermissionCreateManyPermissionInputEnvelope = {
    data: UserPermissionCreateManyPermissionInput | UserPermissionCreateManyPermissionInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCreatorPermissionInput = {
    update: XOR<UserUpdateWithoutCreatorPermissionInput, UserUncheckedUpdateWithoutCreatorPermissionInput>
    create: XOR<UserCreateWithoutCreatorPermissionInput, UserUncheckedCreateWithoutCreatorPermissionInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatorPermissionInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatorPermissionInput, UserUncheckedUpdateWithoutCreatorPermissionInput>
  }

  export type UserUpdateWithoutCreatorPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    role?: RoleUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUpdateManyWithoutUpdatedByNestedInput
    UpdaterPermission?: PermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatorPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    UpdaterPermission?: PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUpsertWithoutUpdaterPermissionInput = {
    update: XOR<UserUpdateWithoutUpdaterPermissionInput, UserUncheckedUpdateWithoutUpdaterPermissionInput>
    create: XOR<UserCreateWithoutUpdaterPermissionInput, UserUncheckedCreateWithoutUpdaterPermissionInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdaterPermissionInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdaterPermissionInput, UserUncheckedUpdateWithoutUpdaterPermissionInput>
  }

  export type UserUpdateWithoutUpdaterPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    role?: RoleUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUpdateManyWithoutCreatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdaterPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type DepartmentPermissionUpsertWithWhereUniqueWithoutPermissionInput = {
    where: DepartmentPermissionWhereUniqueInput
    update: XOR<DepartmentPermissionUpdateWithoutPermissionInput, DepartmentPermissionUncheckedUpdateWithoutPermissionInput>
    create: XOR<DepartmentPermissionCreateWithoutPermissionInput, DepartmentPermissionUncheckedCreateWithoutPermissionInput>
  }

  export type DepartmentPermissionUpdateWithWhereUniqueWithoutPermissionInput = {
    where: DepartmentPermissionWhereUniqueInput
    data: XOR<DepartmentPermissionUpdateWithoutPermissionInput, DepartmentPermissionUncheckedUpdateWithoutPermissionInput>
  }

  export type DepartmentPermissionUpdateManyWithWhereWithoutPermissionInput = {
    where: DepartmentPermissionScalarWhereInput
    data: XOR<DepartmentPermissionUpdateManyMutationInput, DepartmentPermissionUncheckedUpdateManyWithoutPermissionInput>
  }

  export type UserPermissionUpsertWithWhereUniqueWithoutPermissionInput = {
    where: UserPermissionWhereUniqueInput
    update: XOR<UserPermissionUpdateWithoutPermissionInput, UserPermissionUncheckedUpdateWithoutPermissionInput>
    create: XOR<UserPermissionCreateWithoutPermissionInput, UserPermissionUncheckedCreateWithoutPermissionInput>
  }

  export type UserPermissionUpdateWithWhereUniqueWithoutPermissionInput = {
    where: UserPermissionWhereUniqueInput
    data: XOR<UserPermissionUpdateWithoutPermissionInput, UserPermissionUncheckedUpdateWithoutPermissionInput>
  }

  export type UserPermissionUpdateManyWithWhereWithoutPermissionInput = {
    where: UserPermissionScalarWhereInput
    data: XOR<UserPermissionUpdateManyMutationInput, UserPermissionUncheckedUpdateManyWithoutPermissionInput>
  }

  export type UserCreateWithoutCreatorDepartmentPermissionInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    role?: RoleCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    CreatorNote?: NoteCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionCreateNestedManyWithoutUpdatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutCreatorDepartmentPermissionInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    departmentId?: string | null
    organizationId?: string | null
    roleId?: string | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    CreatorNote?: NoteUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutCreatorDepartmentPermissionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatorDepartmentPermissionInput, UserUncheckedCreateWithoutCreatorDepartmentPermissionInput>
  }

  export type UserCreateWithoutUpdaterDepartmentPermissionInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    role?: RoleCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    CreatorNote?: NoteCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutCreatedByInput
    CreatorUserPermission?: UserPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutUpdaterDepartmentPermissionInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    departmentId?: string | null
    organizationId?: string | null
    roleId?: string | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    CreatorNote?: NoteUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    CreatorUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutUpdaterDepartmentPermissionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdaterDepartmentPermissionInput, UserUncheckedCreateWithoutUpdaterDepartmentPermissionInput>
  }

  export type DepartmentCreateWithoutPermissionsInput = {
    id?: string
    name: string
    code: string
    createdBy?: UserCreateNestedOneWithoutCreatorDepartmentInput
    updatedBy?: UserCreateNestedOneWithoutUpdaterDepartmentInput
    users?: UserCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentUncheckedCreateWithoutPermissionsInput = {
    id?: string
    name: string
    code: string
    createdById?: string | null
    updatedById?: string | null
    users?: UserUncheckedCreateNestedManyWithoutDepartmentInput
  }

  export type DepartmentCreateOrConnectWithoutPermissionsInput = {
    where: DepartmentWhereUniqueInput
    create: XOR<DepartmentCreateWithoutPermissionsInput, DepartmentUncheckedCreateWithoutPermissionsInput>
  }

  export type PermissionCreateWithoutDeptInput = {
    id?: string
    name: string
    resource: string
    action: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutCreatorPermissionInput
    updatedBy?: UserCreateNestedOneWithoutUpdaterPermissionInput
    users?: UserPermissionCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUncheckedCreateWithoutDeptInput = {
    id?: string
    name: string
    resource: string
    action: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    users?: UserPermissionUncheckedCreateNestedManyWithoutPermissionInput
  }

  export type PermissionCreateOrConnectWithoutDeptInput = {
    where: PermissionWhereUniqueInput
    create: XOR<PermissionCreateWithoutDeptInput, PermissionUncheckedCreateWithoutDeptInput>
  }

  export type UserUpsertWithoutCreatorDepartmentPermissionInput = {
    update: XOR<UserUpdateWithoutCreatorDepartmentPermissionInput, UserUncheckedUpdateWithoutCreatorDepartmentPermissionInput>
    create: XOR<UserCreateWithoutCreatorDepartmentPermissionInput, UserUncheckedCreateWithoutCreatorDepartmentPermissionInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatorDepartmentPermissionInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatorDepartmentPermissionInput, UserUncheckedUpdateWithoutCreatorDepartmentPermissionInput>
  }

  export type UserUpdateWithoutCreatorDepartmentPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    role?: RoleUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUpdateManyWithoutUpdatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatorDepartmentPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUpsertWithoutUpdaterDepartmentPermissionInput = {
    update: XOR<UserUpdateWithoutUpdaterDepartmentPermissionInput, UserUncheckedUpdateWithoutUpdaterDepartmentPermissionInput>
    create: XOR<UserCreateWithoutUpdaterDepartmentPermissionInput, UserUncheckedCreateWithoutUpdaterDepartmentPermissionInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdaterDepartmentPermissionInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdaterDepartmentPermissionInput, UserUncheckedUpdateWithoutUpdaterDepartmentPermissionInput>
  }

  export type UserUpdateWithoutUpdaterDepartmentPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    role?: RoleUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUpdateManyWithoutCreatedByNestedInput
    CreatorUserPermission?: UserPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdaterDepartmentPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    CreatorUserPermission?: UserPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type DepartmentUpsertWithoutPermissionsInput = {
    update: XOR<DepartmentUpdateWithoutPermissionsInput, DepartmentUncheckedUpdateWithoutPermissionsInput>
    create: XOR<DepartmentCreateWithoutPermissionsInput, DepartmentUncheckedCreateWithoutPermissionsInput>
    where?: DepartmentWhereInput
  }

  export type DepartmentUpdateToOneWithWhereWithoutPermissionsInput = {
    where?: DepartmentWhereInput
    data: XOR<DepartmentUpdateWithoutPermissionsInput, DepartmentUncheckedUpdateWithoutPermissionsInput>
  }

  export type DepartmentUpdateWithoutPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdBy?: UserUpdateOneWithoutCreatorDepartmentNestedInput
    updatedBy?: UserUpdateOneWithoutUpdaterDepartmentNestedInput
    users?: UserUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type PermissionUpsertWithoutDeptInput = {
    update: XOR<PermissionUpdateWithoutDeptInput, PermissionUncheckedUpdateWithoutDeptInput>
    create: XOR<PermissionCreateWithoutDeptInput, PermissionUncheckedCreateWithoutDeptInput>
    where?: PermissionWhereInput
  }

  export type PermissionUpdateToOneWithWhereWithoutDeptInput = {
    where?: PermissionWhereInput
    data: XOR<PermissionUpdateWithoutDeptInput, PermissionUncheckedUpdateWithoutDeptInput>
  }

  export type PermissionUpdateWithoutDeptInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutCreatorPermissionNestedInput
    updatedBy?: UserUpdateOneWithoutUpdaterPermissionNestedInput
    users?: UserPermissionUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionUncheckedUpdateWithoutDeptInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserPermissionUncheckedUpdateManyWithoutPermissionNestedInput
  }

  export type UserCreateWithoutPermissionsInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    role?: RoleCreateNestedOneWithoutUsersInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    CreatorNote?: NoteCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutPermissionsInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    departmentId?: string | null
    organizationId?: string | null
    roleId?: string | null
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    CreatorNote?: NoteUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutPermissionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPermissionsInput, UserUncheckedCreateWithoutPermissionsInput>
  }

  export type PermissionCreateWithoutUsersInput = {
    id?: string
    name: string
    resource: string
    action: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdBy?: UserCreateNestedOneWithoutCreatorPermissionInput
    updatedBy?: UserCreateNestedOneWithoutUpdaterPermissionInput
    dept?: DepartmentPermissionCreateNestedManyWithoutPermissionInput
  }

  export type PermissionUncheckedCreateWithoutUsersInput = {
    id?: string
    name: string
    resource: string
    action: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    dept?: DepartmentPermissionUncheckedCreateNestedManyWithoutPermissionInput
  }

  export type PermissionCreateOrConnectWithoutUsersInput = {
    where: PermissionWhereUniqueInput
    create: XOR<PermissionCreateWithoutUsersInput, PermissionUncheckedCreateWithoutUsersInput>
  }

  export type UserCreateWithoutCreatorUserPermissionInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    role?: RoleCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    CreatorNote?: NoteCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutUpdatedByInput
    UpdaterUserPermission?: UserPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutCreatorUserPermissionInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    departmentId?: string | null
    organizationId?: string | null
    roleId?: string | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    CreatorNote?: NoteUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    UpdaterUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutCreatorUserPermissionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatorUserPermissionInput, UserUncheckedCreateWithoutCreatorUserPermissionInput>
  }

  export type UserCreateWithoutUpdaterUserPermissionInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    role?: RoleCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    CreatorNote?: NoteCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionCreateNestedManyWithoutCreatedByInput
    CreatorProfile?: ProfileCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutUpdaterUserPermissionInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    departmentId?: string | null
    organizationId?: string | null
    roleId?: string | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    CreatorNote?: NoteUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    CreatorProfile?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutUpdaterUserPermissionInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdaterUserPermissionInput, UserUncheckedCreateWithoutUpdaterUserPermissionInput>
  }

  export type UserUpsertWithoutPermissionsInput = {
    update: XOR<UserUpdateWithoutPermissionsInput, UserUncheckedUpdateWithoutPermissionsInput>
    create: XOR<UserCreateWithoutPermissionsInput, UserUncheckedCreateWithoutPermissionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPermissionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPermissionsInput, UserUncheckedUpdateWithoutPermissionsInput>
  }

  export type UserUpdateWithoutPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    role?: RoleUpdateOneWithoutUsersNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutPermissionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type PermissionUpsertWithoutUsersInput = {
    update: XOR<PermissionUpdateWithoutUsersInput, PermissionUncheckedUpdateWithoutUsersInput>
    create: XOR<PermissionCreateWithoutUsersInput, PermissionUncheckedCreateWithoutUsersInput>
    where?: PermissionWhereInput
  }

  export type PermissionUpdateToOneWithWhereWithoutUsersInput = {
    where?: PermissionWhereInput
    data: XOR<PermissionUpdateWithoutUsersInput, PermissionUncheckedUpdateWithoutUsersInput>
  }

  export type PermissionUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutCreatorPermissionNestedInput
    updatedBy?: UserUpdateOneWithoutUpdaterPermissionNestedInput
    dept?: DepartmentPermissionUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionUncheckedUpdateWithoutUsersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    dept?: DepartmentPermissionUncheckedUpdateManyWithoutPermissionNestedInput
  }

  export type UserUpsertWithoutCreatorUserPermissionInput = {
    update: XOR<UserUpdateWithoutCreatorUserPermissionInput, UserUncheckedUpdateWithoutCreatorUserPermissionInput>
    create: XOR<UserCreateWithoutCreatorUserPermissionInput, UserUncheckedCreateWithoutCreatorUserPermissionInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatorUserPermissionInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatorUserPermissionInput, UserUncheckedUpdateWithoutCreatorUserPermissionInput>
  }

  export type UserUpdateWithoutCreatorUserPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    role?: RoleUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUpdateManyWithoutUpdatedByNestedInput
    UpdaterUserPermission?: UserPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatorUserPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    UpdaterUserPermission?: UserPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUpsertWithoutUpdaterUserPermissionInput = {
    update: XOR<UserUpdateWithoutUpdaterUserPermissionInput, UserUncheckedUpdateWithoutUpdaterUserPermissionInput>
    create: XOR<UserCreateWithoutUpdaterUserPermissionInput, UserUncheckedCreateWithoutUpdaterUserPermissionInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdaterUserPermissionInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdaterUserPermissionInput, UserUncheckedUpdateWithoutUpdaterUserPermissionInput>
  }

  export type UserUpdateWithoutUpdaterUserPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    role?: RoleUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUpdateManyWithoutCreatedByNestedInput
    CreatorProfile?: ProfileUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdaterUserPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    CreatorProfile?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserCreateWithoutCreatorProfileInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    role?: RoleCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    CreatorNote?: NoteCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionCreateNestedManyWithoutUpdatedByInput
    UpdaterProfile?: ProfileCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutCreatorProfileInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    departmentId?: string | null
    organizationId?: string | null
    roleId?: string | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    CreatorNote?: NoteUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    UpdaterProfile?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutCreatorProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCreatorProfileInput, UserUncheckedCreateWithoutCreatorProfileInput>
  }

  export type UserCreateWithoutUpdaterProfileInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    role?: RoleCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    profile?: ProfileCreateNestedOneWithoutUserInput
    CreatorNote?: NoteCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileCreateNestedManyWithoutCreatedByInput
  }

  export type UserUncheckedCreateWithoutUpdaterProfileInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    departmentId?: string | null
    organizationId?: string | null
    roleId?: string | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    profile?: ProfileUncheckedCreateNestedOneWithoutUserInput
    CreatorNote?: NoteUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
  }

  export type UserCreateOrConnectWithoutUpdaterProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutUpdaterProfileInput, UserUncheckedCreateWithoutUpdaterProfileInput>
  }

  export type UserCreateWithoutProfileInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    department?: DepartmentCreateNestedOneWithoutUsersInput
    organization?: OrganizationCreateNestedOneWithoutUsersInput
    role?: RoleCreateNestedOneWithoutUsersInput
    permissions?: UserPermissionCreateNestedManyWithoutUserInput
    CreatorNote?: NoteCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileCreateNestedManyWithoutUpdatedByInput
  }

  export type UserUncheckedCreateWithoutProfileInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    departmentId?: string | null
    organizationId?: string | null
    roleId?: string | null
    permissions?: UserPermissionUncheckedCreateNestedManyWithoutUserInput
    CreatorNote?: NoteUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterNote?: NoteUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorStage?: StageUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterStage?: StageUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReport?: ReportUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReport?: ReportUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterReportCategory?: ReportCategoryUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartment?: DepartmentUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartment?: DepartmentUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorPermission?: PermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterPermission?: PermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterUserPermission?: UserPermissionUncheckedCreateNestedManyWithoutUpdatedByInput
    CreatorProfile?: ProfileUncheckedCreateNestedManyWithoutCreatedByInput
    UpdaterProfile?: ProfileUncheckedCreateNestedManyWithoutUpdatedByInput
  }

  export type UserCreateOrConnectWithoutProfileInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
  }

  export type UserUpsertWithoutCreatorProfileInput = {
    update: XOR<UserUpdateWithoutCreatorProfileInput, UserUncheckedUpdateWithoutCreatorProfileInput>
    create: XOR<UserCreateWithoutCreatorProfileInput, UserUncheckedCreateWithoutCreatorProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCreatorProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCreatorProfileInput, UserUncheckedUpdateWithoutCreatorProfileInput>
  }

  export type UserUpdateWithoutCreatorProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    role?: RoleUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUpdateManyWithoutUpdatedByNestedInput
    UpdaterProfile?: ProfileUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutCreatorProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    UpdaterProfile?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUpsertWithoutUpdaterProfileInput = {
    update: XOR<UserUpdateWithoutUpdaterProfileInput, UserUncheckedUpdateWithoutUpdaterProfileInput>
    create: XOR<UserCreateWithoutUpdaterProfileInput, UserUncheckedCreateWithoutUpdaterProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutUpdaterProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutUpdaterProfileInput, UserUncheckedUpdateWithoutUpdaterProfileInput>
  }

  export type UserUpdateWithoutUpdaterProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    role?: RoleUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutUpdaterProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
  }

  export type UserUpsertWithoutProfileInput = {
    update: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
    create: XOR<UserCreateWithoutProfileInput, UserUncheckedCreateWithoutProfileInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProfileInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProfileInput, UserUncheckedUpdateWithoutProfileInput>
  }

  export type UserUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    role?: RoleUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    CreatorNote?: NoteUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutProfileInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    CreatorNote?: NoteUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type ReportCategoryCreateManyParentInput = {
    id?: string
    name: string
    code: string
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type ReportCreateManyCategoryInput = {
    id?: string
    periodYear: string
    periodMonth: string
    periodDate?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
    organizationId?: string | null
  }

  export type ReportCategoryUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    children?: ReportCategoryUpdateManyWithoutParentNestedInput
    createdBy?: UserUpdateOneWithoutCreatorReportCategoryNestedInput
    updatedBy?: UserUpdateOneWithoutUpdaterReportCategoryNestedInput
    reports?: ReportUpdateManyWithoutCategoryNestedInput
  }

  export type ReportCategoryUncheckedUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    children?: ReportCategoryUncheckedUpdateManyWithoutParentNestedInput
    reports?: ReportUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type ReportCategoryUncheckedUpdateManyWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    periodYear?: StringFieldUpdateOperationsInput | string
    periodMonth?: StringFieldUpdateOperationsInput | string
    periodDate?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutCreatorReportNestedInput
    updatedBy?: UserUpdateOneWithoutUpdaterReportNestedInput
    organization?: OrganizationUpdateOneWithoutReportNestedInput
    notes?: NoteUpdateManyWithoutReportNestedInput
    stages?: StageUpdateManyWithoutReportNestedInput
    files?: FileUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    periodYear?: StringFieldUpdateOperationsInput | string
    periodMonth?: StringFieldUpdateOperationsInput | string
    periodDate?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NoteUncheckedUpdateManyWithoutReportNestedInput
    stages?: StageUncheckedUpdateManyWithoutReportNestedInput
    files?: FileUncheckedUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    periodYear?: StringFieldUpdateOperationsInput | string
    periodMonth?: StringFieldUpdateOperationsInput | string
    periodDate?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NoteCreateManyReportInput = {
    id?: string
    description?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdById?: string | null
    updatedById?: string | null
  }

  export type StageCreateManyReportInput = {
    id?: string
    stageTypeId: string
    comment?: string | null
    createdById?: string | null
    updatedById?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
  }

  export type FileCreateManyReportInput = {
    id?: string
    filename: string
    path: string
    mimeType?: string | null
    size?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type NoteUpdateWithoutReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneWithoutCreatorNoteNestedInput
    updatedBy?: UserUpdateOneWithoutUpdaterNoteNestedInput
  }

  export type NoteUncheckedUpdateWithoutReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NoteUncheckedUpdateManyWithoutReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StageUpdateWithoutReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: StageTypeUpdateOneRequiredWithoutStagesNestedInput
    createdBy?: UserUpdateOneWithoutCreatorStageNestedInput
    updatedBy?: UserUpdateOneWithoutUpdaterStageNestedInput
  }

  export type StageUncheckedUpdateWithoutReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    stageTypeId?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type StageUncheckedUpdateManyWithoutReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    stageTypeId?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
  }

  export type FileUpdateWithoutReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUncheckedUpdateWithoutReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type FileUncheckedUpdateManyWithoutReportInput = {
    id?: StringFieldUpdateOperationsInput | string
    filename?: StringFieldUpdateOperationsInput | string
    path?: StringFieldUpdateOperationsInput | string
    mimeType?: NullableStringFieldUpdateOperationsInput | string | null
    size?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type StageCreateManyTypeInput = {
    id?: string
    comment?: string | null
    createdById?: string | null
    updatedById?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    reportId?: string | null
  }

  export type StageUpdateWithoutTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneWithoutCreatorStageNestedInput
    updatedBy?: UserUpdateOneWithoutUpdaterStageNestedInput
    report?: ReportUpdateOneWithoutStagesNestedInput
  }

  export type StageUncheckedUpdateWithoutTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StageUncheckedUpdateManyWithoutTypeInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserPermissionCreateManyUserInput = {
    id?: string
    permissionId: string
    createdAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type NoteCreateManyCreatedByInput = {
    id?: string
    description?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedById?: string | null
    reportId?: string | null
  }

  export type NoteCreateManyUpdatedByInput = {
    id?: string
    description?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdById?: string | null
    reportId?: string | null
  }

  export type StageCreateManyCreatedByInput = {
    id?: string
    stageTypeId: string
    comment?: string | null
    updatedById?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    reportId?: string | null
  }

  export type StageCreateManyUpdatedByInput = {
    id?: string
    stageTypeId: string
    comment?: string | null
    createdById?: string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    reportId?: string | null
  }

  export type ReportCreateManyCreatedByInput = {
    id?: string
    categoryId: string
    periodYear: string
    periodMonth: string
    periodDate?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById?: string | null
    organizationId?: string | null
  }

  export type ReportCreateManyUpdatedByInput = {
    id?: string
    categoryId: string
    periodYear: string
    periodMonth: string
    periodDate?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    organizationId?: string | null
  }

  export type ReportCategoryCreateManyCreatedByInput = {
    id?: string
    name: string
    code: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById?: string | null
  }

  export type ReportCategoryCreateManyUpdatedByInput = {
    id?: string
    name: string
    code: string
    parentId?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
  }

  export type DepartmentCreateManyCreatedByInput = {
    id?: string
    name: string
    code: string
    updatedById?: string | null
  }

  export type DepartmentCreateManyUpdatedByInput = {
    id?: string
    name: string
    code: string
    createdById?: string | null
  }

  export type PermissionCreateManyCreatedByInput = {
    id?: string
    name: string
    resource: string
    action: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    updatedById?: string | null
  }

  export type PermissionCreateManyUpdatedByInput = {
    id?: string
    name: string
    resource: string
    action: string
    description?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
  }

  export type DepartmentPermissionCreateManyCreatedByInput = {
    id?: string
    departmentId: string
    permissionId: string
    createdAt?: Date | string
    updatedById?: string | null
  }

  export type DepartmentPermissionCreateManyUpdatedByInput = {
    id?: string
    departmentId: string
    permissionId: string
    createdAt?: Date | string
    createdById?: string | null
  }

  export type UserPermissionCreateManyCreatedByInput = {
    id?: string
    userId: string
    permissionId: string
    createdAt?: Date | string
    updatedById?: string | null
  }

  export type UserPermissionCreateManyUpdatedByInput = {
    id?: string
    userId: string
    permissionId: string
    createdAt?: Date | string
    createdById?: string | null
  }

  export type ProfileCreateManyCreatedByInput = {
    id?: string
    name?: string | null
    department?: string | null
    position?: string | null
    joinDate?: Date | string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    updatedById?: string | null
    userId: string
  }

  export type ProfileCreateManyUpdatedByInput = {
    id?: string
    name?: string | null
    department?: string | null
    position?: string | null
    joinDate?: Date | string | null
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    createdById?: string | null
    userId: string
  }

  export type UserPermissionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    permission?: PermissionUpdateOneRequiredWithoutUsersNestedInput
    createdBy?: UserUpdateOneWithoutCreatorUserPermissionNestedInput
    updatedBy?: UserUpdateOneWithoutUpdaterUserPermissionNestedInput
  }

  export type UserPermissionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserPermissionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NoteUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: UserUpdateOneWithoutUpdaterNoteNestedInput
    report?: ReportUpdateOneWithoutNotesNestedInput
  }

  export type NoteUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NoteUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NoteUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneWithoutCreatorNoteNestedInput
    report?: ReportUpdateOneWithoutNotesNestedInput
  }

  export type NoteUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type NoteUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StageUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: StageTypeUpdateOneRequiredWithoutStagesNestedInput
    updatedBy?: UserUpdateOneWithoutUpdaterStageNestedInput
    report?: ReportUpdateOneWithoutStagesNestedInput
  }

  export type StageUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    stageTypeId?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StageUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    stageTypeId?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StageUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    type?: StageTypeUpdateOneRequiredWithoutStagesNestedInput
    createdBy?: UserUpdateOneWithoutCreatorStageNestedInput
    report?: ReportUpdateOneWithoutStagesNestedInput
  }

  export type StageUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    stageTypeId?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type StageUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    stageTypeId?: StringFieldUpdateOperationsInput | string
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    reportId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    periodYear?: StringFieldUpdateOperationsInput | string
    periodMonth?: StringFieldUpdateOperationsInput | string
    periodDate?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: ReportCategoryUpdateOneRequiredWithoutReportsNestedInput
    updatedBy?: UserUpdateOneWithoutUpdaterReportNestedInput
    organization?: OrganizationUpdateOneWithoutReportNestedInput
    notes?: NoteUpdateManyWithoutReportNestedInput
    stages?: StageUpdateManyWithoutReportNestedInput
    files?: FileUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    periodYear?: StringFieldUpdateOperationsInput | string
    periodMonth?: StringFieldUpdateOperationsInput | string
    periodDate?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NoteUncheckedUpdateManyWithoutReportNestedInput
    stages?: StageUncheckedUpdateManyWithoutReportNestedInput
    files?: FileUncheckedUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    periodYear?: StringFieldUpdateOperationsInput | string
    periodMonth?: StringFieldUpdateOperationsInput | string
    periodDate?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    periodYear?: StringFieldUpdateOperationsInput | string
    periodMonth?: StringFieldUpdateOperationsInput | string
    periodDate?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: ReportCategoryUpdateOneRequiredWithoutReportsNestedInput
    createdBy?: UserUpdateOneWithoutCreatorReportNestedInput
    organization?: OrganizationUpdateOneWithoutReportNestedInput
    notes?: NoteUpdateManyWithoutReportNestedInput
    stages?: StageUpdateManyWithoutReportNestedInput
    files?: FileUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    periodYear?: StringFieldUpdateOperationsInput | string
    periodMonth?: StringFieldUpdateOperationsInput | string
    periodDate?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NoteUncheckedUpdateManyWithoutReportNestedInput
    stages?: StageUncheckedUpdateManyWithoutReportNestedInput
    files?: FileUncheckedUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    periodYear?: StringFieldUpdateOperationsInput | string
    periodMonth?: StringFieldUpdateOperationsInput | string
    periodDate?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportCategoryUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: ReportCategoryUpdateOneWithoutChildrenNestedInput
    children?: ReportCategoryUpdateManyWithoutParentNestedInput
    updatedBy?: UserUpdateOneWithoutUpdaterReportCategoryNestedInput
    reports?: ReportUpdateManyWithoutCategoryNestedInput
  }

  export type ReportCategoryUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    children?: ReportCategoryUncheckedUpdateManyWithoutParentNestedInput
    reports?: ReportUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type ReportCategoryUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportCategoryUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    parent?: ReportCategoryUpdateOneWithoutChildrenNestedInput
    children?: ReportCategoryUpdateManyWithoutParentNestedInput
    createdBy?: UserUpdateOneWithoutCreatorReportCategoryNestedInput
    reports?: ReportUpdateManyWithoutCategoryNestedInput
  }

  export type ReportCategoryUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    children?: ReportCategoryUncheckedUpdateManyWithoutParentNestedInput
    reports?: ReportUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type ReportCategoryUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DepartmentUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    updatedBy?: UserUpdateOneWithoutUpdaterDepartmentNestedInput
    users?: UserUpdateManyWithoutDepartmentNestedInput
    permissions?: DepartmentPermissionUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutDepartmentNestedInput
    permissions?: DepartmentPermissionUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DepartmentUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdBy?: UserUpdateOneWithoutCreatorDepartmentNestedInput
    users?: UserUpdateManyWithoutDepartmentNestedInput
    permissions?: DepartmentPermissionUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    users?: UserUncheckedUpdateManyWithoutDepartmentNestedInput
    permissions?: DepartmentPermissionUncheckedUpdateManyWithoutDepartmentNestedInput
  }

  export type DepartmentUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    code?: StringFieldUpdateOperationsInput | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PermissionUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: UserUpdateOneWithoutUpdaterPermissionNestedInput
    dept?: DepartmentPermissionUpdateManyWithoutPermissionNestedInput
    users?: UserPermissionUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    dept?: DepartmentPermissionUncheckedUpdateManyWithoutPermissionNestedInput
    users?: UserPermissionUncheckedUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PermissionUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutCreatorPermissionNestedInput
    dept?: DepartmentPermissionUpdateManyWithoutPermissionNestedInput
    users?: UserPermissionUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    dept?: DepartmentPermissionUncheckedUpdateManyWithoutPermissionNestedInput
    users?: UserPermissionUncheckedUpdateManyWithoutPermissionNestedInput
  }

  export type PermissionUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    resource?: StringFieldUpdateOperationsInput | string
    action?: StringFieldUpdateOperationsInput | string
    description?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DepartmentPermissionUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedBy?: UserUpdateOneWithoutUpdaterDepartmentPermissionNestedInput
    department?: DepartmentUpdateOneRequiredWithoutPermissionsNestedInput
    permission?: PermissionUpdateOneRequiredWithoutDeptNestedInput
  }

  export type DepartmentPermissionUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DepartmentPermissionUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DepartmentPermissionUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutCreatorDepartmentPermissionNestedInput
    department?: DepartmentUpdateOneRequiredWithoutPermissionsNestedInput
    permission?: PermissionUpdateOneRequiredWithoutDeptNestedInput
  }

  export type DepartmentPermissionUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DepartmentPermissionUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserPermissionUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPermissionsNestedInput
    permission?: PermissionUpdateOneRequiredWithoutUsersNestedInput
    updatedBy?: UserUpdateOneWithoutUpdaterUserPermissionNestedInput
  }

  export type UserPermissionUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserPermissionUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserPermissionUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPermissionsNestedInput
    permission?: PermissionUpdateOneRequiredWithoutUsersNestedInput
    createdBy?: UserUpdateOneWithoutCreatorUserPermissionNestedInput
  }

  export type UserPermissionUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserPermissionUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ProfileUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedBy?: UserUpdateOneWithoutUpdaterProfileNestedInput
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ProfileUncheckedUpdateManyWithoutCreatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ProfileUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdBy?: UserUpdateOneWithoutCreatorProfileNestedInput
    user?: UserUpdateOneRequiredWithoutProfileNestedInput
  }

  export type ProfileUncheckedUpdateWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ProfileUncheckedUpdateManyWithoutUpdatedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    department?: NullableStringFieldUpdateOperationsInput | string | null
    position?: NullableStringFieldUpdateOperationsInput | string | null
    joinDate?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserCreateManyOrganizationInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    departmentId?: string | null
    roleId?: string | null
  }

  export type ReportCreateManyOrganizationInput = {
    id?: string
    categoryId: string
    periodYear: string
    periodMonth: string
    periodDate?: string | null
    version?: number
    createdAt?: Date | string
    updatedAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type UserUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    role?: RoleUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type ReportUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    periodYear?: StringFieldUpdateOperationsInput | string
    periodMonth?: StringFieldUpdateOperationsInput | string
    periodDate?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    category?: ReportCategoryUpdateOneRequiredWithoutReportsNestedInput
    createdBy?: UserUpdateOneWithoutCreatorReportNestedInput
    updatedBy?: UserUpdateOneWithoutUpdaterReportNestedInput
    notes?: NoteUpdateManyWithoutReportNestedInput
    stages?: StageUpdateManyWithoutReportNestedInput
    files?: FileUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    periodYear?: StringFieldUpdateOperationsInput | string
    periodMonth?: StringFieldUpdateOperationsInput | string
    periodDate?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
    notes?: NoteUncheckedUpdateManyWithoutReportNestedInput
    stages?: StageUncheckedUpdateManyWithoutReportNestedInput
    files?: FileUncheckedUpdateManyWithoutReportNestedInput
  }

  export type ReportUncheckedUpdateManyWithoutOrganizationInput = {
    id?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    periodYear?: StringFieldUpdateOperationsInput | string
    periodMonth?: StringFieldUpdateOperationsInput | string
    periodDate?: NullableStringFieldUpdateOperationsInput | string | null
    version?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateManyRoleInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    departmentId?: string | null
    organizationId?: string | null
  }

  export type UserUpdateWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    department?: DepartmentUpdateOneWithoutUsersNestedInput
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateManyWithoutRoleInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    departmentId?: NullableStringFieldUpdateOperationsInput | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCreateManyDepartmentInput = {
    id?: string
    username: string
    password: string
    status?: $Enums.UserStatus
    createdAt?: Date | string | null
    updatedAt?: Date | string | null
    organizationId?: string | null
    roleId?: string | null
  }

  export type DepartmentPermissionCreateManyDepartmentInput = {
    id?: string
    permissionId: string
    createdAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type UserUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organization?: OrganizationUpdateOneWithoutUsersNestedInput
    role?: RoleUpdateOneWithoutUsersNestedInput
    permissions?: UserPermissionUpdateManyWithoutUserNestedInput
    profile?: ProfileUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
    permissions?: UserPermissionUncheckedUpdateManyWithoutUserNestedInput
    profile?: ProfileUncheckedUpdateOneWithoutUserNestedInput
    CreatorNote?: NoteUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterNote?: NoteUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorStage?: StageUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterStage?: StageUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReport?: ReportUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReport?: ReportUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorReportCategory?: ReportCategoryUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterReportCategory?: ReportCategoryUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartment?: DepartmentUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartment?: DepartmentUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorPermission?: PermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterPermission?: PermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterDepartmentPermission?: DepartmentPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorUserPermission?: UserPermissionUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterUserPermission?: UserPermissionUncheckedUpdateManyWithoutUpdatedByNestedInput
    CreatorProfile?: ProfileUncheckedUpdateManyWithoutCreatedByNestedInput
    UpdaterProfile?: ProfileUncheckedUpdateManyWithoutUpdatedByNestedInput
  }

  export type UserUncheckedUpdateManyWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    status?: EnumUserStatusFieldUpdateOperationsInput | $Enums.UserStatus
    createdAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    updatedAt?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    organizationId?: NullableStringFieldUpdateOperationsInput | string | null
    roleId?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DepartmentPermissionUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutCreatorDepartmentPermissionNestedInput
    updatedBy?: UserUpdateOneWithoutUpdaterDepartmentPermissionNestedInput
    permission?: PermissionUpdateOneRequiredWithoutDeptNestedInput
  }

  export type DepartmentPermissionUncheckedUpdateWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DepartmentPermissionUncheckedUpdateManyWithoutDepartmentInput = {
    id?: StringFieldUpdateOperationsInput | string
    permissionId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DepartmentPermissionCreateManyPermissionInput = {
    id?: string
    departmentId: string
    createdAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type UserPermissionCreateManyPermissionInput = {
    id?: string
    userId: string
    createdAt?: Date | string
    createdById?: string | null
    updatedById?: string | null
  }

  export type DepartmentPermissionUpdateWithoutPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdBy?: UserUpdateOneWithoutCreatorDepartmentPermissionNestedInput
    updatedBy?: UserUpdateOneWithoutUpdaterDepartmentPermissionNestedInput
    department?: DepartmentUpdateOneRequiredWithoutPermissionsNestedInput
  }

  export type DepartmentPermissionUncheckedUpdateWithoutPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type DepartmentPermissionUncheckedUpdateManyWithoutPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    departmentId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserPermissionUpdateWithoutPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutPermissionsNestedInput
    createdBy?: UserUpdateOneWithoutCreatorUserPermissionNestedInput
    updatedBy?: UserUpdateOneWithoutUpdaterUserPermissionNestedInput
  }

  export type UserPermissionUncheckedUpdateWithoutPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserPermissionUncheckedUpdateManyWithoutPermissionInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    createdById?: NullableStringFieldUpdateOperationsInput | string | null
    updatedById?: NullableStringFieldUpdateOperationsInput | string | null
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}